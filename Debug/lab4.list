
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08008150  08008150  00018150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f8  080083f8  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008400  08008400  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08008408  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000280  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b70  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033d5  00000000  00000000  00034c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00038068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  000392c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002636f  00000000  00000000  0003a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018280  00000000  00000000  00060727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc562  00000000  00000000  000789a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154f09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005404  00000000  00000000  00154f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008134 	.word	0x08008134

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08008134 	.word	0x08008134

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8000ee6:	200c      	movs	r0, #12
 8000ee8:	f005 fcf4 	bl	80068d4 <malloc>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 fcee 	bl	80068d4 <malloc>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 f896 	bl	8001038 <bufferClear>
    return buffer;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	889a      	ldrh	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	88db      	ldrh	r3, [r3, #6]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d21f      	bcs.n	8000f6e <bufferPush+0x58>
        disableInt();
 8000f2e:	f000 f8a9 	bl	8001084 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	88d2      	ldrh	r2, [r2, #6]
 8000f4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f4e:	fb01 f202 	mul.w	r2, r1, r2
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000f66:	f000 f8a1 	bl	80010ac <enableInt>
        return 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <bufferPush+0x5a>
    } else
        return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	82fb      	strh	r3, [r7, #22]
 8000f8a:	e00f      	b.n	8000fac <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000f8c:	8afb      	ldrh	r3, [r7, #22]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffbd 	bl	8000f16 <bufferPush>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <bufferPushValues+0x2e>
            return pushed;
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	e007      	b.n	8000fb6 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	82fb      	strh	r3, [r7, #22]
 8000fac:	8afa      	ldrh	r2, [r7, #22]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3eb      	bcc.n	8000f8c <bufferPushValues+0x14>
    }
    return pushed;
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <bufferPop+0x14>
        return 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01e      	b.n	8001010 <bufferPop+0x52>

    disableInt();
 8000fd2:	f000 f857 	bl	8001084 <disableInt>

    buffer->size--;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	889b      	ldrh	r3, [r3, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	8852      	ldrh	r2, [r2, #2]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	885b      	ldrh	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	88d2      	ldrh	r2, [r2, #6]
 8000ffa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ffe:	fb01 f202 	mul.w	r2, r1, r2
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	805a      	strh	r2, [r3, #2]

    enableInt();
 800100a:	f000 f84f 	bl	80010ac <enableInt>

    return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <bufferPeek>:

uint8_t bufferPeek(const Buffer * const buffer) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    return buffer->data[buffer->ptrOut];
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	8852      	ldrh	r2, [r2, #2]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <bufferClear>:

void bufferClear(Buffer * const buffer) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    disableInt();
 8001040:	f000 f820 	bl	8001084 <disableInt>
    buffer->size = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
    enableInt();
 8001056:	f000 f829 	bl	80010ac <enableInt>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <disableInt>:
uint16_t bufferPeekValues(const Buffer * const buffer, uint8_t **values) {
    *values = buffer->data + buffer->ptrOut;
    return buffer->size;
}

static void disableInt() {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108a:	f3ef 8310 	mrs	r3, PRIMASK
 800108e:	607b      	str	r3, [r7, #4]
  return(result);
 8001090:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <disableInt+0x24>)
 8001094:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001096:	b672      	cpsid	i
}
 8001098:	bf00      	nop
    __disable_irq();
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000108 	.word	0x20000108

080010ac <enableInt>:

static void enableInt() {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <enableInt+0x20>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f383 8810 	msr	PRIMASK, r3
}
 80010be:	bf00      	nop
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000108 	.word	0x20000108

080010d0 <commandCreate>:
struct Command {
    char *name;
    CommandAction action;
};

Command * commandCreate(const char * const name, const CommandAction action) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    size_t nameLen = strlen(name);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f892 	bl	8000204 <strlen>
 80010e0:	6178      	str	r0, [r7, #20]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fbf4 	bl	80068d4 <malloc>
 80010ec:	4603      	mov	r3, r0
 80010ee:	613b      	str	r3, [r7, #16]
    strcpy(nameCopy, name);
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	6938      	ldr	r0, [r7, #16]
 80010f4:	f005 fd0e 	bl	8006b14 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 80010f8:	2008      	movs	r0, #8
 80010fa:	f005 fbeb 	bl	80068d4 <malloc>
 80010fe:	4603      	mov	r3, r0
 8001100:	60fb      	str	r3, [r7, #12]
    command->name = nameCopy;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	601a      	str	r2, [r3, #0]
    command->action = action;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	605a      	str	r2, [r3, #4]
    return command;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <commandExecute>:

const char * commandExecute(const Command * const command) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (command == NULL || command->action == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <commandExecute+0x16>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <commandExecute+0x1a>
        return NULL;
 800112e:	2300      	movs	r3, #0
 8001130:	e004      	b.n	800113c <commandExecute+0x24>
    return (*command->action)(NULL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2000      	movs	r0, #0
 8001138:	4798      	blx	r3
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <commandGetName+0x12>
        return NULL;
 8001152:	2300      	movs	r3, #0
 8001154:	e001      	b.n	800115a <commandGetName+0x16>
    return command->name;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a34      	ldr	r2, [pc, #208]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_GPIO_Init+0xf4>)
 8001212:	f001 fdc9 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_N_Pin;
 8001216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_N_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_GPIO_Init+0xf8>)
 800122c:	f001 fbf8 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xf4>)
 800124a:	f001 fbe9 	bl	8002a20 <HAL_GPIO_Init>

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40020800 	.word	0x40020800

08001264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_I2C1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_I2C1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MX_I2C1_Init+0x7c>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012a2:	f001 fd9b 	bl	8002ddc <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 fb3c 	bl	8001928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b0:	2100      	movs	r1, #0
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012b4:	f002 fd51 	bl	8003d5a <HAL_I2CEx_ConfigAnalogFilter>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012be:	f000 fb33 	bl	8001928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012c6:	f002 fd84 	bl	8003dd2 <HAL_I2CEx_ConfigDigitalFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 fb2a 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000010c 	.word	0x2000010c
 80012dc:	40005400 	.word	0x40005400
 80012e0:	000186a0 	.word	0x000186a0

080012e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_I2C_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12b      	bne.n	800135e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_I2C_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001332:	2304      	movs	r3, #4
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <HAL_I2C_MspInit+0x8c>)
 800133e:	f001 fb6f 	bl	8002a20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40005400 	.word	0x40005400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400

08001374 <Set_Keyboard>:

#define KBRD_ADDR 0xE2

uint8_t mode = 0;

HAL_StatusTypeDef Set_Keyboard( void ) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	461a      	mov	r2, r3
 8001386:	2102      	movs	r1, #2
 8001388:	20e2      	movs	r0, #226	; 0xe2
 800138a:	f000 fb5f 	bl	8001a4c <PCA9538_Write_Register>
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <Set_Keyboard+0x2e>
		uartTransmit((uint8_t *) "Error write polarity\n", 21);
 8001398:	2115      	movs	r1, #21
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <Set_Keyboard+0x60>)
 800139c:	f000 fe64 	bl	8002068 <uartTransmit>
		goto exit;
 80013a0:	e012      	b.n	80013c8 <Set_Keyboard+0x54>
	}

	buf = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	461a      	mov	r2, r3
 80013aa:	2101      	movs	r1, #1
 80013ac:	20e2      	movs	r0, #226	; 0xe2
 80013ae:	f000 fb4d 	bl	8001a4c <PCA9538_Write_Register>
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <Set_Keyboard+0x52>
		uartTransmit((uint8_t *) "Error write output\n", 19);
 80013bc:	2113      	movs	r1, #19
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <Set_Keyboard+0x64>)
 80013c0:	f000 fe52 	bl	8002068 <uartTransmit>
 80013c4:	e000      	b.n	80013c8 <Set_Keyboard+0x54>
	}

exit:
 80013c6:	bf00      	nop
	return ret;
 80013c8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08008150 	.word	0x08008150
 80013d8:	08008168 	.word	0x08008168

080013dc <Check_Row>:

uint8_t Check_Row( uint8_t  Nrow ) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73bb      	strb	r3, [r7, #14]
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 80013ee:	f7ff ffc1 	bl	8001374 <Set_Keyboard>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <Check_Row+0x28>
		uartTransmit((uint8_t *) "Error write init\n", 17);
 80013fc:	2111      	movs	r1, #17
 80013fe:	4825      	ldr	r0, [pc, #148]	; (8001494 <Check_Row+0xb8>)
 8001400:	f000 fe32 	bl	8002068 <uartTransmit>
	}

	buf = Nrow;
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	733b      	strb	r3, [r7, #12]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	461a      	mov	r2, r3
 800140e:	2103      	movs	r1, #3
 8001410:	20e2      	movs	r0, #226	; 0xe2
 8001412:	f000 fb1b 	bl	8001a4c <PCA9538_Write_Register>
 8001416:	4603      	mov	r3, r0
 8001418:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <Check_Row+0x4c>
		uartTransmit((uint8_t *) "Error write config\n", 19);
 8001420:	2113      	movs	r1, #19
 8001422:	481d      	ldr	r0, [pc, #116]	; (8001498 <Check_Row+0xbc>)
 8001424:	f000 fe20 	bl	8002068 <uartTransmit>
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	20e2      	movs	r0, #226	; 0xe2
 8001430:	f000 fb2c 	bl	8001a8c <PCA9538_Read_Inputs>
 8001434:	4603      	mov	r3, r0
 8001436:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <Check_Row+0x6a>
		uartTransmit((uint8_t *) "Read error\n", 11);
 800143e:	210b      	movs	r1, #11
 8001440:	4816      	ldr	r0, [pc, #88]	; (800149c <Check_Row+0xc0>)
 8001442:	f000 fe11 	bl	8002068 <uartTransmit>
	}

	kbd_in = buf & 0x70;
 8001446:	7b3b      	ldrb	r3, [r7, #12]
 8001448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800144c:	737b      	strb	r3, [r7, #13]
	Nkey = kbd_in;
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	73fb      	strb	r3, [r7, #15]
	if( kbd_in != 0x70) {
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	2b70      	cmp	r3, #112	; 0x70
 8001456:	d015      	beq.n	8001484 <Check_Row+0xa8>
		if( !(kbd_in & 0x10) ) {
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <Check_Row+0x8a>
			Nkey = 0x04;
 8001462:	2304      	movs	r3, #4
 8001464:	73fb      	strb	r3, [r7, #15]
		}
		if( !(kbd_in & 0x20) ) {
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <Check_Row+0x98>
			Nkey = 0x02;
 8001470:	2302      	movs	r3, #2
 8001472:	73fb      	strb	r3, [r7, #15]
		}
		if( !(kbd_in & 0x40) ) {
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d104      	bne.n	8001488 <Check_Row+0xac>
			Nkey = 0x01;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e001      	b.n	8001488 <Check_Row+0xac>
		}
	} else Nkey = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

	return Nkey;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	0800817c 	.word	0x0800817c
 8001498:	08008190 	.word	0x08008190
 800149c:	080081a4 	.word	0x080081a4

080014a0 <kbKeyExecute>:

void kbKeyExecute(char* buf) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if (mode == 0) {
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <kbKeyExecute+0x50>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <kbKeyExecute+0x34>
		const char *commandResult = menuExecuteCommand(buf);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa73 	bl	800199c <menuExecuteCommand>
 80014b6:	60f8      	str	r0, [r7, #12]
		uartTransmit((uint8_t *) "\n", 1);
 80014b8:	2101      	movs	r1, #1
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <kbKeyExecute+0x54>)
 80014bc:	f000 fdd4 	bl	8002068 <uartTransmit>
		uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7fe fe9f 	bl	8000204 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fdcb 	bl	8002068 <uartTransmit>
	}
	else uartTransmit((uint8_t *) buf, strlen(buf));
}
 80014d2:	e008      	b.n	80014e6 <kbKeyExecute+0x46>
	else uartTransmit((uint8_t *) buf, strlen(buf));
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7fe fe95 	bl	8000204 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fdc1 	bl	8002068 <uartTransmit>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000160 	.word	0x20000160
 80014f4:	080081b0 	.word	0x080081b0

080014f8 <keyPressHandle>:

uint32_t clickStarts[12] = {0};
uint8_t handled[12] = {0};
uint8_t pressed = 0;
void keyPressHandle(uint8_t keyNumber) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	if (handled[keyNumber-1] == 1 || pressed == 1) return;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3b01      	subs	r3, #1
 8001506:	4a20      	ldr	r2, [pc, #128]	; (8001588 <keyPressHandle+0x90>)
 8001508:	5cd3      	ldrb	r3, [r2, r3]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d038      	beq.n	8001580 <keyPressHandle+0x88>
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <keyPressHandle+0x94>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d034      	beq.n	8001580 <keyPressHandle+0x88>
	char buf[2];
	uint32_t time = HAL_GetTick();
 8001516:	f001 f8d3 	bl	80026c0 <HAL_GetTick>
 800151a:	60f8      	str	r0, [r7, #12]
	if (clickStarts[keyNumber-1] > 0) {
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	3b01      	subs	r3, #1
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <keyPressHandle+0x98>)
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d023      	beq.n	8001572 <keyPressHandle+0x7a>
		if ((time - clickStarts[keyNumber-1]) > 50) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <keyPressHandle+0x98>)
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b32      	cmp	r3, #50	; 0x32
 800153a:	d922      	bls.n	8001582 <keyPressHandle+0x8a>
			sprintf(buf, "%d", keyNumber);
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4914      	ldr	r1, [pc, #80]	; (8001594 <keyPressHandle+0x9c>)
 8001544:	4618      	mov	r0, r3
 8001546:	f005 fac5 	bl	8006ad4 <siprintf>
			kbKeyExecute(buf);
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ffa6 	bl	80014a0 <kbKeyExecute>
			handled[keyNumber-1] = 1;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3b01      	subs	r3, #1
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <keyPressHandle+0x90>)
 800155a:	2101      	movs	r1, #1
 800155c:	54d1      	strb	r1, [r2, r3]
			pressed = 1;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <keyPressHandle+0x94>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
			clickStarts[keyNumber-1] = 0;
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	3b01      	subs	r3, #1
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <keyPressHandle+0x98>)
 800156a:	2100      	movs	r1, #0
 800156c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001570:	e007      	b.n	8001582 <keyPressHandle+0x8a>
		}
	} else {
		clickStarts[keyNumber-1] = time;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	3b01      	subs	r3, #1
 8001576:	4906      	ldr	r1, [pc, #24]	; (8001590 <keyPressHandle+0x98>)
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800157e:	e000      	b.n	8001582 <keyPressHandle+0x8a>
	if (handled[keyNumber-1] == 1 || pressed == 1) return;
 8001580:	bf00      	nop
	}
}
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000194 	.word	0x20000194
 800158c:	200001a0 	.word	0x200001a0
 8001590:	20000164 	.word	0x20000164
 8001594:	080081b4 	.word	0x080081b4

08001598 <keyReleaseHandle>:

void keyReleaseHandle(uint8_t keyNumber) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	if (handled[keyNumber-1] == 1) {
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <keyReleaseHandle+0x34>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <keyReleaseHandle+0x26>
		handled[keyNumber-1] = 0;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <keyReleaseHandle+0x34>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	54d1      	strb	r1, [r2, r3]
		pressed = 0;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <keyReleaseHandle+0x38>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
	}
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000194 	.word	0x20000194
 80015d0:	200001a0 	.word	0x200001a0

080015d4 <kbChangeMode>:

void kbChangeMode() {
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	if (mode == 0) mode = 1;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <kbChangeMode+0x24>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <kbChangeMode+0x14>
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <kbChangeMode+0x24>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	else mode = 0;
}
 80015e6:	e002      	b.n	80015ee <kbChangeMode+0x1a>
	else mode = 0;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <kbChangeMode+0x24>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	20000160 	.word	0x20000160

080015fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  commands[0] = commandCreate("1", (CommandAction) playA);
 8001600:	493e      	ldr	r1, [pc, #248]	; (80016fc <main+0x100>)
 8001602:	483f      	ldr	r0, [pc, #252]	; (8001700 <main+0x104>)
 8001604:	f7ff fd64 	bl	80010d0 <commandCreate>
 8001608:	4603      	mov	r3, r0
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <main+0x108>)
 800160c:	6013      	str	r3, [r2, #0]
	  commands[1] = commandCreate("2", (CommandAction) playB);
 800160e:	493e      	ldr	r1, [pc, #248]	; (8001708 <main+0x10c>)
 8001610:	483e      	ldr	r0, [pc, #248]	; (800170c <main+0x110>)
 8001612:	f7ff fd5d 	bl	80010d0 <commandCreate>
 8001616:	4603      	mov	r3, r0
 8001618:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <main+0x108>)
 800161a:	6053      	str	r3, [r2, #4]
	  commands[2] = commandCreate("3", (CommandAction) playC);
 800161c:	493c      	ldr	r1, [pc, #240]	; (8001710 <main+0x114>)
 800161e:	483d      	ldr	r0, [pc, #244]	; (8001714 <main+0x118>)
 8001620:	f7ff fd56 	bl	80010d0 <commandCreate>
 8001624:	4603      	mov	r3, r0
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <main+0x108>)
 8001628:	6093      	str	r3, [r2, #8]
	  commands[3] = commandCreate("4", (CommandAction) playD);
 800162a:	493b      	ldr	r1, [pc, #236]	; (8001718 <main+0x11c>)
 800162c:	483b      	ldr	r0, [pc, #236]	; (800171c <main+0x120>)
 800162e:	f7ff fd4f 	bl	80010d0 <commandCreate>
 8001632:	4603      	mov	r3, r0
 8001634:	4a33      	ldr	r2, [pc, #204]	; (8001704 <main+0x108>)
 8001636:	60d3      	str	r3, [r2, #12]
	  commands[4] = commandCreate("5", (CommandAction) playE);
 8001638:	4939      	ldr	r1, [pc, #228]	; (8001720 <main+0x124>)
 800163a:	483a      	ldr	r0, [pc, #232]	; (8001724 <main+0x128>)
 800163c:	f7ff fd48 	bl	80010d0 <commandCreate>
 8001640:	4603      	mov	r3, r0
 8001642:	4a30      	ldr	r2, [pc, #192]	; (8001704 <main+0x108>)
 8001644:	6113      	str	r3, [r2, #16]
	  commands[5] = commandCreate("6", (CommandAction) playF);
 8001646:	4938      	ldr	r1, [pc, #224]	; (8001728 <main+0x12c>)
 8001648:	4838      	ldr	r0, [pc, #224]	; (800172c <main+0x130>)
 800164a:	f7ff fd41 	bl	80010d0 <commandCreate>
 800164e:	4603      	mov	r3, r0
 8001650:	4a2c      	ldr	r2, [pc, #176]	; (8001704 <main+0x108>)
 8001652:	6153      	str	r3, [r2, #20]
	  commands[6] = commandCreate("7", (CommandAction) playG);
 8001654:	4936      	ldr	r1, [pc, #216]	; (8001730 <main+0x134>)
 8001656:	4837      	ldr	r0, [pc, #220]	; (8001734 <main+0x138>)
 8001658:	f7ff fd3a 	bl	80010d0 <commandCreate>
 800165c:	4603      	mov	r3, r0
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <main+0x108>)
 8001660:	6193      	str	r3, [r2, #24]
	  commands[7] = commandCreate("8", (CommandAction) upOctave);//+
 8001662:	4935      	ldr	r1, [pc, #212]	; (8001738 <main+0x13c>)
 8001664:	4835      	ldr	r0, [pc, #212]	; (800173c <main+0x140>)
 8001666:	f7ff fd33 	bl	80010d0 <commandCreate>
 800166a:	4603      	mov	r3, r0
 800166c:	4a25      	ldr	r2, [pc, #148]	; (8001704 <main+0x108>)
 800166e:	61d3      	str	r3, [r2, #28]
	  commands[8] = commandCreate("9", (CommandAction) downOctave);//-
 8001670:	4933      	ldr	r1, [pc, #204]	; (8001740 <main+0x144>)
 8001672:	4834      	ldr	r0, [pc, #208]	; (8001744 <main+0x148>)
 8001674:	f7ff fd2c 	bl	80010d0 <commandCreate>
 8001678:	4603      	mov	r3, r0
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <main+0x108>)
 800167c:	6213      	str	r3, [r2, #32]
	  commands[9] = commandCreate("10", (CommandAction) upDuration);//A
 800167e:	4932      	ldr	r1, [pc, #200]	; (8001748 <main+0x14c>)
 8001680:	4832      	ldr	r0, [pc, #200]	; (800174c <main+0x150>)
 8001682:	f7ff fd25 	bl	80010d0 <commandCreate>
 8001686:	4603      	mov	r3, r0
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <main+0x108>)
 800168a:	6253      	str	r3, [r2, #36]	; 0x24
	  commands[10] = commandCreate("11", (CommandAction) downDuration);//a
 800168c:	4930      	ldr	r1, [pc, #192]	; (8001750 <main+0x154>)
 800168e:	4831      	ldr	r0, [pc, #196]	; (8001754 <main+0x158>)
 8001690:	f7ff fd1e 	bl	80010d0 <commandCreate>
 8001694:	4603      	mov	r3, r0
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <main+0x108>)
 8001698:	6293      	str	r3, [r2, #40]	; 0x28
	  commands[11] = commandCreate("12", (CommandAction) playAll);//enter
 800169a:	492f      	ldr	r1, [pc, #188]	; (8001758 <main+0x15c>)
 800169c:	482f      	ldr	r0, [pc, #188]	; (800175c <main+0x160>)
 800169e:	f7ff fd17 	bl	80010d0 <commandCreate>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <main+0x108>)
 80016a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 ffa4 	bl	80025f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f860 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f7ff fd5a 	bl	8001168 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80016b4:	f000 fc5e 	bl	8001f74 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80016b8:	f000 faa8 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM6_Init();
 80016bc:	f000 fb46 	bl	8001d4c <MX_TIM6_Init>
  MX_I2C1_Init();
 80016c0:	f7ff fdd0 	bl	8001264 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 80016c4:	f000 fcec 	bl	80020a0 <uartInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	4825      	ldr	r0, [pc, #148]	; (8001760 <main+0x164>)
 80016cc:	f003 f950 	bl	8004970 <HAL_TIM_PWM_Start>

  buttonInit(BTN_N_GPIO_Port, BTN_N_Pin);
 80016d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d4:	4823      	ldr	r0, [pc, #140]	; (8001764 <main+0x168>)
 80016d6:	f000 fd23 	bl	8002120 <buttonInit>
  buttonSetOnClick(&kbChangeMode);
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <main+0x16c>)
 80016dc:	f000 fd3c 	bl	8002158 <buttonSetOnClick>

  menuInit(commands, 12);
 80016e0:	210c      	movs	r1, #12
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <main+0x108>)
 80016e4:	f000 f926 	bl	8001934 <menuInit>
  sendMessage("Started\n");
 80016e8:	4820      	ldr	r0, [pc, #128]	; (800176c <main+0x170>)
 80016ea:	f000 f8a1 	bl	8001830 <sendMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uartPolling();
 80016ee:	f000 fceb 	bl	80020c8 <uartPolling>
	  buttonUpdateState();
 80016f2:	f000 fd41 	bl	8002178 <buttonUpdateState>
	  kbUpdateState();
 80016f6:	f000 f8ad 	bl	8001854 <kbUpdateState>
	  uartPolling();
 80016fa:	e7f8      	b.n	80016ee <main+0xf2>
 80016fc:	08002375 	.word	0x08002375
 8001700:	080081b8 	.word	0x080081b8
 8001704:	200001a4 	.word	0x200001a4
 8001708:	08002385 	.word	0x08002385
 800170c:	080081bc 	.word	0x080081bc
 8001710:	08002395 	.word	0x08002395
 8001714:	080081c0 	.word	0x080081c0
 8001718:	080023a5 	.word	0x080023a5
 800171c:	080081c4 	.word	0x080081c4
 8001720:	080023b5 	.word	0x080023b5
 8001724:	080081c8 	.word	0x080081c8
 8001728:	080023c5 	.word	0x080023c5
 800172c:	080081cc 	.word	0x080081cc
 8001730:	080023d5 	.word	0x080023d5
 8001734:	080081d0 	.word	0x080081d0
 8001738:	08002429 	.word	0x08002429
 800173c:	080081d4 	.word	0x080081d4
 8001740:	0800247d 	.word	0x0800247d
 8001744:	080081d8 	.word	0x080081d8
 8001748:	080024d1 	.word	0x080024d1
 800174c:	080081dc 	.word	0x080081dc
 8001750:	08002521 	.word	0x08002521
 8001754:	080081e0 	.word	0x080081e0
 8001758:	080023e5 	.word	0x080023e5
 800175c:	080081e4 	.word	0x080081e4
 8001760:	200001e4 	.word	0x200001e4
 8001764:	40020800 	.word	0x40020800
 8001768:	080015d5 	.word	0x080015d5
 800176c:	080081e8 	.word	0x080081e8

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	; 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2230      	movs	r2, #48	; 0x30
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 f8b0 	bl	80068e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <SystemClock_Config+0xb8>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <SystemClock_Config+0xb8>)
 800179e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <SystemClock_Config+0xb8>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <SystemClock_Config+0xbc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <SystemClock_Config+0xbc>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <SystemClock_Config+0xbc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d8:	2310      	movs	r3, #16
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fb33 	bl	8003e50 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017f0:	f000 f89a 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fd96 	bl	8004340 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800181a:	f000 f885 	bl	8001928 <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3750      	adds	r7, #80	; 0x50
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <sendMessage>:

/* USER CODE BEGIN 4 */
static void sendMessage(const char * msg) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fce3 	bl	8000204 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29b      	uxth	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fc0f 	bl	8002068 <uartTransmit>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <kbUpdateState>:

static void kbUpdateState() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
	uint8_t Row[4] = {ROW1, ROW2, ROW3, ROW4};
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <kbUpdateState+0xd0>)
 800185c:	607b      	str	r3, [r7, #4]
	uint8_t Key;
	for ( int i = 0; i < 4; i++ ) {
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e057      	b.n	8001914 <kbUpdateState+0xc0>
		Key = Check_Row( Row[i] );
 8001864:	1d3a      	adds	r2, r7, #4
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fdb5 	bl	80013dc <Check_Row>
 8001872:	4603      	mov	r3, r0
 8001874:	72fb      	strb	r3, [r7, #11]
		if ( Key == 0x01 ) {
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10a      	bne.n	8001892 <kbUpdateState+0x3e>
			keyPressHandle(3*i+3);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3301      	adds	r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	0052      	lsls	r2, r2, #1
 8001886:	4413      	add	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fe34 	bl	80014f8 <keyPressHandle>
 8001890:	e009      	b.n	80018a6 <kbUpdateState+0x52>
		} else {
			keyReleaseHandle(3*i+3);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	0052      	lsls	r2, r2, #1
 800189c:	4413      	add	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe79 	bl	8001598 <keyReleaseHandle>
		}

		if ( Key == 0x02 ) {
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d10b      	bne.n	80018c4 <kbUpdateState+0x70>
			keyPressHandle(3*i+2);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	0052      	lsls	r2, r2, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3302      	adds	r3, #2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe1b 	bl	80014f8 <keyPressHandle>
 80018c2:	e00a      	b.n	80018da <kbUpdateState+0x86>
		} else {
			keyReleaseHandle(3*i+2);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	0052      	lsls	r2, r2, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3302      	adds	r3, #2
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe5f 	bl	8001598 <keyReleaseHandle>
		}

		if ( Key == 0x04 ) {
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d10b      	bne.n	80018f8 <kbUpdateState+0xa4>
			keyPressHandle(3*i+1);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	0052      	lsls	r2, r2, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe01 	bl	80014f8 <keyPressHandle>
 80018f6:	e00a      	b.n	800190e <kbUpdateState+0xba>
		} else {
			keyReleaseHandle(3*i+1);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	4413      	add	r3, r2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fe45 	bl	8001598 <keyReleaseHandle>
	for ( int i = 0; i < 4; i++ ) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b03      	cmp	r3, #3
 8001918:	dda4      	ble.n	8001864 <kbUpdateState+0x10>
		}
	}
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	f7fbfdfe 	.word	0xf7fbfdfe

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <menuInit>:
#include "command.h"

Command **menuCommands = NULL;
uint16_t menuSize;

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <menuInit+0x60>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d121      	bne.n	800198c <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4618      	mov	r0, r3
 800194e:	f004 ffc1 	bl	80068d4 <malloc>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <menuInit+0x60>)
 8001958:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	e00d      	b.n	800197c <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	441a      	add	r2, r3
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <menuInit+0x60>)
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	3301      	adds	r3, #1
 800197a:	81fb      	strh	r3, [r7, #14]
 800197c:	89fa      	ldrh	r2, [r7, #14]
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3ed      	bcc.n	8001960 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <menuInit+0x64>)
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	8013      	strh	r3, [r2, #0]
 800198a:	e000      	b.n	800198e <menuInit+0x5a>
        return;
 800198c:	bf00      	nop
}
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200001d4 	.word	0x200001d4
 8001998:	200001d8 	.word	0x200001d8

0800199c <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandName) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < menuSize; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	81fb      	strh	r3, [r7, #14]
 80019a8:	e01f      	b.n	80019ea <menuExecuteCommand+0x4e>
        const Command * const command = menuCommands[i];
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <menuExecuteCommand+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60bb      	str	r3, [r7, #8]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <menuExecuteCommand+0x64>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fbbd 	bl	8001144 <commandGetName>
 80019ca:	4603      	mov	r3, r0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc0e 	bl	80001f0 <strcmp>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d104      	bne.n	80019e4 <menuExecuteCommand+0x48>
            return commandExecute(command);
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	f7ff fb9c 	bl	8001118 <commandExecute>
 80019e0:	4603      	mov	r3, r0
 80019e2:	e008      	b.n	80019f6 <menuExecuteCommand+0x5a>
    for (uint16_t i = 0; i < menuSize; i++) {
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	3301      	adds	r3, #1
 80019e8:	81fb      	strh	r3, [r7, #14]
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <menuExecuteCommand+0x68>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	89fa      	ldrh	r2, [r7, #14]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3da      	bcc.n	80019aa <menuExecuteCommand+0xe>
        }
    }
    return "Command not found\n";
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <menuExecuteCommand+0x6c>)
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200001d4 	.word	0x200001d4
 8001a04:	200001d8 	.word	0x200001d8
 8001a08:	080081f4 	.word	0x080081f4

08001a0c <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	4603      	mov	r3, r0
 8001a14:	603a      	str	r2, [r7, #0]
 8001a16:	80fb      	strh	r3, [r7, #6]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	b299      	uxth	r1, r3
 8001a24:	797b      	ldrb	r3, [r7, #5]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	4804      	ldr	r0, [pc, #16]	; (8001a48 <PCA9538_Read_Register+0x3c>)
 8001a38:	f001 fc0e 	bl	8003258 <HAL_I2C_Mem_Read>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000010c 	.word	0x2000010c

08001a4c <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	4603      	mov	r3, r0
 8001a54:	603a      	str	r2, [r7, #0]
 8001a56:	80fb      	strh	r3, [r7, #6]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	b299      	uxth	r1, r3
 8001a64:	797b      	ldrb	r3, [r7, #5]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2301      	movs	r3, #1
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <PCA9538_Write_Register+0x3c>)
 8001a78:	f001 faf4 	bl	8003064 <HAL_I2C_Mem_Write>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000010c 	.word	0x2000010c

08001a8c <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ffb4 	bl	8001a0c <PCA9538_Read_Register>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 fda4 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM6_DAC_IRQHandler+0x10>)
 8001b5a:	f002 ffd1 	bl	8004b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000022c 	.word	0x2000022c

08001b68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART6_IRQHandler+0x10>)
 8001b6e:	f003 ff53 	bl	8005a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000280 	.word	0x20000280

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f004 fe68 	bl	8006880 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20030000 	.word	0x20030000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	200001dc 	.word	0x200001dc
 8001be4:	20000370 	.word	0x20000370

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2220      	movs	r2, #32
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fe4d 	bl	80068e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	; (8001d48 <MX_TIM1_Init+0x13c>)
 8001c4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c50:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c5e:	220a      	movs	r2, #10
 8001c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c74:	4833      	ldr	r0, [pc, #204]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c76:	f002 fd43 	bl	8004700 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c80:	f7ff fe52 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c8e:	4619      	mov	r1, r3
 8001c90:	482c      	ldr	r0, [pc, #176]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c92:	f003 f8ff 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c9c:	f7ff fe44 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca0:	4828      	ldr	r0, [pc, #160]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001ca2:	f002 fe0c 	bl	80048be <HAL_TIM_PWM_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001cac:	f7ff fe3c 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4821      	ldr	r0, [pc, #132]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001cc0:	f003 fce8 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001cca:	f7ff fe2d 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cce:	2360      	movs	r3, #96	; 0x60
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4814      	ldr	r0, [pc, #80]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001cf4:	f003 f80c 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001cfe:	f7ff fe13 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001d26:	f003 fd31 	bl	800578c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d30:	f7ff fdfa 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001d36:	f000 f87d 	bl	8001e34 <HAL_TIM_MspPostInit>

}
 8001d3a:	bf00      	nop
 8001d3c:	3758      	adds	r7, #88	; 0x58
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001e4 	.word	0x200001e4
 8001d48:	40010000 	.word	0x40010000

08001d4c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d5c:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <MX_TIM6_Init+0x68>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d62:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001d66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d7e:	f002 fcbf 	bl	8004700 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d88:	f7ff fdce 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM6_Init+0x64>)
 8001d9a:	f003 fc7b 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001da4:	f7ff fdc0 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000022c 	.word	0x2000022c
 8001db4:	40001000 	.word	0x40001000

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_TIM_Base_MspInit+0x70>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_TIM_Base_MspInit+0x74>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_TIM_Base_MspInit+0x74>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_TIM_Base_MspInit+0x74>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001de6:	e01a      	b.n	8001e1e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_TIM_Base_MspInit+0x78>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d115      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_TIM_Base_MspInit+0x74>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_TIM_Base_MspInit+0x74>)
 8001dfc:	f043 0310 	orr.w	r3, r3, #16
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_TIM_Base_MspInit+0x74>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2036      	movs	r0, #54	; 0x36
 8001e14:	f000 fd3b 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e18:	2036      	movs	r0, #54	; 0x36
 8001e1a:	f000 fd54 	bl	80028c6 <HAL_NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40001000 	.word	0x40001000

08001e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_TIM_MspPostInit+0x68>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d11e      	bne.n	8001e94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	f043 0310 	orr.w	r3, r3, #16
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_TIM_MspPostInit+0x70>)
 8001e90:	f000 fdc6 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <TIM6_START>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef TIM6_START() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM6_START+0x10>)
 8001eae:	f002 fc77 	bl	80047a0 <HAL_TIM_Base_Start>
 8001eb2:	4603      	mov	r3, r0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000022c 	.word	0x2000022c

08001ebc <TIM6_STOP>:

HAL_StatusTypeDef TIM6_STOP() {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Stop(&htim6);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM6_STOP+0x10>)
 8001ec2:	f002 fcd5 	bl	8004870 <HAL_TIM_Base_Stop>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000022c 	.word	0x2000022c

08001ed0 <setPlayAllFlag>:

void setPlayAllFlag() {
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	playAllFlag = 1;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <setPlayAllFlag+0x14>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
};
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	200001e0 	.word	0x200001e0

08001ee8 <resetPlayAllFlag>:

void resetPlayAllFlag() {
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
	playAllFlag = 0;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <resetPlayAllFlag+0x14>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
};
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	200001e0 	.word	0x200001e0

08001f00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	static uint8_t note = 0;
	if( htim->Instance == TIM6 ) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d123      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x5a>
		if (!playAllFlag) {
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x26>
			TIM6_STOP();
 8001f1a:	f7ff ffcf 	bl	8001ebc <TIM6_STOP>
			TIM1->CCR1 = 0;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
				setPlay(note);
			}
		}

	}
}
 8001f24:	e019      	b.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x5a>
			note++;
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f30:	701a      	strb	r2, [r3, #0]
			if (note >= 6) {
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d90a      	bls.n	8001f50 <HAL_TIM_PeriodElapsedCallback+0x50>
				note = 0;
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
				TIM6_STOP();
 8001f40:	f7ff ffbc 	bl	8001ebc <TIM6_STOP>
				TIM1->CCR1 = 0;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
				resetPlayAllFlag();
 8001f4a:	f7ff ffcd 	bl	8001ee8 <resetPlayAllFlag>
}
 8001f4e:	e004      	b.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x5a>
				setPlay(note);
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f9c3 	bl	80022e0 <setPlay>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40001000 	.word	0x40001000
 8001f68:	200001e0 	.word	0x200001e0
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	20000274 	.word	0x20000274

08001f74 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <MX_USART6_UART_Init+0x50>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_USART6_UART_Init+0x4c>)
 8001fac:	f003 fc54 	bl	8005858 <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fb6:	f7ff fcb7 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000280 	.word	0x20000280
 8001fc4:	40011400 	.word	0x40011400

08001fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_UART_MspInit+0x94>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d133      	bne.n	8002052 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_UART_MspInit+0x98>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_UART_MspInit+0x98>)
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_UART_MspInit+0x98>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_UART_MspInit+0x98>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_UART_MspInit+0x98>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_UART_MspInit+0x98>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002022:	23c0      	movs	r3, #192	; 0xc0
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002032:	2308      	movs	r3, #8
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <HAL_UART_MspInit+0x9c>)
 800203e:	f000 fcef 	bl	8002a20 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2047      	movs	r0, #71	; 0x47
 8002048:	f000 fc21 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800204c:	2047      	movs	r0, #71	; 0x47
 800204e:	f000 fc3a 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40011400 	.word	0x40011400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020800 	.word	0x40020800

08002068 <uartTransmit>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <uartTransmit+0x16>
        return 0;
 800207a:	2300      	movs	r3, #0
 800207c:	e009      	b.n	8002092 <uartTransmit+0x2a>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <uartTransmit+0x34>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe ff76 	bl	8000f78 <bufferPushValues>
 800208c:	4603      	mov	r3, r0
 800208e:	81fb      	strh	r3, [r7, #14]
    return transmitted;
 8002090:	89fb      	ldrh	r3, [r7, #14]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000278 	.word	0x20000278

080020a0 <uartInit>:

uint8_t uartHasNext() {
    return bufferHasValues(rxBuffer);
}

void uartInit() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 80020a4:	2080      	movs	r0, #128	; 0x80
 80020a6:	f7fe ff19 	bl	8000edc <bufferCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <uartInit+0x20>)
 80020ae:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 80020b0:	2080      	movs	r0, #128	; 0x80
 80020b2:	f7fe ff13 	bl	8000edc <bufferCreate>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a02      	ldr	r2, [pc, #8]	; (80020c4 <uartInit+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000278 	.word	0x20000278
 80020c4:	2000027c 	.word	0x2000027c

080020c8 <uartPolling>:

void uartPolling() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    hardwareTransmit();
 80020cc:	f000 f802 	bl	80020d4 <hardwareTransmit>
    //hardwareReceive();
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <hardwareTransmit>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareTransmit() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
    if (bufferHasValues(txBuffer)) {
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <hardwareTransmit+0x48>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe ffbf 	bl	8001062 <bufferHasValues>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d013      	beq.n	8002112 <hardwareTransmit+0x3e>
        const uint8_t byte = bufferPeek(txBuffer);
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <hardwareTransmit+0x48>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff92 	bl	8001018 <bufferPeek>
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareTransmitPolling(byte, 1))
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa35 	bl	800256c <uartHardwareTransmitPolling>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <hardwareTransmit+0x3e>
            bufferPop(txBuffer);
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <hardwareTransmit+0x48>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe ff56 	bl	8000fbe <bufferPop>
    }
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000278 	.word	0x20000278

08002120 <buttonInit>:
static uint16_t pin;
static buttonActionListener onClickHandler = NULL;

static uint8_t buttonIsPressed();

void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
	port = GPIOx;
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <buttonInit+0x2c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
    pin = GPIO_Pin;
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <buttonInit+0x30>)
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	8013      	strh	r3, [r2, #0]
    onClickHandler = NULL;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <buttonInit+0x34>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200002c4 	.word	0x200002c4
 8002150:	200002c8 	.word	0x200002c8
 8002154:	200002cc 	.word	0x200002cc

08002158 <buttonSetOnClick>:

void buttonSetOnClick(buttonActionListener actionListener) {
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    onClickHandler = actionListener;
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <buttonSetOnClick+0x1c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	200002cc 	.word	0x200002cc

08002178 <buttonUpdateState>:

static volatile uint32_t clickStart = 0;
void buttonUpdateState() {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
    uint32_t time = HAL_GetTick();
 800217e:	f000 fa9f 	bl	80026c0 <HAL_GetTick>
 8002182:	6078      	str	r0, [r7, #4]
    uint8_t isPressed = buttonIsPressed();
 8002184:	f000 f82e 	bl	80021e4 <buttonIsPressed>
 8002188:	4603      	mov	r3, r0
 800218a:	70fb      	strb	r3, [r7, #3]

    if (!isPressed && clickStart > 0 && (time - clickStart) >= SHORT_CLICK) {
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d114      	bne.n	80021bc <buttonUpdateState+0x44>
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <buttonUpdateState+0x64>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <buttonUpdateState+0x44>
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <buttonUpdateState+0x64>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b31      	cmp	r3, #49	; 0x31
 80021a4:	d90a      	bls.n	80021bc <buttonUpdateState+0x44>
        clickStart = 0;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <buttonUpdateState+0x64>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
        if (onClickHandler != NULL)
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <buttonUpdateState+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00e      	beq.n	80021d2 <buttonUpdateState+0x5a>
            (*onClickHandler)();
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <buttonUpdateState+0x68>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4798      	blx	r3
        if (onClickHandler != NULL)
 80021ba:	e00a      	b.n	80021d2 <buttonUpdateState+0x5a>
    } else if (isPressed && clickStart == 0) {
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <buttonUpdateState+0x5a>
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <buttonUpdateState+0x64>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <buttonUpdateState+0x5a>
        clickStart = time;
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <buttonUpdateState+0x64>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6013      	str	r3, [r2, #0]
    }
}
 80021d0:	e7ff      	b.n	80021d2 <buttonUpdateState+0x5a>
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200002d0 	.word	0x200002d0
 80021e0:	200002cc 	.word	0x200002cc

080021e4 <buttonIsPressed>:

static uint8_t buttonIsPressed() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <buttonIsPressed+0x24>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <buttonIsPressed+0x28>)
 80021ee:	8812      	ldrh	r2, [r2, #0]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fdc0 	bl	8002d78 <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200002c4 	.word	0x200002c4
 800220c:	200002c8 	.word	0x200002c8

08002210 <getNoteFrequency>:
double notes[7] = {16.352, 18.354, 20.602, 21.827, 24.5, 27.5, 30.868};
char* noteNames[7] = {"A", "B", "C", "D", "E", "F", "G"};

int duration = 1000;

double getNoteFrequency(uint8_t noteNumber) {
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
	return rint(notes[noteNumber] * pow(2, octave));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <getNoteFrequency+0x70>)
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <getNoteFrequency+0x74>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f98a 	bl	8000544 <__aeabi_ui2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	ec43 2b11 	vmov	d1, r2, r3
 8002238:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8002278 <getNoteFrequency+0x68>
 800223c:	f005 f85e 	bl	80072fc <pow>
 8002240:	ec53 2b10 	vmov	r2, r3, d0
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fe f9f6 	bl	8000638 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	ec43 2b17 	vmov	d7, r2, r3
 8002254:	eeb0 0a47 	vmov.f32	s0, s14
 8002258:	eef0 0a67 	vmov.f32	s1, s15
 800225c:	f004 ffc0 	bl	80071e0 <rint>
 8002260:	eeb0 7a40 	vmov.f32	s14, s0
 8002264:	eef0 7a60 	vmov.f32	s15, s1
}
 8002268:	eeb0 0a47 	vmov.f32	s0, s14
 800226c:	eef0 0a67 	vmov.f32	s1, s15
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bdb0      	pop	{r4, r5, r7, pc}
 8002276:	bf00      	nop
 8002278:	00000000 	.word	0x00000000
 800227c:	40000000 	.word	0x40000000
 8002280:	20000028 	.word	0x20000028
 8002284:	200002d4 	.word	0x200002d4

08002288 <setVolume>:

void setVolume(uint8_t volume) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	if (0 <= volume && volume <= 10) {
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d802      	bhi.n	800229e <setVolume+0x16>
		TIM1->CCR1 = volume;
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <setVolume+0x24>)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000

080022b0 <setFrequency>:

void setFrequency(uint16_t freq) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
	TIM1->PSC = HAL_RCC_GetPCLK2Freq() / (10 * freq) - 1;
 80022ba:	f002 fa0d 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80022be:	4601      	mov	r1, r0
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ce:	4a03      	ldr	r2, [pc, #12]	; (80022dc <setFrequency+0x2c>)
 80022d0:	3b01      	subs	r3, #1
 80022d2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010000 	.word	0x40010000

080022e0 <setPlay>:

void setPlay(uint8_t noteNumber) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	setFrequency((uint8_t) getNoteFrequency(noteNumber));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff8f 	bl	8002210 <getNoteFrequency>
 80022f2:	ec53 2b10 	vmov	r2, r3, d0
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fc4d 	bl	8000b98 <__aeabi_d2uiz>
 80022fe:	4603      	mov	r3, r0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ffd3 	bl	80022b0 <setFrequency>
	setVolume(10);
 800230a:	200a      	movs	r0, #10
 800230c:	f7ff ffbc 	bl	8002288 <setVolume>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <playNote>:

char buf[128];
char* playNote(uint8_t noteNumber) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af02      	add	r7, sp, #8
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
	setPlay(noteNumber);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ffdb 	bl	80022e0 <setPlay>
	TIM6_START();
 800232a:	f7ff fdbd 	bl	8001ea8 <TIM6_START>
	sprintf(buf, "note %s, %s, duration %dms", noteNames[noteNumber], octaveNames[octave], duration);
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <playNote+0x44>)
 8002332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <playNote+0x48>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <playNote+0x4c>)
 800233e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <playNote+0x50>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	460b      	mov	r3, r1
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <playNote+0x54>)
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <playNote+0x58>)
 800234e:	f004 fbc1 	bl	8006ad4 <siprintf>
	return buf;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <playNote+0x58>)
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000060 	.word	0x20000060
 8002360:	200002d4 	.word	0x200002d4
 8002364:	20000004 	.word	0x20000004
 8002368:	2000007c 	.word	0x2000007c
 800236c:	080082c4 	.word	0x080082c4
 8002370:	200002d8 	.word	0x200002d8

08002374 <playA>:

char* playA() {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	return playNote(0);
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff ffcd 	bl	8002318 <playNote>
 800237e:	4603      	mov	r3, r0
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}

08002384 <playB>:
char* playB() {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	return playNote(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff ffc5 	bl	8002318 <playNote>
 800238e:	4603      	mov	r3, r0
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}

08002394 <playC>:
char* playC() {
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	return playNote(2);
 8002398:	2002      	movs	r0, #2
 800239a:	f7ff ffbd 	bl	8002318 <playNote>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <playD>:
char* playD() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	return playNote(3);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f7ff ffb5 	bl	8002318 <playNote>
 80023ae:	4603      	mov	r3, r0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <playE>:
char* playE() {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	return playNote(4);
 80023b8:	2004      	movs	r0, #4
 80023ba:	f7ff ffad 	bl	8002318 <playNote>
 80023be:	4603      	mov	r3, r0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <playF>:
char* playF() {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	return playNote(5);
 80023c8:	2005      	movs	r0, #5
 80023ca:	f7ff ffa5 	bl	8002318 <playNote>
 80023ce:	4603      	mov	r3, r0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <playG>:
char* playG() {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	return playNote(6);
 80023d8:	2006      	movs	r0, #6
 80023da:	f7ff ff9d 	bl	8002318 <playNote>
 80023de:	4603      	mov	r3, r0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <playAll>:

char* playAll() {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	setPlayAllFlag();
 80023e8:	f7ff fd72 	bl	8001ed0 <setPlayAllFlag>
	setPlay(0);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff ff77 	bl	80022e0 <setPlay>
	TIM6_START();
 80023f2:	f7ff fd59 	bl	8001ea8 <TIM6_START>
	sprintf(buf, "notes A,B,C,D,E,F,G, %s, duration %dms", octaveNames[octave], duration);
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <playAll+0x30>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <playAll+0x34>)
 80023fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <playAll+0x38>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4906      	ldr	r1, [pc, #24]	; (8002420 <playAll+0x3c>)
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <playAll+0x40>)
 800240a:	f004 fb63 	bl	8006ad4 <siprintf>
	return buf;
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <playAll+0x40>)
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200002d4 	.word	0x200002d4
 8002418:	20000004 	.word	0x20000004
 800241c:	2000007c 	.word	0x2000007c
 8002420:	080082e0 	.word	0x080082e0
 8002424:	200002d8 	.word	0x200002d8

08002428 <upOctave>:

char* upOctave() {
 8002428:	b598      	push	{r3, r4, r7, lr}
 800242a:	af00      	add	r7, sp, #0
	if (octave < 8) {
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <upOctave+0x44>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b07      	cmp	r3, #7
 8002432:	d816      	bhi.n	8002462 <upOctave+0x3a>
		octave++;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <upOctave+0x44>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <upOctave+0x44>)
 800243e:	701a      	strb	r2, [r3, #0]
		return strcat(octaveNames[octave], "\n");
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <upOctave+0x44>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <upOctave+0x48>)
 8002448:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800244c:	4620      	mov	r0, r4
 800244e:	f7fd fed9 	bl	8000204 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	4423      	add	r3, r4
 8002456:	4907      	ldr	r1, [pc, #28]	; (8002474 <upOctave+0x4c>)
 8002458:	461a      	mov	r2, r3
 800245a:	460b      	mov	r3, r1
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	8013      	strh	r3, [r2, #0]
 8002460:	e000      	b.n	8002464 <upOctave+0x3c>
	}
	return "Octave is maximum\n";
 8002462:	4c05      	ldr	r4, [pc, #20]	; (8002478 <upOctave+0x50>)
}
 8002464:	4623      	mov	r3, r4
 8002466:	4618      	mov	r0, r3
 8002468:	bd98      	pop	{r3, r4, r7, pc}
 800246a:	bf00      	nop
 800246c:	200002d4 	.word	0x200002d4
 8002470:	20000004 	.word	0x20000004
 8002474:	08008308 	.word	0x08008308
 8002478:	0800830c 	.word	0x0800830c

0800247c <downOctave>:

char* downOctave() {
 800247c:	b598      	push	{r3, r4, r7, lr}
 800247e:	af00      	add	r7, sp, #0
	if (octave > 0) {
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <downOctave+0x44>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d016      	beq.n	80024b6 <downOctave+0x3a>
		octave--;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <downOctave+0x44>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	3b01      	subs	r3, #1
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <downOctave+0x44>)
 8002492:	701a      	strb	r2, [r3, #0]
		return strcat(octaveNames[octave], "\n");
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <downOctave+0x44>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <downOctave+0x48>)
 800249c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7fd feaf 	bl	8000204 <strlen>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4423      	add	r3, r4
 80024aa:	4907      	ldr	r1, [pc, #28]	; (80024c8 <downOctave+0x4c>)
 80024ac:	461a      	mov	r2, r3
 80024ae:	460b      	mov	r3, r1
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	8013      	strh	r3, [r2, #0]
 80024b4:	e000      	b.n	80024b8 <downOctave+0x3c>
	}
	return "Octave is minimum\n";
 80024b6:	4c05      	ldr	r4, [pc, #20]	; (80024cc <downOctave+0x50>)
}
 80024b8:	4623      	mov	r3, r4
 80024ba:	4618      	mov	r0, r3
 80024bc:	bd98      	pop	{r3, r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	200002d4 	.word	0x200002d4
 80024c4:	20000004 	.word	0x20000004
 80024c8:	08008308 	.word	0x08008308
 80024cc:	08008320 	.word	0x08008320

080024d0 <upDuration>:

char* upDuration() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	if (duration < 5000) {
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <upDuration+0x3c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80024dc:	4293      	cmp	r3, r2
 80024de:	dc12      	bgt.n	8002506 <upDuration+0x36>
		TIM6->CNT += 100;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <upDuration+0x40>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <upDuration+0x40>)
 80024e6:	3364      	adds	r3, #100	; 0x64
 80024e8:	6253      	str	r3, [r2, #36]	; 0x24
		duration += 100;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <upDuration+0x3c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3364      	adds	r3, #100	; 0x64
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <upDuration+0x3c>)
 80024f2:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <upDuration+0x3c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4906      	ldr	r1, [pc, #24]	; (8002514 <upDuration+0x44>)
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <upDuration+0x48>)
 80024fe:	f004 fae9 	bl	8006ad4 <siprintf>
		return buf;
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <upDuration+0x48>)
 8002504:	e000      	b.n	8002508 <upDuration+0x38>
	}
	return "Duration is maximum\n";
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <upDuration+0x4c>)
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2000007c 	.word	0x2000007c
 8002510:	40001000 	.word	0x40001000
 8002514:	08008334 	.word	0x08008334
 8002518:	200002d8 	.word	0x200002d8
 800251c:	0800833c 	.word	0x0800833c

08002520 <downDuration>:

char* downDuration() {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	if (duration > 100) {
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <downDuration+0x38>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b64      	cmp	r3, #100	; 0x64
 800252a:	dd12      	ble.n	8002552 <downDuration+0x32>
		TIM6->CNT -= 100;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <downDuration+0x3c>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <downDuration+0x3c>)
 8002532:	3b64      	subs	r3, #100	; 0x64
 8002534:	6253      	str	r3, [r2, #36]	; 0x24
		duration -= 100;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <downDuration+0x38>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3b64      	subs	r3, #100	; 0x64
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <downDuration+0x38>)
 800253e:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <downDuration+0x38>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4906      	ldr	r1, [pc, #24]	; (8002560 <downDuration+0x40>)
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <downDuration+0x44>)
 800254a:	f004 fac3 	bl	8006ad4 <siprintf>
		return buf;
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <downDuration+0x44>)
 8002550:	e000      	b.n	8002554 <downDuration+0x34>
	}
	return "Duration is minimum\n";
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <downDuration+0x48>)
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000007c 	.word	0x2000007c
 800255c:	40001000 	.word	0x40001000
 8002560:	08008334 	.word	0x08008334
 8002564:	200002d8 	.word	0x200002d8
 8002568:	08008354 	.word	0x08008354

0800256c <uartHardwareTransmitPolling>:
#include "usart.h"

uint8_t usartHardwareTransmitBuffer;
uint8_t usartHardwareReceiveBuffer;

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	460a      	mov	r2, r1
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	80bb      	strh	r3, [r7, #4]
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	1df9      	adds	r1, r7, #7
 8002580:	2201      	movs	r2, #1
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <uartHardwareTransmitPolling+0x30>)
 8002584:	f003 f9b5 	bl	80058f2 <HAL_UART_Transmit>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000280 	.word	0x20000280

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025a6:	490e      	ldr	r1, [pc, #56]	; (80025e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025bc:	4c0b      	ldr	r4, [pc, #44]	; (80025ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ca:	f7ff fb0d 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f004 f95d 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7ff f813 	bl	80015fc <main>
  bx  lr    
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80025e4:	08008408 	.word	0x08008408
  ldr r2, =_sbss
 80025e8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80025ec:	2000036c 	.word	0x2000036c

080025f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC_IRQHandler>
	...

080025f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <HAL_Init+0x40>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_Init+0x40>)
 800260a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <HAL_Init+0x40>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261c:	2003      	movs	r0, #3
 800261e:	f000 f92b 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002622:	200f      	movs	r0, #15
 8002624:	f000 f808 	bl	8002638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002628:	f7ff fa42 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_InitTick+0x54>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x58>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f943 	bl	80028e2 <HAL_SYSTICK_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00e      	b.n	8002684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d80a      	bhi.n	8002682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266c:	2200      	movs	r2, #0
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f000 f90b 	bl	800288e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002678:	4a06      	ldr	r2, [pc, #24]	; (8002694 <HAL_InitTick+0x5c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000000 	.word	0x20000000
 8002690:	20000084 	.word	0x20000084
 8002694:	20000080 	.word	0x20000080

08002698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_IncTick+0x20>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_IncTick+0x24>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <HAL_IncTick+0x24>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000084 	.word	0x20000084
 80026bc:	20000358 	.word	0x20000358

080026c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return uwTick;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_GetTick+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000358 	.word	0x20000358

080026d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__NVIC_GetPriorityGrouping+0x18>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 0307 	and.w	r3, r3, #7
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	db0b      	blt.n	8002766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4907      	ldr	r1, [pc, #28]	; (8002774 <__NVIC_EnableIRQ+0x38>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2001      	movs	r0, #1
 800275e:	fa00 f202 	lsl.w	r2, r0, r2
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db0a      	blt.n	80027a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	490c      	ldr	r1, [pc, #48]	; (80027c4 <__NVIC_SetPriority+0x4c>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a0:	e00a      	b.n	80027b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4908      	ldr	r1, [pc, #32]	; (80027c8 <__NVIC_SetPriority+0x50>)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3b04      	subs	r3, #4
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	440b      	add	r3, r1
 80027b6:	761a      	strb	r2, [r3, #24]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf28      	it	cs
 80027ea:	2304      	movcs	r3, #4
 80027ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <NVIC_EncodePriority+0x30>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b03      	subs	r3, #3
 80027fa:	e000      	b.n	80027fe <NVIC_EncodePriority+0x32>
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43d9      	mvns	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	4313      	orrs	r3, r2
         );
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d301      	bcc.n	800284a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <SysTick_Config+0x40>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002852:	210f      	movs	r1, #15
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f7ff ff8e 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SysTick_Config+0x40>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SysTick_Config+0x40>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff29 	bl	80026d8 <__NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff3e 	bl	8002720 <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff8e 	bl	80027cc <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff31 	bl	800273c <__NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffa2 	bl	8002834 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff feda 	bl	80026c0 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d008      	beq.n	800292c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e052      	b.n	80029d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0216 	bic.w	r2, r2, #22
 800293a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_DMA_Abort+0x62>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0208 	bic.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297c:	e013      	b.n	80029a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297e:	f7ff fe9f 	bl	80026c0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b05      	cmp	r3, #5
 800298a:	d90c      	bls.n	80029a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e015      	b.n	80029d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e4      	bne.n	800297e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d004      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e00c      	b.n	8002a12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2205      	movs	r2, #5
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e177      	b.n	8002d2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8166 	bne.w	8002d26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80c0 	beq.w	8002d26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b63      	ldr	r3, [pc, #396]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a61      	ldr	r2, [pc, #388]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_GPIO_Init+0x32c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d037      	beq.n	8002c5e <HAL_GPIO_Init+0x23e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_GPIO_Init+0x330>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_GPIO_Init+0x23a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <HAL_GPIO_Init+0x236>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a55      	ldr	r2, [pc, #340]	; (8002d58 <HAL_GPIO_Init+0x338>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x232>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <HAL_GPIO_Init+0x33c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x22e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a53      	ldr	r2, [pc, #332]	; (8002d60 <HAL_GPIO_Init+0x340>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x22a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_GPIO_Init+0x344>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x226>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a51      	ldr	r2, [pc, #324]	; (8002d68 <HAL_GPIO_Init+0x348>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x222>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <HAL_GPIO_Init+0x34c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x21e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_GPIO_Init+0x350>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x21a>
 8002c36:	2309      	movs	r3, #9
 8002c38:	e012      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c3a:	230a      	movs	r3, #10
 8002c3c:	e010      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	e00e      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c42:	2307      	movs	r3, #7
 8002c44:	e00c      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c46:	2306      	movs	r3, #6
 8002c48:	e00a      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x240>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f002 0203 	and.w	r2, r2, #3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca2:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <HAL_GPIO_Init+0x354>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	f67f ae84 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40021400 	.word	0x40021400
 8002d64:	40021800 	.word	0x40021800
 8002d68:	40021c00 	.word	0x40021c00
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40022400 	.word	0x40022400
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e12b      	b.n	8003046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fa6e 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e40:	f001 fc36 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a81      	ldr	r2, [pc, #516]	; (8003050 <HAL_I2C_Init+0x274>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d807      	bhi.n	8002e60 <HAL_I2C_Init+0x84>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_I2C_Init+0x278>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e006      	b.n	8002e6e <HAL_I2C_Init+0x92>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a7d      	ldr	r2, [pc, #500]	; (8003058 <HAL_I2C_Init+0x27c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0e7      	b.n	8003046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a78      	ldr	r2, [pc, #480]	; (800305c <HAL_I2C_Init+0x280>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	; (8003050 <HAL_I2C_Init+0x274>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_I2C_Init+0xd4>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	e009      	b.n	8002ec4 <HAL_I2C_Init+0xe8>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_I2C_Init+0x284>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	495c      	ldr	r1, [pc, #368]	; (8003050 <HAL_I2C_Init+0x274>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d819      	bhi.n	8002f18 <HAL_I2C_Init+0x13c>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e59      	subs	r1, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef2:	1c59      	adds	r1, r3, #1
 8002ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ef8:	400b      	ands	r3, r1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_I2C_Init+0x138>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e59      	subs	r1, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f12:	e051      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e04f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_I2C_Init+0x168>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Init+0x18e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x196>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_I2C_Init+0x1bc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e58      	subs	r0, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6809      	ldr	r1, [r1, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6911      	ldr	r1, [r2, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	000186a0 	.word	0x000186a0
 8003054:	001e847f 	.word	0x001e847f
 8003058:	003d08ff 	.word	0x003d08ff
 800305c:	431bde83 	.word	0x431bde83
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4603      	mov	r3, r0
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	460b      	mov	r3, r1
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800307e:	f7ff fb1f 	bl	80026c0 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	f040 80d9 	bne.w	8003244 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2319      	movs	r3, #25
 8003098:	2201      	movs	r2, #1
 800309a:	496d      	ldr	r1, [pc, #436]	; (8003250 <HAL_I2C_Mem_Write+0x1ec>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fc7f 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0cc      	b.n	8003246 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Mem_Write+0x56>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0c5      	b.n	8003246 <HAL_I2C_Mem_Write+0x1e2>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d007      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2221      	movs	r2, #33	; 0x21
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <HAL_I2C_Mem_Write+0x1f0>)
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003122:	88f8      	ldrh	r0, [r7, #6]
 8003124:	893a      	ldrh	r2, [r7, #8]
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4603      	mov	r3, r0
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fab6 	bl	80036a4 <I2C_RequestMemoryWrite>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d052      	beq.n	80031e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e081      	b.n	8003246 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fd00 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b04      	cmp	r3, #4
 8003158:	d107      	bne.n	800316a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06b      	b.n	8003246 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d11b      	bne.n	80031e4 <HAL_I2C_Mem_Write+0x180>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d017      	beq.n	80031e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1aa      	bne.n	8003142 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fcec 	bl	8003bce <I2C_WaitOnBTFFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e016      	b.n	8003246 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e000      	b.n	8003246 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
  }
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	00100002 	.word	0x00100002
 8003254:	ffff0000 	.word	0xffff0000

08003258 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	4608      	mov	r0, r1
 8003262:	4611      	mov	r1, r2
 8003264:	461a      	mov	r2, r3
 8003266:	4603      	mov	r3, r0
 8003268:	817b      	strh	r3, [r7, #10]
 800326a:	460b      	mov	r3, r1
 800326c:	813b      	strh	r3, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003272:	f7ff fa25 	bl	80026c0 <HAL_GetTick>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	f040 8208 	bne.w	8003696 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2319      	movs	r3, #25
 800328c:	2201      	movs	r2, #1
 800328e:	497b      	ldr	r1, [pc, #492]	; (800347c <HAL_I2C_Mem_Read+0x224>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fb85 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
 800329e:	e1fb      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Mem_Read+0x56>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e1f4      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d007      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2222      	movs	r2, #34	; 0x22
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2240      	movs	r2, #64	; 0x40
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a5b      	ldr	r2, [pc, #364]	; (8003480 <HAL_I2C_Mem_Read+0x228>)
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003316:	88f8      	ldrh	r0, [r7, #6]
 8003318:	893a      	ldrh	r2, [r7, #8]
 800331a:	8979      	ldrh	r1, [r7, #10]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4603      	mov	r3, r0
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fa52 	bl	80037d0 <I2C_RequestMemoryRead>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e1b0      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d113      	bne.n	8003366 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e184      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	2b01      	cmp	r3, #1
 800336c:	d11b      	bne.n	80033a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e164      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d11b      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	e144      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033fc:	e138      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	2b03      	cmp	r3, #3
 8003404:	f200 80f1 	bhi.w	80035ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	2b01      	cmp	r3, #1
 800340e:	d123      	bne.n	8003458 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fc1b 	bl	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e139      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003456:	e10b      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	2b02      	cmp	r3, #2
 800345e:	d14e      	bne.n	80034fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	2200      	movs	r2, #0
 8003468:	4906      	ldr	r1, [pc, #24]	; (8003484 <HAL_I2C_Mem_Read+0x22c>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa98 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e10e      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
 800347a:	bf00      	nop
 800347c:	00100002 	.word	0x00100002
 8003480:	ffff0000 	.word	0xffff0000
 8003484:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034fc:	e0b8      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	4966      	ldr	r1, [pc, #408]	; (80036a0 <HAL_I2C_Mem_Read+0x448>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fa49 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0bf      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	2200      	movs	r2, #0
 8003562:	494f      	ldr	r1, [pc, #316]	; (80036a0 <HAL_I2C_Mem_Read+0x448>)
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fa1b 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e091      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035e8:	e042      	b.n	8003670 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fb2e 	bl	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e04c      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d118      	bne.n	8003670 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f aec2 	bne.w	80033fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	00010004 	.word	0x00010004

080036a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f960 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f4:	d103      	bne.n	80036fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e05f      	b.n	80037c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	492d      	ldr	r1, [pc, #180]	; (80037cc <I2C_RequestMemoryWrite+0x128>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f998 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e04c      	b.n	80037c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	6a39      	ldr	r1, [r7, #32]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa02 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b04      	cmp	r3, #4
 8003754:	d107      	bne.n	8003766 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e02b      	b.n	80037c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003770:	893b      	ldrh	r3, [r7, #8]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]
 800377a:	e021      	b.n	80037c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	b29b      	uxth	r3, r3
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378c:	6a39      	ldr	r1, [r7, #32]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f9dc 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d107      	bne.n	80037b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e005      	b.n	80037c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b6:	893b      	ldrh	r3, [r7, #8]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	00010002 	.word	0x00010002

080037d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2200      	movs	r2, #0
 8003812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f8c2 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003830:	d103      	bne.n	800383a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0aa      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800384c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	4952      	ldr	r1, [pc, #328]	; (800399c <I2C_RequestMemoryRead+0x1cc>)
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f8fa 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e097      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f964 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b04      	cmp	r3, #4
 8003890:	d107      	bne.n	80038a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e076      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ac:	893b      	ldrh	r3, [r7, #8]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	e021      	b.n	80038fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c8:	6a39      	ldr	r1, [r7, #32]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f93e 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d107      	bne.n	80038ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e050      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038f2:	893b      	ldrh	r3, [r7, #8]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	6a39      	ldr	r1, [r7, #32]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f923 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b04      	cmp	r3, #4
 8003912:	d107      	bne.n	8003924 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e035      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003936:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2200      	movs	r2, #0
 8003940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f82b 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395e:	d103      	bne.n	8003968 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e013      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800396c:	897b      	ldrh	r3, [r7, #10]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	6a3a      	ldr	r2, [r7, #32]
 8003980:	4906      	ldr	r1, [pc, #24]	; (800399c <I2C_RequestMemoryRead+0x1cc>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f863 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010002 	.word	0x00010002

080039a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b0:	e025      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d021      	beq.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fe81 	bl	80026c0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e023      	b.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10d      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	e00c      	b.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0b6      	beq.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5c:	e051      	b.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d123      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e046      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d021      	beq.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe fdff 	bl	80026c0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d116      	bne.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e020      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10c      	bne.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	43da      	mvns	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	e00b      	b.n	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d18d      	bne.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b58:	e02d      	b.n	8003bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f8ce 	bl	8003cfc <I2C_IsAcknowledgeFailed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e02d      	b.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d021      	beq.n	8003bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fda5 	bl	80026c0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e007      	b.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d1ca      	bne.n	8003b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bda:	e02d      	b.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f88d 	bl	8003cfc <I2C_IsAcknowledgeFailed>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e02d      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d021      	beq.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe fd64 	bl	80026c0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e007      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d1ca      	bne.n	8003bdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c5c:	e042      	b.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d119      	bne.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0210 	mvn.w	r2, #16
 8003c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e029      	b.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca0:	f7fe fd0e 	bl	80026c0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d302      	bcc.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e007      	b.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d1b5      	bne.n	8003c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d11b      	bne.n	8003d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0204 	orr.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d129      	bne.n	8003dc4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0210 	bic.w	r2, r2, #16
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d12a      	bne.n	8003e42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	; 0x24
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	f023 030f 	bic.w	r3, r3, #15
 8003e12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	89fa      	ldrh	r2, [r7, #14]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e267      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b82      	ldr	r3, [pc, #520]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e242      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b70      	ldr	r3, [pc, #448]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6f      	ldr	r2, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fbda 	bl	80026c0 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fe fbd6 	bl	80026c0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e207      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fe fbc6 	bl	80026c0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fe fbc2 	bl	80026c0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1f3      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b51      	ldr	r3, [pc, #324]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1c7      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCC_OscConfig+0x244>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fb7b 	bl	80026c0 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fe fb77 	bl	80026c0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1a8      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x244>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fb5a 	bl	80026c0 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004010:	f7fe fb56 	bl	80026c0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e187      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0x248>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe fb3a 	bl	80026c0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7fe fb36 	bl	80026c0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e167      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x248>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fe fb23 	bl	80026c0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7fe fb1f 	bl	80026c0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e150      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a7c      	ldr	r2, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
 80040d6:	4b7a      	ldr	r3, [pc, #488]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b74      	ldr	r3, [pc, #464]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fadf 	bl	80026c0 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fe fadb 	bl	80026c0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x2ea>
 800412c:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x30c>
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	; 0x70
 800414e:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a5b      	ldr	r2, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800415c:	4b58      	ldr	r3, [pc, #352]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a57      	ldr	r2, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a54      	ldr	r2, [pc, #336]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe faa0 	bl	80026c0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fe fa9c 	bl	80026c0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0cb      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b49      	ldr	r3, [pc, #292]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x334>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fe fa8a 	bl	80026c0 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fe fa86 	bl	80026c0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b5      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a1 	beq.w	8004330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d05c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d141      	bne.n	8004286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fe fa5a 	bl	80026c0 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe fa56 	bl	80026c0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	491b      	ldr	r1, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fe fa2f 	bl	80026c0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004266:	f7fe fa2b 	bl	80026c0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e05c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x416>
 8004284:	e054      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fe fa18 	bl	80026c0 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fe fa14 	bl	80026c0 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e045      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x444>
 80042b2:	e03d      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e038      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cc      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e067      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4934      	ldr	r1, [pc, #208]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fe f946 	bl	80026c0 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe f942 	bl	80026c0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe f8a6 	bl	8002638 <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	0800836c 	.word	0x0800836c
 8004504:	20000000 	.word	0x20000000
 8004508:	20000080 	.word	0x20000080

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b090      	sub	sp, #64	; 0x40
 8004512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	2300      	movs	r3, #0
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	2300      	movs	r3, #0
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004530:	2b08      	cmp	r3, #8
 8004532:	f200 80a1 	bhi.w	8004678 <HAL_RCC_GetSysClockFreq+0x16c>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x3a>
 800453e:	e09b      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b53      	ldr	r3, [pc, #332]	; (8004690 <HAL_RCC_GetSysClockFreq+0x184>)
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004544:	e09b      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_GetSysClockFreq+0x188>)
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800454a:	e098      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b4f      	ldr	r3, [pc, #316]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b4d      	ldr	r3, [pc, #308]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d028      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	627a      	str	r2, [r7, #36]	; 0x24
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004574:	2100      	movs	r1, #0
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_RCC_GetSysClockFreq+0x188>)
 8004578:	fb03 f201 	mul.w	r2, r3, r1
 800457c:	2300      	movs	r3, #0
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	4413      	add	r3, r2
 8004584:	4a43      	ldr	r2, [pc, #268]	; (8004694 <HAL_RCC_GetSysClockFreq+0x188>)
 8004586:	fba0 1202 	umull	r1, r2, r0, r2
 800458a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458c:	460a      	mov	r2, r1
 800458e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004592:	4413      	add	r3, r2
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	2200      	movs	r2, #0
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045a6:	f7fc fb17 	bl	8000bd8 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4613      	mov	r3, r2
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b2:	e053      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b4:	4b35      	ldr	r3, [pc, #212]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	2200      	movs	r2, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	617a      	str	r2, [r7, #20]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045c6:	f04f 0b00 	mov.w	fp, #0
 80045ca:	4652      	mov	r2, sl
 80045cc:	465b      	mov	r3, fp
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	0159      	lsls	r1, r3, #5
 80045d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045dc:	0150      	lsls	r0, r2, #5
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	ebb2 080a 	subs.w	r8, r2, sl
 80045e6:	eb63 090b 	sbc.w	r9, r3, fp
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004602:	eb63 0509 	sbc.w	r5, r3, r9
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	00eb      	lsls	r3, r5, #3
 8004610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004614:	00e2      	lsls	r2, r4, #3
 8004616:	4614      	mov	r4, r2
 8004618:	461d      	mov	r5, r3
 800461a:	eb14 030a 	adds.w	r3, r4, sl
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	eb45 030b 	adc.w	r3, r5, fp
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004632:	4629      	mov	r1, r5
 8004634:	028b      	lsls	r3, r1, #10
 8004636:	4621      	mov	r1, r4
 8004638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800463c:	4621      	mov	r1, r4
 800463e:	028a      	lsls	r2, r1, #10
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	2200      	movs	r2, #0
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	60fa      	str	r2, [r7, #12]
 800464c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004650:	f7fc fac2 	bl	8000bd8 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_GetSysClockFreq+0x180>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800466c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetSysClockFreq+0x184>)
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004680:	4618      	mov	r0, r3
 8004682:	3740      	adds	r7, #64	; 0x40
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	00f42400 	.word	0x00f42400
 8004694:	017d7840 	.word	0x017d7840

08004698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCC_GetHCLKFreq+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000000 	.word	0x20000000

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff0 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	0800837c 	.word	0x0800837c

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffdc 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	0800837c 	.word	0x0800837c

08004700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e041      	b.n	8004796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd fb46 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f000 fc98 	bl	8005074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e046      	b.n	8004846 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a23      	ldr	r2, [pc, #140]	; (8004854 <HAL_TIM_Base_Start+0xb4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <HAL_TIM_Base_Start+0xb8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	; (800485c <HAL_TIM_Base_Start+0xbc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <HAL_TIM_Base_Start+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <HAL_TIM_Base_Start+0xc4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_TIM_Base_Start+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a18      	ldr	r2, [pc, #96]	; (800486c <HAL_TIM_Base_Start+0xcc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d010      	beq.n	8004844 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e007      	b.n	8004844 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40010400 	.word	0x40010400
 8004868:	40014000 	.word	0x40014000
 800486c:	40001800 	.word	0x40001800

08004870 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6a1a      	ldr	r2, [r3, #32]
 800487e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10f      	bne.n	80048a8 <HAL_TIM_Base_Stop+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	f240 4344 	movw	r3, #1092	; 0x444
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_Base_Stop+0x38>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e041      	b.n	8004954 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f839 	bl	800495c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fbb9 	bl	8005074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_TIM_PWM_Start+0x24>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e022      	b.n	80049da <HAL_TIM_PWM_Start+0x6a>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d109      	bne.n	80049ae <HAL_TIM_PWM_Start+0x3e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e015      	b.n	80049da <HAL_TIM_PWM_Start+0x6a>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d109      	bne.n	80049c8 <HAL_TIM_PWM_Start+0x58>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e008      	b.n	80049da <HAL_TIM_PWM_Start+0x6a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07c      	b.n	8004adc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x82>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f0:	e013      	b.n	8004a1a <HAL_TIM_PWM_Start+0xaa>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d104      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x92>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a00:	e00b      	b.n	8004a1a <HAL_TIM_PWM_Start+0xaa>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0xa2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a10:	e003      	b.n	8004a1a <HAL_TIM_PWM_Start+0xaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fe10 	bl	8005648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ae4 <HAL_TIM_PWM_Start+0x174>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_TIM_PWM_Start+0xcc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2c      	ldr	r2, [pc, #176]	; (8004ae8 <HAL_TIM_PWM_Start+0x178>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_PWM_Start+0xd0>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_TIM_PWM_Start+0xd2>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <HAL_TIM_PWM_Start+0x174>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d01d      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_TIM_PWM_Start+0x17c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <HAL_TIM_PWM_Start+0x180>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIM_PWM_Start+0x184>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_TIM_PWM_Start+0x178>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIM_PWM_Start+0x188>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0x136>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_TIM_PWM_Start+0x18c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d111      	bne.n	8004aca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d010      	beq.n	8004ada <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac8:	e007      	b.n	8004ada <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40010400 	.word	0x40010400
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40001800 	.word	0x40001800

08004b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0202 	mvn.w	r2, #2
 8004b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa77 	bl	8005036 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa69 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa7a 	bl	800504a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d122      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0204 	mvn.w	r2, #4
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa4d 	bl	8005036 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa3f 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fa50 	bl	800504a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0208 	mvn.w	r2, #8
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa23 	bl	8005036 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fa15 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa26 	bl	800504a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0210 	mvn.w	r2, #16
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9f9 	bl	8005036 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9eb 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9fc 	bl	800504a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0201 	mvn.w	r2, #1
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd f93e 	bl	8001f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fdca 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9c1 	bl	800505e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0220 	mvn.w	r2, #32
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fd94 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e0ae      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	f200 809f 	bhi.w	8004e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004e7d 	.word	0x08004e7d
 8004d4c:	08004e7d 	.word	0x08004e7d
 8004d50:	08004e7d 	.word	0x08004e7d
 8004d54:	08004db9 	.word	0x08004db9
 8004d58:	08004e7d 	.word	0x08004e7d
 8004d5c:	08004e7d 	.word	0x08004e7d
 8004d60:	08004e7d 	.word	0x08004e7d
 8004d64:	08004dfb 	.word	0x08004dfb
 8004d68:	08004e7d 	.word	0x08004e7d
 8004d6c:	08004e7d 	.word	0x08004e7d
 8004d70:	08004e7d 	.word	0x08004e7d
 8004d74:	08004e3b 	.word	0x08004e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa18 	bl	80051b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0208 	orr.w	r2, r2, #8
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0204 	bic.w	r2, r2, #4
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	619a      	str	r2, [r3, #24]
      break;
 8004db6:	e064      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fa68 	bl	8005294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	619a      	str	r2, [r3, #24]
      break;
 8004df8:	e043      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fabd 	bl	8005380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0208 	orr.w	r2, r2, #8
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0204 	bic.w	r2, r2, #4
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
      break;
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fb11 	bl	8005468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
      break;
 8004e7a:	e002      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e0b4      	b.n	800501a <HAL_TIM_ConfigClockSource+0x186>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee8:	d03e      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0xd4>
 8004eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eee:	f200 8087 	bhi.w	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	f000 8086 	beq.w	8005006 <HAL_TIM_ConfigClockSource+0x172>
 8004efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efe:	d87f      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b70      	cmp	r3, #112	; 0x70
 8004f02:	d01a      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0xa6>
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d87b      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d050      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x11a>
 8004f0c:	2b60      	cmp	r3, #96	; 0x60
 8004f0e:	d877      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b50      	cmp	r3, #80	; 0x50
 8004f12:	d03c      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0xfa>
 8004f14:	2b50      	cmp	r3, #80	; 0x50
 8004f16:	d873      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d058      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x13a>
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d86f      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b30      	cmp	r3, #48	; 0x30
 8004f22:	d064      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b30      	cmp	r3, #48	; 0x30
 8004f26:	d86b      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d060      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d867      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d05c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d05a      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f38:	e062      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6899      	ldr	r1, [r3, #8]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f000 fb5d 	bl	8005608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	609a      	str	r2, [r3, #8]
      break;
 8004f66:	e04f      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f000 fb46 	bl	8005608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f8a:	609a      	str	r2, [r3, #8]
      break;
 8004f8c:	e03c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6859      	ldr	r1, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f000 faba 	bl	8005514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2150      	movs	r1, #80	; 0x50
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb13 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004fac:	e02c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 fad9 	bl	8005572 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2160      	movs	r1, #96	; 0x60
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fb03 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e01c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fa9a 	bl	8005514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2140      	movs	r1, #64	; 0x40
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 faf3 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e00c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f000 faea 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004ffe:	e003      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e000      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a40      	ldr	r2, [pc, #256]	; (8005188 <TIM_Base_SetConfig+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d013      	beq.n	80050b4 <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005092:	d00f      	beq.n	80050b4 <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a3d      	ldr	r2, [pc, #244]	; (800518c <TIM_Base_SetConfig+0x118>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00b      	beq.n	80050b4 <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3c      	ldr	r2, [pc, #240]	; (8005190 <TIM_Base_SetConfig+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3b      	ldr	r2, [pc, #236]	; (8005194 <TIM_Base_SetConfig+0x120>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3a      	ldr	r2, [pc, #232]	; (8005198 <TIM_Base_SetConfig+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d108      	bne.n	80050c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <TIM_Base_SetConfig+0x114>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d02b      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d027      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2c      	ldr	r2, [pc, #176]	; (800518c <TIM_Base_SetConfig+0x118>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d023      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2b      	ldr	r2, [pc, #172]	; (8005190 <TIM_Base_SetConfig+0x11c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01f      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2a      	ldr	r2, [pc, #168]	; (8005194 <TIM_Base_SetConfig+0x120>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01b      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a29      	ldr	r2, [pc, #164]	; (8005198 <TIM_Base_SetConfig+0x124>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d017      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a28      	ldr	r2, [pc, #160]	; (800519c <TIM_Base_SetConfig+0x128>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a27      	ldr	r2, [pc, #156]	; (80051a0 <TIM_Base_SetConfig+0x12c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00f      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <TIM_Base_SetConfig+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a25      	ldr	r2, [pc, #148]	; (80051a8 <TIM_Base_SetConfig+0x134>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a24      	ldr	r2, [pc, #144]	; (80051ac <TIM_Base_SetConfig+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a23      	ldr	r2, [pc, #140]	; (80051b0 <TIM_Base_SetConfig+0x13c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <TIM_Base_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0xf8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <TIM_Base_SetConfig+0x124>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800
 80051a8:	40001800 	.word	0x40001800
 80051ac:	40001c00 	.word	0x40001c00
 80051b0:	40002000 	.word	0x40002000

080051b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0302 	bic.w	r3, r3, #2
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a20      	ldr	r2, [pc, #128]	; (800528c <TIM_OC1_SetConfig+0xd8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC1_SetConfig+0x64>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <TIM_OC1_SetConfig+0xdc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10c      	bne.n	8005232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0308 	bic.w	r3, r3, #8
 800521e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a15      	ldr	r2, [pc, #84]	; (800528c <TIM_OC1_SetConfig+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC1_SetConfig+0x8e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <TIM_OC1_SetConfig+0xdc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d111      	bne.n	8005266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0210 	bic.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a22      	ldr	r2, [pc, #136]	; (8005378 <TIM_OC2_SetConfig+0xe4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC2_SetConfig+0x68>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a21      	ldr	r2, [pc, #132]	; (800537c <TIM_OC2_SetConfig+0xe8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10d      	bne.n	8005318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <TIM_OC2_SetConfig+0xe4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC2_SetConfig+0x94>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <TIM_OC2_SetConfig+0xe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a21      	ldr	r2, [pc, #132]	; (8005460 <TIM_OC3_SetConfig+0xe0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC3_SetConfig+0x66>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <TIM_OC3_SetConfig+0xe4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a16      	ldr	r2, [pc, #88]	; (8005460 <TIM_OC3_SetConfig+0xe0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC3_SetConfig+0x92>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <TIM_OC3_SetConfig+0xe4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d113      	bne.n	800543a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <TIM_OC4_SetConfig+0xa4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC4_SetConfig+0x68>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a11      	ldr	r2, [pc, #68]	; (8005510 <TIM_OC4_SetConfig+0xa8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400

08005514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 030a 	bic.w	r3, r3, #10
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0210 	bic.w	r2, r3, #16
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800559c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f043 0307 	orr.w	r3, r3, #7
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2201      	movs	r2, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e05a      	b.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a21      	ldr	r2, [pc, #132]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d022      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d01d      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a17      	ldr	r2, [pc, #92]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10c      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40010400 	.word	0x40010400
 8005784:	40014000 	.word	0x40014000
 8005788:	40001800 	.word	0x40001800

0800578c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e03d      	b.n	8005824 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03f      	b.n	80058ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc fba2 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fd7b 	bl	8006398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08a      	sub	sp, #40	; 0x28
 80058f6:	af02      	add	r7, sp, #8
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d17c      	bne.n	8005a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_UART_Transmit+0x2c>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e075      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_UART_Transmit+0x3e>
 800592c:	2302      	movs	r3, #2
 800592e:	e06e      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fc febb 	bl	80026c0 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005960:	d108      	bne.n	8005974 <HAL_UART_Transmit+0x82>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e003      	b.n	800597c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005984:	e02a      	b.n	80059dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 faf9 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e036      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3302      	adds	r3, #2
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e007      	b.n	80059ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1cf      	bne.n	8005986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2140      	movs	r1, #64	; 0x40
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fac9 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e006      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b0ba      	sub	sp, #232	; 0xe8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_UART_IRQHandler+0x66>
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fbd3 	bl	8006222 <UART_Receive_IT>
      return;
 8005a7c:	e256      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80de 	beq.w	8005c44 <HAL_UART_IRQHandler+0x22c>
 8005a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80d1 	beq.w	8005c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xae>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <HAL_UART_IRQHandler+0xd2>
 8005ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f043 0202 	orr.w	r2, r3, #2
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_UART_IRQHandler+0xf6>
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_UART_IRQHandler+0x126>
 8005b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0208 	orr.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 81ed 	beq.w	8005f22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_UART_IRQHandler+0x14e>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb5e 	bl	8006222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_UART_IRQHandler+0x17a>
 8005b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04f      	beq.n	8005c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa66 	bl	8006064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d141      	bne.n	8005c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1d9      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d013      	beq.n	8005c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	4a7d      	ldr	r2, [pc, #500]	; (8005df4 <HAL_UART_IRQHandler+0x3dc>)
 8005c00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fc fee7 	bl	80029da <HAL_DMA_Abort_IT>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e00e      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f99a 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	e00a      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f996 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e006      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f992 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c3e:	e170      	b.n	8005f22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	bf00      	nop
    return;
 8005c42:	e16e      	b.n	8005f22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f040 814a 	bne.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8143 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 813c 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	f040 80b4 	bne.w	8005df8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8140 	beq.w	8005f26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f080 8139 	bcs.w	8005f26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc6:	f000 8088 	beq.w	8005dda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1d9      	bne.n	8005cca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e1      	bne.n	8005d16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e3      	bne.n	8005d98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fc fd90 	bl	80028fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8c0 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005df0:	e099      	b.n	8005f26 <HAL_UART_IRQHandler+0x50e>
 8005df2:	bf00      	nop
 8005df4:	0800612b 	.word	0x0800612b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 808b 	beq.w	8005f2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8086 	beq.w	8005f2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e42:	647a      	str	r2, [r7, #68]	; 0x44
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e3      	bne.n	8005e1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	623b      	str	r3, [r7, #32]
   return(result);
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e3      	bne.n	8005e56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0310 	bic.w	r3, r3, #16
 8005eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ec0:	61fa      	str	r2, [r7, #28]
 8005ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e3      	bne.n	8005e9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f848 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ee0:	e023      	b.n	8005f2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_UART_IRQHandler+0x4ea>
 8005eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f929 	bl	8006152 <UART_Transmit_IT>
    return;
 8005f00:	e014      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <HAL_UART_IRQHandler+0x514>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f969 	bl	80061f2 <UART_EndTransmit_IT>
    return;
 8005f20:	e004      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
    return;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
      return;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
      return;
 8005f2a:	bf00      	nop
  }
}
 8005f2c:	37e8      	adds	r7, #232	; 0xe8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop

08005f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b090      	sub	sp, #64	; 0x40
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	e050      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d04c      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa8:	f7fc fb8a 	bl	80026c0 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d241      	bcs.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600c:	623a      	str	r2, [r7, #32]
 800600e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	61bb      	str	r3, [r7, #24]
   return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d09f      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3740      	adds	r7, #64	; 0x40
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b095      	sub	sp, #84	; 0x54
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608c:	643a      	str	r2, [r7, #64]	; 0x40
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3314      	adds	r3, #20
 80060a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3314      	adds	r3, #20
 80060be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d119      	bne.n	8006110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060fc:	61ba      	str	r2, [r7, #24]
 80060fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800611e:	bf00      	nop
 8006120:	3754      	adds	r7, #84	; 0x54
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff09 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b21      	cmp	r3, #33	; 0x21
 8006164:	d13e      	bne.n	80061e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d114      	bne.n	800619a <UART_Transmit_IT+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	621a      	str	r2, [r3, #32]
 8006198:	e008      	b.n	80061ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6211      	str	r1, [r2, #32]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4619      	mov	r1, r3
 80061ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe8e 	bl	8005f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08c      	sub	sp, #48	; 0x30
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b22      	cmp	r3, #34	; 0x22
 8006234:	f040 80ab 	bne.w	800638e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d117      	bne.n	8006272 <UART_Receive_IT+0x50>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d113      	bne.n	8006272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	b29a      	uxth	r2, r3
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28
 8006270:	e026      	b.n	80062c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d007      	beq.n	8006296 <UART_Receive_IT+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <UART_Receive_IT+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e008      	b.n	80062b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d15a      	bne.n	800638a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0220 	bic.w	r2, r2, #32
 80062e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	2b01      	cmp	r3, #1
 8006312:	d135      	bne.n	8006380 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	613b      	str	r3, [r7, #16]
   return(result);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f023 0310 	bic.w	r3, r3, #16
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	623a      	str	r2, [r7, #32]
 800633c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69f9      	ldr	r1, [r7, #28]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	61bb      	str	r3, [r7, #24]
   return(result);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d10a      	bne.n	8006372 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff fdf9 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
 800637e:	e002      	b.n	8006386 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fde1 	bl	8005f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e002      	b.n	8006390 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3730      	adds	r7, #48	; 0x30
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b0c0      	sub	sp, #256	; 0x100
 800639e:	af00      	add	r7, sp, #0
 80063a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	ea40 0301 	orr.w	r3, r0, r1
 80063c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063f0:	f021 010c 	bic.w	r1, r1, #12
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fe:	430b      	orrs	r3, r1
 8006400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	ea40 0301 	orr.w	r3, r0, r1
 800641e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b8f      	ldr	r3, [pc, #572]	; (8006664 <UART_SetConfig+0x2cc>)
 8006428:	429a      	cmp	r2, r3
 800642a:	d005      	beq.n	8006438 <UART_SetConfig+0xa0>
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b8d      	ldr	r3, [pc, #564]	; (8006668 <UART_SetConfig+0x2d0>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d104      	bne.n	8006442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fe f94e 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 800643c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006440:	e003      	b.n	800644a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006442:	f7fe f935 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8006446:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006454:	f040 810c 	bne.w	8006670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645c:	2200      	movs	r2, #0
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006462:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1891      	adds	r1, r2, r2
 8006470:	65b9      	str	r1, [r7, #88]	; 0x58
 8006472:	415b      	adcs	r3, r3
 8006474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800647a:	4621      	mov	r1, r4
 800647c:	eb12 0801 	adds.w	r8, r2, r1
 8006480:	4629      	mov	r1, r5
 8006482:	eb43 0901 	adc.w	r9, r3, r1
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	eb18 0303 	adds.w	r3, r8, r3
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064a8:	462b      	mov	r3, r5
 80064aa:	eb49 0303 	adc.w	r3, r9, r3
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064c6:	460b      	mov	r3, r1
 80064c8:	18db      	adds	r3, r3, r3
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	4613      	mov	r3, r2
 80064ce:	eb42 0303 	adc.w	r3, r2, r3
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
 80064d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064dc:	f7fa fb7c 	bl	8000bd8 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4b61      	ldr	r3, [pc, #388]	; (800666c <UART_SetConfig+0x2d4>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	011c      	lsls	r4, r3, #4
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	64b9      	str	r1, [r7, #72]	; 0x48
 8006508:	415b      	adcs	r3, r3
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006510:	4641      	mov	r1, r8
 8006512:	eb12 0a01 	adds.w	sl, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0b01 	adc.w	fp, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800652c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006530:	4692      	mov	sl, r2
 8006532:	469b      	mov	fp, r3
 8006534:	4643      	mov	r3, r8
 8006536:	eb1a 0303 	adds.w	r3, sl, r3
 800653a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653e:	464b      	mov	r3, r9
 8006540:	eb4b 0303 	adc.w	r3, fp, r3
 8006544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006554:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	647b      	str	r3, [r7, #68]	; 0x44
 800656a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800656e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006572:	f7fa fb31 	bl	8000bd8 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4611      	mov	r1, r2
 800657c:	4b3b      	ldr	r3, [pc, #236]	; (800666c <UART_SetConfig+0x2d4>)
 800657e:	fba3 2301 	umull	r2, r3, r3, r1
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2264      	movs	r2, #100	; 0x64
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	1acb      	subs	r3, r1, r3
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006592:	4b36      	ldr	r3, [pc, #216]	; (800666c <UART_SetConfig+0x2d4>)
 8006594:	fba3 2302 	umull	r2, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a0:	441c      	add	r4, r3
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80065bc:	415b      	adcs	r3, r3
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6339      	str	r1, [r7, #48]	; 0x30
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	464b      	mov	r3, r9
 80065fa:	460a      	mov	r2, r1
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006610:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800662a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800662e:	f7fa fad3 	bl	8000bd8 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <UART_SetConfig+0x2d4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <UART_SetConfig+0x2d4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 0207 	and.w	r2, r3, #7
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006660:	e105      	b.n	800686e <UART_SetConfig+0x4d6>
 8006662:	bf00      	nop
 8006664:	40011000 	.word	0x40011000
 8006668:	40011400 	.word	0x40011400
 800666c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800667a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800667e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006682:	4642      	mov	r2, r8
 8006684:	464b      	mov	r3, r9
 8006686:	1891      	adds	r1, r2, r2
 8006688:	6239      	str	r1, [r7, #32]
 800668a:	415b      	adcs	r3, r3
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006692:	4641      	mov	r1, r8
 8006694:	1854      	adds	r4, r2, r1
 8006696:	4649      	mov	r1, r9
 8006698:	eb43 0501 	adc.w	r5, r3, r1
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	00eb      	lsls	r3, r5, #3
 80066a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066aa:	00e2      	lsls	r2, r4, #3
 80066ac:	4614      	mov	r4, r2
 80066ae:	461d      	mov	r5, r3
 80066b0:	4643      	mov	r3, r8
 80066b2:	18e3      	adds	r3, r4, r3
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066b8:	464b      	mov	r3, r9
 80066ba:	eb45 0303 	adc.w	r3, r5, r3
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066de:	4629      	mov	r1, r5
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	4621      	mov	r1, r4
 80066e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e8:	4621      	mov	r1, r4
 80066ea:	008a      	lsls	r2, r1, #2
 80066ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066f0:	f7fa fa72 	bl	8000bd8 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b60      	ldr	r3, [pc, #384]	; (800687c <UART_SetConfig+0x4e4>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	011c      	lsls	r4, r3, #4
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800670c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	61b9      	str	r1, [r7, #24]
 800671c:	415b      	adcs	r3, r3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006724:	4641      	mov	r1, r8
 8006726:	1851      	adds	r1, r2, r1
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	4649      	mov	r1, r9
 800672c:	414b      	adcs	r3, r1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800673c:	4659      	mov	r1, fp
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4651      	mov	r1, sl
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4651      	mov	r1, sl
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4642      	mov	r2, r8
 8006752:	189b      	adds	r3, r3, r2
 8006754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006758:	464b      	mov	r3, r9
 800675a:	460a      	mov	r2, r1
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	67bb      	str	r3, [r7, #120]	; 0x78
 800676e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800677c:	4649      	mov	r1, r9
 800677e:	008b      	lsls	r3, r1, #2
 8006780:	4641      	mov	r1, r8
 8006782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006786:	4641      	mov	r1, r8
 8006788:	008a      	lsls	r2, r1, #2
 800678a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800678e:	f7fa fa23 	bl	8000bd8 <__aeabi_uldivmod>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <UART_SetConfig+0x4e4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <UART_SetConfig+0x4e4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b6:	441c      	add	r4, r3
 80067b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067bc:	2200      	movs	r2, #0
 80067be:	673b      	str	r3, [r7, #112]	; 0x70
 80067c0:	677a      	str	r2, [r7, #116]	; 0x74
 80067c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	1891      	adds	r1, r2, r2
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d6:	4641      	mov	r1, r8
 80067d8:	1851      	adds	r1, r2, r1
 80067da:	6039      	str	r1, [r7, #0]
 80067dc:	4649      	mov	r1, r9
 80067de:	414b      	adcs	r3, r1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ee:	4659      	mov	r1, fp
 80067f0:	00cb      	lsls	r3, r1, #3
 80067f2:	4651      	mov	r1, sl
 80067f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f8:	4651      	mov	r1, sl
 80067fa:	00ca      	lsls	r2, r1, #3
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	4603      	mov	r3, r0
 8006802:	4642      	mov	r2, r8
 8006804:	189b      	adds	r3, r3, r2
 8006806:	66bb      	str	r3, [r7, #104]	; 0x68
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	663b      	str	r3, [r7, #96]	; 0x60
 800681c:	667a      	str	r2, [r7, #100]	; 0x64
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800682a:	4649      	mov	r1, r9
 800682c:	008b      	lsls	r3, r1, #2
 800682e:	4641      	mov	r1, r8
 8006830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006834:	4641      	mov	r1, r8
 8006836:	008a      	lsls	r2, r1, #2
 8006838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800683c:	f7fa f9cc 	bl	8000bd8 <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <UART_SetConfig+0x4e4>)
 8006846:	fba3 1302 	umull	r1, r3, r3, r2
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2164      	movs	r1, #100	; 0x64
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	3332      	adds	r3, #50	; 0x32
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <UART_SetConfig+0x4e4>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4422      	add	r2, r4
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	bf00      	nop
 8006870:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	51eb851f 	.word	0x51eb851f

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	; (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000088 	.word	0x20000088

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f001 fc48 	bl	8008134 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08008400 	.word	0x08008400
 80068c8:	08008400 	.word	0x08008400
 80068cc:	08008400 	.word	0x08008400
 80068d0:	08008404 	.word	0x08008404

080068d4 <malloc>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <malloc+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f000 b877 	b.w	80069cc <_malloc_r>
 80068de:	bf00      	nop
 80068e0:	20000088 	.word	0x20000088

080068e4 <memset>:
 80068e4:	4402      	add	r2, r0
 80068e6:	4603      	mov	r3, r0
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d100      	bne.n	80068ee <memset+0xa>
 80068ec:	4770      	bx	lr
 80068ee:	f803 1b01 	strb.w	r1, [r3], #1
 80068f2:	e7f9      	b.n	80068e8 <memset+0x4>

080068f4 <_free_r>:
 80068f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d044      	beq.n	8006984 <_free_r+0x90>
 80068fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068fe:	9001      	str	r0, [sp, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f1a1 0404 	sub.w	r4, r1, #4
 8006906:	bfb8      	it	lt
 8006908:	18e4      	addlt	r4, r4, r3
 800690a:	f000 f90b 	bl	8006b24 <__malloc_lock>
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <_free_r+0x94>)
 8006910:	9801      	ldr	r0, [sp, #4]
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	b933      	cbnz	r3, 8006924 <_free_r+0x30>
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	6014      	str	r4, [r2, #0]
 800691a:	b003      	add	sp, #12
 800691c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006920:	f000 b906 	b.w	8006b30 <__malloc_unlock>
 8006924:	42a3      	cmp	r3, r4
 8006926:	d908      	bls.n	800693a <_free_r+0x46>
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	1961      	adds	r1, r4, r5
 800692c:	428b      	cmp	r3, r1
 800692e:	bf01      	itttt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	1949      	addeq	r1, r1, r5
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	e7ed      	b.n	8006916 <_free_r+0x22>
 800693a:	461a      	mov	r2, r3
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	b10b      	cbz	r3, 8006944 <_free_r+0x50>
 8006940:	42a3      	cmp	r3, r4
 8006942:	d9fa      	bls.n	800693a <_free_r+0x46>
 8006944:	6811      	ldr	r1, [r2, #0]
 8006946:	1855      	adds	r5, r2, r1
 8006948:	42a5      	cmp	r5, r4
 800694a:	d10b      	bne.n	8006964 <_free_r+0x70>
 800694c:	6824      	ldr	r4, [r4, #0]
 800694e:	4421      	add	r1, r4
 8006950:	1854      	adds	r4, r2, r1
 8006952:	42a3      	cmp	r3, r4
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	d1e0      	bne.n	800691a <_free_r+0x26>
 8006958:	681c      	ldr	r4, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	6053      	str	r3, [r2, #4]
 800695e:	4421      	add	r1, r4
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	e7da      	b.n	800691a <_free_r+0x26>
 8006964:	d902      	bls.n	800696c <_free_r+0x78>
 8006966:	230c      	movs	r3, #12
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	e7d6      	b.n	800691a <_free_r+0x26>
 800696c:	6825      	ldr	r5, [r4, #0]
 800696e:	1961      	adds	r1, r4, r5
 8006970:	428b      	cmp	r3, r1
 8006972:	bf04      	itt	eq
 8006974:	6819      	ldreq	r1, [r3, #0]
 8006976:	685b      	ldreq	r3, [r3, #4]
 8006978:	6063      	str	r3, [r4, #4]
 800697a:	bf04      	itt	eq
 800697c:	1949      	addeq	r1, r1, r5
 800697e:	6021      	streq	r1, [r4, #0]
 8006980:	6054      	str	r4, [r2, #4]
 8006982:	e7ca      	b.n	800691a <_free_r+0x26>
 8006984:	b003      	add	sp, #12
 8006986:	bd30      	pop	{r4, r5, pc}
 8006988:	2000035c 	.word	0x2000035c

0800698c <sbrk_aligned>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4e0e      	ldr	r6, [pc, #56]	; (80069c8 <sbrk_aligned+0x3c>)
 8006990:	460c      	mov	r4, r1
 8006992:	6831      	ldr	r1, [r6, #0]
 8006994:	4605      	mov	r5, r0
 8006996:	b911      	cbnz	r1, 800699e <sbrk_aligned+0x12>
 8006998:	f000 f88c 	bl	8006ab4 <_sbrk_r>
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 f887 	bl	8006ab4 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d00a      	beq.n	80069c0 <sbrk_aligned+0x34>
 80069aa:	1cc4      	adds	r4, r0, #3
 80069ac:	f024 0403 	bic.w	r4, r4, #3
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d007      	beq.n	80069c4 <sbrk_aligned+0x38>
 80069b4:	1a21      	subs	r1, r4, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 f87c 	bl	8006ab4 <_sbrk_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d101      	bne.n	80069c4 <sbrk_aligned+0x38>
 80069c0:	f04f 34ff 	mov.w	r4, #4294967295
 80069c4:	4620      	mov	r0, r4
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	20000360 	.word	0x20000360

080069cc <_malloc_r>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	1ccd      	adds	r5, r1, #3
 80069d2:	f025 0503 	bic.w	r5, r5, #3
 80069d6:	3508      	adds	r5, #8
 80069d8:	2d0c      	cmp	r5, #12
 80069da:	bf38      	it	cc
 80069dc:	250c      	movcc	r5, #12
 80069de:	2d00      	cmp	r5, #0
 80069e0:	4607      	mov	r7, r0
 80069e2:	db01      	blt.n	80069e8 <_malloc_r+0x1c>
 80069e4:	42a9      	cmp	r1, r5
 80069e6:	d905      	bls.n	80069f4 <_malloc_r+0x28>
 80069e8:	230c      	movs	r3, #12
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	2600      	movs	r6, #0
 80069ee:	4630      	mov	r0, r6
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	4e2e      	ldr	r6, [pc, #184]	; (8006ab0 <_malloc_r+0xe4>)
 80069f6:	f000 f895 	bl	8006b24 <__malloc_lock>
 80069fa:	6833      	ldr	r3, [r6, #0]
 80069fc:	461c      	mov	r4, r3
 80069fe:	bb34      	cbnz	r4, 8006a4e <_malloc_r+0x82>
 8006a00:	4629      	mov	r1, r5
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7ff ffc2 	bl	800698c <sbrk_aligned>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	d14d      	bne.n	8006aaa <_malloc_r+0xde>
 8006a0e:	6834      	ldr	r4, [r6, #0]
 8006a10:	4626      	mov	r6, r4
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	d140      	bne.n	8006a98 <_malloc_r+0xcc>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	eb04 0803 	add.w	r8, r4, r3
 8006a20:	f000 f848 	bl	8006ab4 <_sbrk_r>
 8006a24:	4580      	cmp	r8, r0
 8006a26:	d13a      	bne.n	8006a9e <_malloc_r+0xd2>
 8006a28:	6821      	ldr	r1, [r4, #0]
 8006a2a:	3503      	adds	r5, #3
 8006a2c:	1a6d      	subs	r5, r5, r1
 8006a2e:	f025 0503 	bic.w	r5, r5, #3
 8006a32:	3508      	adds	r5, #8
 8006a34:	2d0c      	cmp	r5, #12
 8006a36:	bf38      	it	cc
 8006a38:	250c      	movcc	r5, #12
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff ffa5 	bl	800698c <sbrk_aligned>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d02b      	beq.n	8006a9e <_malloc_r+0xd2>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	442b      	add	r3, r5
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	e00e      	b.n	8006a6c <_malloc_r+0xa0>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	1b52      	subs	r2, r2, r5
 8006a52:	d41e      	bmi.n	8006a92 <_malloc_r+0xc6>
 8006a54:	2a0b      	cmp	r2, #11
 8006a56:	d916      	bls.n	8006a86 <_malloc_r+0xba>
 8006a58:	1961      	adds	r1, r4, r5
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	6025      	str	r5, [r4, #0]
 8006a5e:	bf18      	it	ne
 8006a60:	6059      	strne	r1, [r3, #4]
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	bf08      	it	eq
 8006a66:	6031      	streq	r1, [r6, #0]
 8006a68:	5162      	str	r2, [r4, r5]
 8006a6a:	604b      	str	r3, [r1, #4]
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f104 060b 	add.w	r6, r4, #11
 8006a72:	f000 f85d 	bl	8006b30 <__malloc_unlock>
 8006a76:	f026 0607 	bic.w	r6, r6, #7
 8006a7a:	1d23      	adds	r3, r4, #4
 8006a7c:	1af2      	subs	r2, r6, r3
 8006a7e:	d0b6      	beq.n	80069ee <_malloc_r+0x22>
 8006a80:	1b9b      	subs	r3, r3, r6
 8006a82:	50a3      	str	r3, [r4, r2]
 8006a84:	e7b3      	b.n	80069ee <_malloc_r+0x22>
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	bf0c      	ite	eq
 8006a8c:	6032      	streq	r2, [r6, #0]
 8006a8e:	605a      	strne	r2, [r3, #4]
 8006a90:	e7ec      	b.n	8006a6c <_malloc_r+0xa0>
 8006a92:	4623      	mov	r3, r4
 8006a94:	6864      	ldr	r4, [r4, #4]
 8006a96:	e7b2      	b.n	80069fe <_malloc_r+0x32>
 8006a98:	4634      	mov	r4, r6
 8006a9a:	6876      	ldr	r6, [r6, #4]
 8006a9c:	e7b9      	b.n	8006a12 <_malloc_r+0x46>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f000 f844 	bl	8006b30 <__malloc_unlock>
 8006aa8:	e7a1      	b.n	80069ee <_malloc_r+0x22>
 8006aaa:	6025      	str	r5, [r4, #0]
 8006aac:	e7de      	b.n	8006a6c <_malloc_r+0xa0>
 8006aae:	bf00      	nop
 8006ab0:	2000035c 	.word	0x2000035c

08006ab4 <_sbrk_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	; (8006ad0 <_sbrk_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fb f85c 	bl	8001b7c <_sbrk>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_sbrk_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_sbrk_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	20000364 	.word	0x20000364

08006ad4 <siprintf>:
 8006ad4:	b40e      	push	{r1, r2, r3}
 8006ad6:	b500      	push	{lr}
 8006ad8:	b09c      	sub	sp, #112	; 0x70
 8006ada:	ab1d      	add	r3, sp, #116	; 0x74
 8006adc:	9002      	str	r0, [sp, #8]
 8006ade:	9006      	str	r0, [sp, #24]
 8006ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ae4:	4809      	ldr	r0, [pc, #36]	; (8006b0c <siprintf+0x38>)
 8006ae6:	9107      	str	r1, [sp, #28]
 8006ae8:	9104      	str	r1, [sp, #16]
 8006aea:	4909      	ldr	r1, [pc, #36]	; (8006b10 <siprintf+0x3c>)
 8006aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006af0:	9105      	str	r1, [sp, #20]
 8006af2:	6800      	ldr	r0, [r0, #0]
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	a902      	add	r1, sp, #8
 8006af8:	f000 f87c 	bl	8006bf4 <_svfiprintf_r>
 8006afc:	9b02      	ldr	r3, [sp, #8]
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	b01c      	add	sp, #112	; 0x70
 8006b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b08:	b003      	add	sp, #12
 8006b0a:	4770      	bx	lr
 8006b0c:	20000088 	.word	0x20000088
 8006b10:	ffff0208 	.word	0xffff0208

08006b14 <strcpy>:
 8006b14:	4603      	mov	r3, r0
 8006b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b1a:	f803 2b01 	strb.w	r2, [r3], #1
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1f9      	bne.n	8006b16 <strcpy+0x2>
 8006b22:	4770      	bx	lr

08006b24 <__malloc_lock>:
 8006b24:	4801      	ldr	r0, [pc, #4]	; (8006b2c <__malloc_lock+0x8>)
 8006b26:	f000 baf9 	b.w	800711c <__retarget_lock_acquire_recursive>
 8006b2a:	bf00      	nop
 8006b2c:	20000368 	.word	0x20000368

08006b30 <__malloc_unlock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__malloc_unlock+0x8>)
 8006b32:	f000 baf4 	b.w	800711e <__retarget_lock_release_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000368 	.word	0x20000368

08006b3c <__ssputs_r>:
 8006b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	688e      	ldr	r6, [r1, #8]
 8006b42:	429e      	cmp	r6, r3
 8006b44:	4682      	mov	sl, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	4690      	mov	r8, r2
 8006b4a:	461f      	mov	r7, r3
 8006b4c:	d838      	bhi.n	8006bc0 <__ssputs_r+0x84>
 8006b4e:	898a      	ldrh	r2, [r1, #12]
 8006b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b54:	d032      	beq.n	8006bbc <__ssputs_r+0x80>
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	6909      	ldr	r1, [r1, #16]
 8006b5a:	eba5 0901 	sub.w	r9, r5, r1
 8006b5e:	6965      	ldr	r5, [r4, #20]
 8006b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b68:	3301      	adds	r3, #1
 8006b6a:	444b      	add	r3, r9
 8006b6c:	106d      	asrs	r5, r5, #1
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	bf38      	it	cc
 8006b72:	461d      	movcc	r5, r3
 8006b74:	0553      	lsls	r3, r2, #21
 8006b76:	d531      	bpl.n	8006bdc <__ssputs_r+0xa0>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7ff ff27 	bl	80069cc <_malloc_r>
 8006b7e:	4606      	mov	r6, r0
 8006b80:	b950      	cbnz	r0, 8006b98 <__ssputs_r+0x5c>
 8006b82:	230c      	movs	r3, #12
 8006b84:	f8ca 3000 	str.w	r3, [sl]
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	6921      	ldr	r1, [r4, #16]
 8006b9a:	464a      	mov	r2, r9
 8006b9c:	f000 fac0 	bl	8007120 <memcpy>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	6126      	str	r6, [r4, #16]
 8006bae:	6165      	str	r5, [r4, #20]
 8006bb0:	444e      	add	r6, r9
 8006bb2:	eba5 0509 	sub.w	r5, r5, r9
 8006bb6:	6026      	str	r6, [r4, #0]
 8006bb8:	60a5      	str	r5, [r4, #8]
 8006bba:	463e      	mov	r6, r7
 8006bbc:	42be      	cmp	r6, r7
 8006bbe:	d900      	bls.n	8006bc2 <__ssputs_r+0x86>
 8006bc0:	463e      	mov	r6, r7
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	f000 fab8 	bl	800713c <memmove>
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	1b9b      	subs	r3, r3, r6
 8006bd0:	60a3      	str	r3, [r4, #8]
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4433      	add	r3, r6
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e7db      	b.n	8006b94 <__ssputs_r+0x58>
 8006bdc:	462a      	mov	r2, r5
 8006bde:	f000 fac7 	bl	8007170 <_realloc_r>
 8006be2:	4606      	mov	r6, r0
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d1e1      	bne.n	8006bac <__ssputs_r+0x70>
 8006be8:	6921      	ldr	r1, [r4, #16]
 8006bea:	4650      	mov	r0, sl
 8006bec:	f7ff fe82 	bl	80068f4 <_free_r>
 8006bf0:	e7c7      	b.n	8006b82 <__ssputs_r+0x46>
	...

08006bf4 <_svfiprintf_r>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4698      	mov	r8, r3
 8006bfa:	898b      	ldrh	r3, [r1, #12]
 8006bfc:	061b      	lsls	r3, r3, #24
 8006bfe:	b09d      	sub	sp, #116	; 0x74
 8006c00:	4607      	mov	r7, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	4614      	mov	r4, r2
 8006c06:	d50e      	bpl.n	8006c26 <_svfiprintf_r+0x32>
 8006c08:	690b      	ldr	r3, [r1, #16]
 8006c0a:	b963      	cbnz	r3, 8006c26 <_svfiprintf_r+0x32>
 8006c0c:	2140      	movs	r1, #64	; 0x40
 8006c0e:	f7ff fedd 	bl	80069cc <_malloc_r>
 8006c12:	6028      	str	r0, [r5, #0]
 8006c14:	6128      	str	r0, [r5, #16]
 8006c16:	b920      	cbnz	r0, 8006c22 <_svfiprintf_r+0x2e>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	e0d1      	b.n	8006dc6 <_svfiprintf_r+0x1d2>
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	616b      	str	r3, [r5, #20]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	2320      	movs	r3, #32
 8006c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c34:	2330      	movs	r3, #48	; 0x30
 8006c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006de0 <_svfiprintf_r+0x1ec>
 8006c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3e:	f04f 0901 	mov.w	r9, #1
 8006c42:	4623      	mov	r3, r4
 8006c44:	469a      	mov	sl, r3
 8006c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c4a:	b10a      	cbz	r2, 8006c50 <_svfiprintf_r+0x5c>
 8006c4c:	2a25      	cmp	r2, #37	; 0x25
 8006c4e:	d1f9      	bne.n	8006c44 <_svfiprintf_r+0x50>
 8006c50:	ebba 0b04 	subs.w	fp, sl, r4
 8006c54:	d00b      	beq.n	8006c6e <_svfiprintf_r+0x7a>
 8006c56:	465b      	mov	r3, fp
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f7ff ff6d 	bl	8006b3c <__ssputs_r>
 8006c62:	3001      	adds	r0, #1
 8006c64:	f000 80aa 	beq.w	8006dbc <_svfiprintf_r+0x1c8>
 8006c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c6a:	445a      	add	r2, fp
 8006c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80a2 	beq.w	8006dbc <_svfiprintf_r+0x1c8>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c82:	f10a 0a01 	add.w	sl, sl, #1
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	9307      	str	r3, [sp, #28]
 8006c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c90:	4654      	mov	r4, sl
 8006c92:	2205      	movs	r2, #5
 8006c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c98:	4851      	ldr	r0, [pc, #324]	; (8006de0 <_svfiprintf_r+0x1ec>)
 8006c9a:	f7f9 fac1 	bl	8000220 <memchr>
 8006c9e:	9a04      	ldr	r2, [sp, #16]
 8006ca0:	b9d8      	cbnz	r0, 8006cda <_svfiprintf_r+0xe6>
 8006ca2:	06d0      	lsls	r0, r2, #27
 8006ca4:	bf44      	itt	mi
 8006ca6:	2320      	movmi	r3, #32
 8006ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cac:	0711      	lsls	r1, r2, #28
 8006cae:	bf44      	itt	mi
 8006cb0:	232b      	movmi	r3, #43	; 0x2b
 8006cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cba:	2b2a      	cmp	r3, #42	; 0x2a
 8006cbc:	d015      	beq.n	8006cea <_svfiprintf_r+0xf6>
 8006cbe:	9a07      	ldr	r2, [sp, #28]
 8006cc0:	4654      	mov	r4, sl
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f04f 0c0a 	mov.w	ip, #10
 8006cc8:	4621      	mov	r1, r4
 8006cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cce:	3b30      	subs	r3, #48	; 0x30
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d94e      	bls.n	8006d72 <_svfiprintf_r+0x17e>
 8006cd4:	b1b0      	cbz	r0, 8006d04 <_svfiprintf_r+0x110>
 8006cd6:	9207      	str	r2, [sp, #28]
 8006cd8:	e014      	b.n	8006d04 <_svfiprintf_r+0x110>
 8006cda:	eba0 0308 	sub.w	r3, r0, r8
 8006cde:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	46a2      	mov	sl, r4
 8006ce8:	e7d2      	b.n	8006c90 <_svfiprintf_r+0x9c>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	1d19      	adds	r1, r3, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	9103      	str	r1, [sp, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bfbb      	ittet	lt
 8006cf6:	425b      	neglt	r3, r3
 8006cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfc:	9307      	strge	r3, [sp, #28]
 8006cfe:	9307      	strlt	r3, [sp, #28]
 8006d00:	bfb8      	it	lt
 8006d02:	9204      	strlt	r2, [sp, #16]
 8006d04:	7823      	ldrb	r3, [r4, #0]
 8006d06:	2b2e      	cmp	r3, #46	; 0x2e
 8006d08:	d10c      	bne.n	8006d24 <_svfiprintf_r+0x130>
 8006d0a:	7863      	ldrb	r3, [r4, #1]
 8006d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0e:	d135      	bne.n	8006d7c <_svfiprintf_r+0x188>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	9203      	str	r2, [sp, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfb8      	it	lt
 8006d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d20:	3402      	adds	r4, #2
 8006d22:	9305      	str	r3, [sp, #20]
 8006d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006df0 <_svfiprintf_r+0x1fc>
 8006d28:	7821      	ldrb	r1, [r4, #0]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	f7f9 fa77 	bl	8000220 <memchr>
 8006d32:	b140      	cbz	r0, 8006d46 <_svfiprintf_r+0x152>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	eba0 000a 	sub.w	r0, r0, sl
 8006d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	4303      	orrs	r3, r0
 8006d42:	3401      	adds	r4, #1
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4a:	4826      	ldr	r0, [pc, #152]	; (8006de4 <_svfiprintf_r+0x1f0>)
 8006d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d50:	2206      	movs	r2, #6
 8006d52:	f7f9 fa65 	bl	8000220 <memchr>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d038      	beq.n	8006dcc <_svfiprintf_r+0x1d8>
 8006d5a:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <_svfiprintf_r+0x1f4>)
 8006d5c:	bb1b      	cbnz	r3, 8006da6 <_svfiprintf_r+0x1b2>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	f023 0307 	bic.w	r3, r3, #7
 8006d66:	3308      	adds	r3, #8
 8006d68:	9303      	str	r3, [sp, #12]
 8006d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6c:	4433      	add	r3, r6
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	e767      	b.n	8006c42 <_svfiprintf_r+0x4e>
 8006d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d76:	460c      	mov	r4, r1
 8006d78:	2001      	movs	r0, #1
 8006d7a:	e7a5      	b.n	8006cc8 <_svfiprintf_r+0xd4>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	3401      	adds	r4, #1
 8006d80:	9305      	str	r3, [sp, #20]
 8006d82:	4619      	mov	r1, r3
 8006d84:	f04f 0c0a 	mov.w	ip, #10
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8e:	3a30      	subs	r2, #48	; 0x30
 8006d90:	2a09      	cmp	r2, #9
 8006d92:	d903      	bls.n	8006d9c <_svfiprintf_r+0x1a8>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0c5      	beq.n	8006d24 <_svfiprintf_r+0x130>
 8006d98:	9105      	str	r1, [sp, #20]
 8006d9a:	e7c3      	b.n	8006d24 <_svfiprintf_r+0x130>
 8006d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006da0:	4604      	mov	r4, r0
 8006da2:	2301      	movs	r3, #1
 8006da4:	e7f0      	b.n	8006d88 <_svfiprintf_r+0x194>
 8006da6:	ab03      	add	r3, sp, #12
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	462a      	mov	r2, r5
 8006dac:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <_svfiprintf_r+0x1f8>)
 8006dae:	a904      	add	r1, sp, #16
 8006db0:	4638      	mov	r0, r7
 8006db2:	f3af 8000 	nop.w
 8006db6:	1c42      	adds	r2, r0, #1
 8006db8:	4606      	mov	r6, r0
 8006dba:	d1d6      	bne.n	8006d6a <_svfiprintf_r+0x176>
 8006dbc:	89ab      	ldrh	r3, [r5, #12]
 8006dbe:	065b      	lsls	r3, r3, #25
 8006dc0:	f53f af2c 	bmi.w	8006c1c <_svfiprintf_r+0x28>
 8006dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc6:	b01d      	add	sp, #116	; 0x74
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <_svfiprintf_r+0x1f8>)
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f000 f87a 	bl	8006ed0 <_printf_i>
 8006ddc:	e7eb      	b.n	8006db6 <_svfiprintf_r+0x1c2>
 8006dde:	bf00      	nop
 8006de0:	08008384 	.word	0x08008384
 8006de4:	0800838e 	.word	0x0800838e
 8006de8:	00000000 	.word	0x00000000
 8006dec:	08006b3d 	.word	0x08006b3d
 8006df0:	0800838a 	.word	0x0800838a

08006df4 <_printf_common>:
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	4616      	mov	r6, r2
 8006dfa:	4699      	mov	r9, r3
 8006dfc:	688a      	ldr	r2, [r1, #8]
 8006dfe:	690b      	ldr	r3, [r1, #16]
 8006e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bfb8      	it	lt
 8006e08:	4613      	movlt	r3, r2
 8006e0a:	6033      	str	r3, [r6, #0]
 8006e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e10:	4607      	mov	r7, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b10a      	cbz	r2, 8006e1a <_printf_common+0x26>
 8006e16:	3301      	adds	r3, #1
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0699      	lsls	r1, r3, #26
 8006e1e:	bf42      	ittt	mi
 8006e20:	6833      	ldrmi	r3, [r6, #0]
 8006e22:	3302      	addmi	r3, #2
 8006e24:	6033      	strmi	r3, [r6, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	f015 0506 	ands.w	r5, r5, #6
 8006e2c:	d106      	bne.n	8006e3c <_printf_common+0x48>
 8006e2e:	f104 0a19 	add.w	sl, r4, #25
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	6832      	ldr	r2, [r6, #0]
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dc26      	bgt.n	8006e8a <_printf_common+0x96>
 8006e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e40:	1e13      	subs	r3, r2, #0
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	bf18      	it	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d42b      	bmi.n	8006ea4 <_printf_common+0xb0>
 8006e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e50:	4649      	mov	r1, r9
 8006e52:	4638      	mov	r0, r7
 8006e54:	47c0      	blx	r8
 8006e56:	3001      	adds	r0, #1
 8006e58:	d01e      	beq.n	8006e98 <_printf_common+0xa4>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	68e5      	ldr	r5, [r4, #12]
 8006e5e:	6832      	ldr	r2, [r6, #0]
 8006e60:	f003 0306 	and.w	r3, r3, #6
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	bf08      	it	eq
 8006e68:	1aad      	subeq	r5, r5, r2
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	bf0c      	ite	eq
 8006e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e74:	2500      	movne	r5, #0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfc4      	itt	gt
 8006e7a:	1a9b      	subgt	r3, r3, r2
 8006e7c:	18ed      	addgt	r5, r5, r3
 8006e7e:	2600      	movs	r6, #0
 8006e80:	341a      	adds	r4, #26
 8006e82:	42b5      	cmp	r5, r6
 8006e84:	d11a      	bne.n	8006ebc <_printf_common+0xc8>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e008      	b.n	8006e9c <_printf_common+0xa8>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4649      	mov	r1, r9
 8006e90:	4638      	mov	r0, r7
 8006e92:	47c0      	blx	r8
 8006e94:	3001      	adds	r0, #1
 8006e96:	d103      	bne.n	8006ea0 <_printf_common+0xac>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	e7c6      	b.n	8006e32 <_printf_common+0x3e>
 8006ea4:	18e1      	adds	r1, r4, r3
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	2030      	movs	r0, #48	; 0x30
 8006eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eae:	4422      	add	r2, r4
 8006eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb8:	3302      	adds	r3, #2
 8006eba:	e7c7      	b.n	8006e4c <_printf_common+0x58>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c0      	blx	r8
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d0e6      	beq.n	8006e98 <_printf_common+0xa4>
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7d9      	b.n	8006e82 <_printf_common+0x8e>
	...

08006ed0 <_printf_i>:
 8006ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed4:	7e0f      	ldrb	r7, [r1, #24]
 8006ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed8:	2f78      	cmp	r7, #120	; 0x78
 8006eda:	4691      	mov	r9, r2
 8006edc:	4680      	mov	r8, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	469a      	mov	sl, r3
 8006ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ee6:	d807      	bhi.n	8006ef8 <_printf_i+0x28>
 8006ee8:	2f62      	cmp	r7, #98	; 0x62
 8006eea:	d80a      	bhi.n	8006f02 <_printf_i+0x32>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	f000 80d8 	beq.w	80070a2 <_printf_i+0x1d2>
 8006ef2:	2f58      	cmp	r7, #88	; 0x58
 8006ef4:	f000 80a3 	beq.w	800703e <_printf_i+0x16e>
 8006ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f00:	e03a      	b.n	8006f78 <_printf_i+0xa8>
 8006f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f06:	2b15      	cmp	r3, #21
 8006f08:	d8f6      	bhi.n	8006ef8 <_printf_i+0x28>
 8006f0a:	a101      	add	r1, pc, #4	; (adr r1, 8006f10 <_printf_i+0x40>)
 8006f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f10:	08006f69 	.word	0x08006f69
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006ef9 	.word	0x08006ef9
 8006f1c:	08006ef9 	.word	0x08006ef9
 8006f20:	08006ef9 	.word	0x08006ef9
 8006f24:	08006ef9 	.word	0x08006ef9
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006ef9 	.word	0x08006ef9
 8006f30:	08006ef9 	.word	0x08006ef9
 8006f34:	08006ef9 	.word	0x08006ef9
 8006f38:	08006ef9 	.word	0x08006ef9
 8006f3c:	08007089 	.word	0x08007089
 8006f40:	08006fad 	.word	0x08006fad
 8006f44:	0800706b 	.word	0x0800706b
 8006f48:	08006ef9 	.word	0x08006ef9
 8006f4c:	08006ef9 	.word	0x08006ef9
 8006f50:	080070ab 	.word	0x080070ab
 8006f54:	08006ef9 	.word	0x08006ef9
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006ef9 	.word	0x08006ef9
 8006f60:	08006ef9 	.word	0x08006ef9
 8006f64:	08007073 	.word	0x08007073
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	1d1a      	adds	r2, r3, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0a3      	b.n	80070c4 <_printf_i+0x1f4>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	6829      	ldr	r1, [r5, #0]
 8006f80:	0606      	lsls	r6, r0, #24
 8006f82:	f101 0304 	add.w	r3, r1, #4
 8006f86:	d50a      	bpl.n	8006f9e <_printf_i+0xce>
 8006f88:	680e      	ldr	r6, [r1, #0]
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	da03      	bge.n	8006f98 <_printf_i+0xc8>
 8006f90:	232d      	movs	r3, #45	; 0x2d
 8006f92:	4276      	negs	r6, r6
 8006f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f98:	485e      	ldr	r0, [pc, #376]	; (8007114 <_printf_i+0x244>)
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	e019      	b.n	8006fd2 <_printf_i+0x102>
 8006f9e:	680e      	ldr	r6, [r1, #0]
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fa6:	bf18      	it	ne
 8006fa8:	b236      	sxthne	r6, r6
 8006faa:	e7ef      	b.n	8006f8c <_printf_i+0xbc>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	6029      	str	r1, [r5, #0]
 8006fb4:	0601      	lsls	r1, r0, #24
 8006fb6:	d501      	bpl.n	8006fbc <_printf_i+0xec>
 8006fb8:	681e      	ldr	r6, [r3, #0]
 8006fba:	e002      	b.n	8006fc2 <_printf_i+0xf2>
 8006fbc:	0646      	lsls	r6, r0, #25
 8006fbe:	d5fb      	bpl.n	8006fb8 <_printf_i+0xe8>
 8006fc0:	881e      	ldrh	r6, [r3, #0]
 8006fc2:	4854      	ldr	r0, [pc, #336]	; (8007114 <_printf_i+0x244>)
 8006fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2308      	moveq	r3, #8
 8006fca:	230a      	movne	r3, #10
 8006fcc:	2100      	movs	r1, #0
 8006fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fd2:	6865      	ldr	r5, [r4, #4]
 8006fd4:	60a5      	str	r5, [r4, #8]
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	bfa2      	ittt	ge
 8006fda:	6821      	ldrge	r1, [r4, #0]
 8006fdc:	f021 0104 	bicge.w	r1, r1, #4
 8006fe0:	6021      	strge	r1, [r4, #0]
 8006fe2:	b90e      	cbnz	r6, 8006fe8 <_printf_i+0x118>
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	d04d      	beq.n	8007084 <_printf_i+0x1b4>
 8006fe8:	4615      	mov	r5, r2
 8006fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fee:	fb03 6711 	mls	r7, r3, r1, r6
 8006ff2:	5dc7      	ldrb	r7, [r0, r7]
 8006ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ff8:	4637      	mov	r7, r6
 8006ffa:	42bb      	cmp	r3, r7
 8006ffc:	460e      	mov	r6, r1
 8006ffe:	d9f4      	bls.n	8006fea <_printf_i+0x11a>
 8007000:	2b08      	cmp	r3, #8
 8007002:	d10b      	bne.n	800701c <_printf_i+0x14c>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	07de      	lsls	r6, r3, #31
 8007008:	d508      	bpl.n	800701c <_printf_i+0x14c>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	6861      	ldr	r1, [r4, #4]
 800700e:	4299      	cmp	r1, r3
 8007010:	bfde      	ittt	le
 8007012:	2330      	movle	r3, #48	; 0x30
 8007014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800701c:	1b52      	subs	r2, r2, r5
 800701e:	6122      	str	r2, [r4, #16]
 8007020:	f8cd a000 	str.w	sl, [sp]
 8007024:	464b      	mov	r3, r9
 8007026:	aa03      	add	r2, sp, #12
 8007028:	4621      	mov	r1, r4
 800702a:	4640      	mov	r0, r8
 800702c:	f7ff fee2 	bl	8006df4 <_printf_common>
 8007030:	3001      	adds	r0, #1
 8007032:	d14c      	bne.n	80070ce <_printf_i+0x1fe>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	b004      	add	sp, #16
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	4835      	ldr	r0, [pc, #212]	; (8007114 <_printf_i+0x244>)
 8007040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f851 6b04 	ldr.w	r6, [r1], #4
 800704c:	6029      	str	r1, [r5, #0]
 800704e:	061d      	lsls	r5, r3, #24
 8007050:	d514      	bpl.n	800707c <_printf_i+0x1ac>
 8007052:	07df      	lsls	r7, r3, #31
 8007054:	bf44      	itt	mi
 8007056:	f043 0320 	orrmi.w	r3, r3, #32
 800705a:	6023      	strmi	r3, [r4, #0]
 800705c:	b91e      	cbnz	r6, 8007066 <_printf_i+0x196>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f023 0320 	bic.w	r3, r3, #32
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	2310      	movs	r3, #16
 8007068:	e7b0      	b.n	8006fcc <_printf_i+0xfc>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f043 0320 	orr.w	r3, r3, #32
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	2378      	movs	r3, #120	; 0x78
 8007074:	4828      	ldr	r0, [pc, #160]	; (8007118 <_printf_i+0x248>)
 8007076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800707a:	e7e3      	b.n	8007044 <_printf_i+0x174>
 800707c:	0659      	lsls	r1, r3, #25
 800707e:	bf48      	it	mi
 8007080:	b2b6      	uxthmi	r6, r6
 8007082:	e7e6      	b.n	8007052 <_printf_i+0x182>
 8007084:	4615      	mov	r5, r2
 8007086:	e7bb      	b.n	8007000 <_printf_i+0x130>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	6826      	ldr	r6, [r4, #0]
 800708c:	6961      	ldr	r1, [r4, #20]
 800708e:	1d18      	adds	r0, r3, #4
 8007090:	6028      	str	r0, [r5, #0]
 8007092:	0635      	lsls	r5, r6, #24
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	d501      	bpl.n	800709c <_printf_i+0x1cc>
 8007098:	6019      	str	r1, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0x1d2>
 800709c:	0670      	lsls	r0, r6, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0x1c8>
 80070a0:	8019      	strh	r1, [r3, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	4615      	mov	r5, r2
 80070a8:	e7ba      	b.n	8007020 <_printf_i+0x150>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	602a      	str	r2, [r5, #0]
 80070b0:	681d      	ldr	r5, [r3, #0]
 80070b2:	6862      	ldr	r2, [r4, #4]
 80070b4:	2100      	movs	r1, #0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7f9 f8b2 	bl	8000220 <memchr>
 80070bc:	b108      	cbz	r0, 80070c2 <_printf_i+0x1f2>
 80070be:	1b40      	subs	r0, r0, r5
 80070c0:	6060      	str	r0, [r4, #4]
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	2300      	movs	r3, #0
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070cc:	e7a8      	b.n	8007020 <_printf_i+0x150>
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4649      	mov	r1, r9
 80070d4:	4640      	mov	r0, r8
 80070d6:	47d0      	blx	sl
 80070d8:	3001      	adds	r0, #1
 80070da:	d0ab      	beq.n	8007034 <_printf_i+0x164>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	079b      	lsls	r3, r3, #30
 80070e0:	d413      	bmi.n	800710a <_printf_i+0x23a>
 80070e2:	68e0      	ldr	r0, [r4, #12]
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	4298      	cmp	r0, r3
 80070e8:	bfb8      	it	lt
 80070ea:	4618      	movlt	r0, r3
 80070ec:	e7a4      	b.n	8007038 <_printf_i+0x168>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4632      	mov	r2, r6
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	47d0      	blx	sl
 80070f8:	3001      	adds	r0, #1
 80070fa:	d09b      	beq.n	8007034 <_printf_i+0x164>
 80070fc:	3501      	adds	r5, #1
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	9903      	ldr	r1, [sp, #12]
 8007102:	1a5b      	subs	r3, r3, r1
 8007104:	42ab      	cmp	r3, r5
 8007106:	dcf2      	bgt.n	80070ee <_printf_i+0x21e>
 8007108:	e7eb      	b.n	80070e2 <_printf_i+0x212>
 800710a:	2500      	movs	r5, #0
 800710c:	f104 0619 	add.w	r6, r4, #25
 8007110:	e7f5      	b.n	80070fe <_printf_i+0x22e>
 8007112:	bf00      	nop
 8007114:	08008395 	.word	0x08008395
 8007118:	080083a6 	.word	0x080083a6

0800711c <__retarget_lock_acquire_recursive>:
 800711c:	4770      	bx	lr

0800711e <__retarget_lock_release_recursive>:
 800711e:	4770      	bx	lr

08007120 <memcpy>:
 8007120:	440a      	add	r2, r1
 8007122:	4291      	cmp	r1, r2
 8007124:	f100 33ff 	add.w	r3, r0, #4294967295
 8007128:	d100      	bne.n	800712c <memcpy+0xc>
 800712a:	4770      	bx	lr
 800712c:	b510      	push	{r4, lr}
 800712e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007136:	4291      	cmp	r1, r2
 8007138:	d1f9      	bne.n	800712e <memcpy+0xe>
 800713a:	bd10      	pop	{r4, pc}

0800713c <memmove>:
 800713c:	4288      	cmp	r0, r1
 800713e:	b510      	push	{r4, lr}
 8007140:	eb01 0402 	add.w	r4, r1, r2
 8007144:	d902      	bls.n	800714c <memmove+0x10>
 8007146:	4284      	cmp	r4, r0
 8007148:	4623      	mov	r3, r4
 800714a:	d807      	bhi.n	800715c <memmove+0x20>
 800714c:	1e43      	subs	r3, r0, #1
 800714e:	42a1      	cmp	r1, r4
 8007150:	d008      	beq.n	8007164 <memmove+0x28>
 8007152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800715a:	e7f8      	b.n	800714e <memmove+0x12>
 800715c:	4402      	add	r2, r0
 800715e:	4601      	mov	r1, r0
 8007160:	428a      	cmp	r2, r1
 8007162:	d100      	bne.n	8007166 <memmove+0x2a>
 8007164:	bd10      	pop	{r4, pc}
 8007166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800716a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800716e:	e7f7      	b.n	8007160 <memmove+0x24>

08007170 <_realloc_r>:
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	4680      	mov	r8, r0
 8007176:	4614      	mov	r4, r2
 8007178:	460e      	mov	r6, r1
 800717a:	b921      	cbnz	r1, 8007186 <_realloc_r+0x16>
 800717c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	4611      	mov	r1, r2
 8007182:	f7ff bc23 	b.w	80069cc <_malloc_r>
 8007186:	b92a      	cbnz	r2, 8007194 <_realloc_r+0x24>
 8007188:	f7ff fbb4 	bl	80068f4 <_free_r>
 800718c:	4625      	mov	r5, r4
 800718e:	4628      	mov	r0, r5
 8007190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007194:	f000 f81b 	bl	80071ce <_malloc_usable_size_r>
 8007198:	4284      	cmp	r4, r0
 800719a:	4607      	mov	r7, r0
 800719c:	d802      	bhi.n	80071a4 <_realloc_r+0x34>
 800719e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071a2:	d812      	bhi.n	80071ca <_realloc_r+0x5a>
 80071a4:	4621      	mov	r1, r4
 80071a6:	4640      	mov	r0, r8
 80071a8:	f7ff fc10 	bl	80069cc <_malloc_r>
 80071ac:	4605      	mov	r5, r0
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d0ed      	beq.n	800718e <_realloc_r+0x1e>
 80071b2:	42bc      	cmp	r4, r7
 80071b4:	4622      	mov	r2, r4
 80071b6:	4631      	mov	r1, r6
 80071b8:	bf28      	it	cs
 80071ba:	463a      	movcs	r2, r7
 80071bc:	f7ff ffb0 	bl	8007120 <memcpy>
 80071c0:	4631      	mov	r1, r6
 80071c2:	4640      	mov	r0, r8
 80071c4:	f7ff fb96 	bl	80068f4 <_free_r>
 80071c8:	e7e1      	b.n	800718e <_realloc_r+0x1e>
 80071ca:	4635      	mov	r5, r6
 80071cc:	e7df      	b.n	800718e <_realloc_r+0x1e>

080071ce <_malloc_usable_size_r>:
 80071ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d2:	1f18      	subs	r0, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bfbc      	itt	lt
 80071d8:	580b      	ldrlt	r3, [r1, r0]
 80071da:	18c0      	addlt	r0, r0, r3
 80071dc:	4770      	bx	lr
	...

080071e0 <rint>:
 80071e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e2:	ec51 0b10 	vmov	r0, r1, d0
 80071e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071ea:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80071ee:	2d13      	cmp	r5, #19
 80071f0:	ee10 3a10 	vmov	r3, s0
 80071f4:	460c      	mov	r4, r1
 80071f6:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80071fa:	dc5b      	bgt.n	80072b4 <rint+0xd4>
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	da2d      	bge.n	800725c <rint+0x7c>
 8007200:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007204:	4302      	orrs	r2, r0
 8007206:	d025      	beq.n	8007254 <rint+0x74>
 8007208:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800720c:	4302      	orrs	r2, r0
 800720e:	4253      	negs	r3, r2
 8007210:	4313      	orrs	r3, r2
 8007212:	0b1b      	lsrs	r3, r3, #12
 8007214:	0c4a      	lsrs	r2, r1, #17
 8007216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800721a:	0452      	lsls	r2, r2, #17
 800721c:	ea43 0102 	orr.w	r1, r3, r2
 8007220:	460b      	mov	r3, r1
 8007222:	4934      	ldr	r1, [pc, #208]	; (80072f4 <rint+0x114>)
 8007224:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8007228:	e9d6 6700 	ldrd	r6, r7, [r6]
 800722c:	4602      	mov	r2, r0
 800722e:	4639      	mov	r1, r7
 8007230:	4630      	mov	r0, r6
 8007232:	f7f9 f84b 	bl	80002cc <__adddf3>
 8007236:	e9cd 0100 	strd	r0, r1, [sp]
 800723a:	463b      	mov	r3, r7
 800723c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007240:	4632      	mov	r2, r6
 8007242:	f7f9 f841 	bl	80002c8 <__aeabi_dsub>
 8007246:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 800724a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800724e:	ea43 0704 	orr.w	r7, r3, r4
 8007252:	4639      	mov	r1, r7
 8007254:	ec41 0b10 	vmov	d0, r0, r1
 8007258:	b003      	add	sp, #12
 800725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725c:	4a26      	ldr	r2, [pc, #152]	; (80072f8 <rint+0x118>)
 800725e:	412a      	asrs	r2, r5
 8007260:	ea01 0702 	and.w	r7, r1, r2
 8007264:	4307      	orrs	r7, r0
 8007266:	d0f5      	beq.n	8007254 <rint+0x74>
 8007268:	0851      	lsrs	r1, r2, #1
 800726a:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 800726e:	4313      	orrs	r3, r2
 8007270:	d00c      	beq.n	800728c <rint+0xac>
 8007272:	ea24 0201 	bic.w	r2, r4, r1
 8007276:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800727a:	2d13      	cmp	r5, #19
 800727c:	fa44 f505 	asr.w	r5, r4, r5
 8007280:	bf0c      	ite	eq
 8007282:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8007286:	2300      	movne	r3, #0
 8007288:	ea42 0405 	orr.w	r4, r2, r5
 800728c:	4919      	ldr	r1, [pc, #100]	; (80072f4 <rint+0x114>)
 800728e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8007292:	461a      	mov	r2, r3
 8007294:	4623      	mov	r3, r4
 8007296:	e9d6 4500 	ldrd	r4, r5, [r6]
 800729a:	4620      	mov	r0, r4
 800729c:	4629      	mov	r1, r5
 800729e:	f7f9 f815 	bl	80002cc <__adddf3>
 80072a2:	e9cd 0100 	strd	r0, r1, [sp]
 80072a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072aa:	4622      	mov	r2, r4
 80072ac:	462b      	mov	r3, r5
 80072ae:	f7f9 f80b 	bl	80002c8 <__aeabi_dsub>
 80072b2:	e7cf      	b.n	8007254 <rint+0x74>
 80072b4:	2d33      	cmp	r5, #51	; 0x33
 80072b6:	dd08      	ble.n	80072ca <rint+0xea>
 80072b8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80072bc:	d1ca      	bne.n	8007254 <rint+0x74>
 80072be:	ee10 2a10 	vmov	r2, s0
 80072c2:	460b      	mov	r3, r1
 80072c4:	f7f9 f802 	bl	80002cc <__adddf3>
 80072c8:	e7c4      	b.n	8007254 <rint+0x74>
 80072ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80072ce:	f04f 35ff 	mov.w	r5, #4294967295
 80072d2:	40d5      	lsrs	r5, r2
 80072d4:	4228      	tst	r0, r5
 80072d6:	d0bd      	beq.n	8007254 <rint+0x74>
 80072d8:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 80072dc:	ea4f 0155 	mov.w	r1, r5, lsr #1
 80072e0:	bf1f      	itttt	ne
 80072e2:	ea23 0101 	bicne.w	r1, r3, r1
 80072e6:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 80072ea:	fa43 f202 	asrne.w	r2, r3, r2
 80072ee:	ea41 0302 	orrne.w	r3, r1, r2
 80072f2:	e7cb      	b.n	800728c <rint+0xac>
 80072f4:	080083b8 	.word	0x080083b8
 80072f8:	000fffff 	.word	0x000fffff

080072fc <pow>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	ed2d 8b02 	vpush	{d8}
 8007302:	eeb0 8a40 	vmov.f32	s16, s0
 8007306:	eef0 8a60 	vmov.f32	s17, s1
 800730a:	ec55 4b11 	vmov	r4, r5, d1
 800730e:	f000 f867 	bl	80073e0 <__ieee754_pow>
 8007312:	4622      	mov	r2, r4
 8007314:	462b      	mov	r3, r5
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	ec57 6b10 	vmov	r6, r7, d0
 800731e:	f7f9 fc25 	bl	8000b6c <__aeabi_dcmpun>
 8007322:	2800      	cmp	r0, #0
 8007324:	d13b      	bne.n	800739e <pow+0xa2>
 8007326:	ec51 0b18 	vmov	r0, r1, d8
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	f7f9 fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 8007332:	b1b8      	cbz	r0, 8007364 <pow+0x68>
 8007334:	2200      	movs	r2, #0
 8007336:	2300      	movs	r3, #0
 8007338:	4620      	mov	r0, r4
 800733a:	4629      	mov	r1, r5
 800733c:	f7f9 fbe4 	bl	8000b08 <__aeabi_dcmpeq>
 8007340:	2800      	cmp	r0, #0
 8007342:	d146      	bne.n	80073d2 <pow+0xd6>
 8007344:	ec45 4b10 	vmov	d0, r4, r5
 8007348:	f000 fe63 	bl	8008012 <finite>
 800734c:	b338      	cbz	r0, 800739e <pow+0xa2>
 800734e:	2200      	movs	r2, #0
 8007350:	2300      	movs	r3, #0
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	f7f9 fbe1 	bl	8000b1c <__aeabi_dcmplt>
 800735a:	b300      	cbz	r0, 800739e <pow+0xa2>
 800735c:	f7ff fa90 	bl	8006880 <__errno>
 8007360:	2322      	movs	r3, #34	; 0x22
 8007362:	e01b      	b.n	800739c <pow+0xa0>
 8007364:	ec47 6b10 	vmov	d0, r6, r7
 8007368:	f000 fe53 	bl	8008012 <finite>
 800736c:	b9e0      	cbnz	r0, 80073a8 <pow+0xac>
 800736e:	eeb0 0a48 	vmov.f32	s0, s16
 8007372:	eef0 0a68 	vmov.f32	s1, s17
 8007376:	f000 fe4c 	bl	8008012 <finite>
 800737a:	b1a8      	cbz	r0, 80073a8 <pow+0xac>
 800737c:	ec45 4b10 	vmov	d0, r4, r5
 8007380:	f000 fe47 	bl	8008012 <finite>
 8007384:	b180      	cbz	r0, 80073a8 <pow+0xac>
 8007386:	4632      	mov	r2, r6
 8007388:	463b      	mov	r3, r7
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f9 fbed 	bl	8000b6c <__aeabi_dcmpun>
 8007392:	2800      	cmp	r0, #0
 8007394:	d0e2      	beq.n	800735c <pow+0x60>
 8007396:	f7ff fa73 	bl	8006880 <__errno>
 800739a:	2321      	movs	r3, #33	; 0x21
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	ecbd 8b02 	vpop	{d8}
 80073a2:	ec47 6b10 	vmov	d0, r6, r7
 80073a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0f2      	beq.n	800739e <pow+0xa2>
 80073b8:	eeb0 0a48 	vmov.f32	s0, s16
 80073bc:	eef0 0a68 	vmov.f32	s1, s17
 80073c0:	f000 fe27 	bl	8008012 <finite>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d0ea      	beq.n	800739e <pow+0xa2>
 80073c8:	ec45 4b10 	vmov	d0, r4, r5
 80073cc:	f000 fe21 	bl	8008012 <finite>
 80073d0:	e7c3      	b.n	800735a <pow+0x5e>
 80073d2:	4f01      	ldr	r7, [pc, #4]	; (80073d8 <pow+0xdc>)
 80073d4:	2600      	movs	r6, #0
 80073d6:	e7e2      	b.n	800739e <pow+0xa2>
 80073d8:	3ff00000 	.word	0x3ff00000
 80073dc:	00000000 	.word	0x00000000

080073e0 <__ieee754_pow>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	ed2d 8b06 	vpush	{d8-d10}
 80073e8:	b089      	sub	sp, #36	; 0x24
 80073ea:	ed8d 1b00 	vstr	d1, [sp]
 80073ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80073f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80073f6:	ea58 0102 	orrs.w	r1, r8, r2
 80073fa:	ec57 6b10 	vmov	r6, r7, d0
 80073fe:	d115      	bne.n	800742c <__ieee754_pow+0x4c>
 8007400:	19b3      	adds	r3, r6, r6
 8007402:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007406:	4152      	adcs	r2, r2
 8007408:	4299      	cmp	r1, r3
 800740a:	4b89      	ldr	r3, [pc, #548]	; (8007630 <__ieee754_pow+0x250>)
 800740c:	4193      	sbcs	r3, r2
 800740e:	f080 84d2 	bcs.w	8007db6 <__ieee754_pow+0x9d6>
 8007412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f8 ff57 	bl	80002cc <__adddf3>
 800741e:	ec41 0b10 	vmov	d0, r0, r1
 8007422:	b009      	add	sp, #36	; 0x24
 8007424:	ecbd 8b06 	vpop	{d8-d10}
 8007428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742c:	4b81      	ldr	r3, [pc, #516]	; (8007634 <__ieee754_pow+0x254>)
 800742e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007432:	429c      	cmp	r4, r3
 8007434:	ee10 aa10 	vmov	sl, s0
 8007438:	463d      	mov	r5, r7
 800743a:	dc06      	bgt.n	800744a <__ieee754_pow+0x6a>
 800743c:	d101      	bne.n	8007442 <__ieee754_pow+0x62>
 800743e:	2e00      	cmp	r6, #0
 8007440:	d1e7      	bne.n	8007412 <__ieee754_pow+0x32>
 8007442:	4598      	cmp	r8, r3
 8007444:	dc01      	bgt.n	800744a <__ieee754_pow+0x6a>
 8007446:	d10f      	bne.n	8007468 <__ieee754_pow+0x88>
 8007448:	b172      	cbz	r2, 8007468 <__ieee754_pow+0x88>
 800744a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800744e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007452:	ea55 050a 	orrs.w	r5, r5, sl
 8007456:	d1dc      	bne.n	8007412 <__ieee754_pow+0x32>
 8007458:	e9dd 3200 	ldrd	r3, r2, [sp]
 800745c:	18db      	adds	r3, r3, r3
 800745e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007462:	4152      	adcs	r2, r2
 8007464:	429d      	cmp	r5, r3
 8007466:	e7d0      	b.n	800740a <__ieee754_pow+0x2a>
 8007468:	2d00      	cmp	r5, #0
 800746a:	da3b      	bge.n	80074e4 <__ieee754_pow+0x104>
 800746c:	4b72      	ldr	r3, [pc, #456]	; (8007638 <__ieee754_pow+0x258>)
 800746e:	4598      	cmp	r8, r3
 8007470:	dc51      	bgt.n	8007516 <__ieee754_pow+0x136>
 8007472:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007476:	4598      	cmp	r8, r3
 8007478:	f340 84ac 	ble.w	8007dd4 <__ieee754_pow+0x9f4>
 800747c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007480:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007484:	2b14      	cmp	r3, #20
 8007486:	dd0f      	ble.n	80074a8 <__ieee754_pow+0xc8>
 8007488:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800748c:	fa22 f103 	lsr.w	r1, r2, r3
 8007490:	fa01 f303 	lsl.w	r3, r1, r3
 8007494:	4293      	cmp	r3, r2
 8007496:	f040 849d 	bne.w	8007dd4 <__ieee754_pow+0x9f4>
 800749a:	f001 0101 	and.w	r1, r1, #1
 800749e:	f1c1 0302 	rsb	r3, r1, #2
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	b182      	cbz	r2, 80074c8 <__ieee754_pow+0xe8>
 80074a6:	e05f      	b.n	8007568 <__ieee754_pow+0x188>
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d15b      	bne.n	8007564 <__ieee754_pow+0x184>
 80074ac:	f1c3 0314 	rsb	r3, r3, #20
 80074b0:	fa48 f103 	asr.w	r1, r8, r3
 80074b4:	fa01 f303 	lsl.w	r3, r1, r3
 80074b8:	4543      	cmp	r3, r8
 80074ba:	f040 8488 	bne.w	8007dce <__ieee754_pow+0x9ee>
 80074be:	f001 0101 	and.w	r1, r1, #1
 80074c2:	f1c1 0302 	rsb	r3, r1, #2
 80074c6:	9304      	str	r3, [sp, #16]
 80074c8:	4b5c      	ldr	r3, [pc, #368]	; (800763c <__ieee754_pow+0x25c>)
 80074ca:	4598      	cmp	r8, r3
 80074cc:	d132      	bne.n	8007534 <__ieee754_pow+0x154>
 80074ce:	f1b9 0f00 	cmp.w	r9, #0
 80074d2:	f280 8478 	bge.w	8007dc6 <__ieee754_pow+0x9e6>
 80074d6:	4959      	ldr	r1, [pc, #356]	; (800763c <__ieee754_pow+0x25c>)
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	2000      	movs	r0, #0
 80074de:	f7f9 f9d5 	bl	800088c <__aeabi_ddiv>
 80074e2:	e79c      	b.n	800741e <__ieee754_pow+0x3e>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	d13d      	bne.n	8007568 <__ieee754_pow+0x188>
 80074ec:	4b51      	ldr	r3, [pc, #324]	; (8007634 <__ieee754_pow+0x254>)
 80074ee:	4598      	cmp	r8, r3
 80074f0:	d1ea      	bne.n	80074c8 <__ieee754_pow+0xe8>
 80074f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80074f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80074fa:	ea53 030a 	orrs.w	r3, r3, sl
 80074fe:	f000 845a 	beq.w	8007db6 <__ieee754_pow+0x9d6>
 8007502:	4b4f      	ldr	r3, [pc, #316]	; (8007640 <__ieee754_pow+0x260>)
 8007504:	429c      	cmp	r4, r3
 8007506:	dd08      	ble.n	800751a <__ieee754_pow+0x13a>
 8007508:	f1b9 0f00 	cmp.w	r9, #0
 800750c:	f2c0 8457 	blt.w	8007dbe <__ieee754_pow+0x9de>
 8007510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007514:	e783      	b.n	800741e <__ieee754_pow+0x3e>
 8007516:	2302      	movs	r3, #2
 8007518:	e7e5      	b.n	80074e6 <__ieee754_pow+0x106>
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	f04f 0000 	mov.w	r0, #0
 8007522:	f04f 0100 	mov.w	r1, #0
 8007526:	f6bf af7a 	bge.w	800741e <__ieee754_pow+0x3e>
 800752a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800752e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007532:	e774      	b.n	800741e <__ieee754_pow+0x3e>
 8007534:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007538:	d106      	bne.n	8007548 <__ieee754_pow+0x168>
 800753a:	4632      	mov	r2, r6
 800753c:	463b      	mov	r3, r7
 800753e:	4630      	mov	r0, r6
 8007540:	4639      	mov	r1, r7
 8007542:	f7f9 f879 	bl	8000638 <__aeabi_dmul>
 8007546:	e76a      	b.n	800741e <__ieee754_pow+0x3e>
 8007548:	4b3e      	ldr	r3, [pc, #248]	; (8007644 <__ieee754_pow+0x264>)
 800754a:	4599      	cmp	r9, r3
 800754c:	d10c      	bne.n	8007568 <__ieee754_pow+0x188>
 800754e:	2d00      	cmp	r5, #0
 8007550:	db0a      	blt.n	8007568 <__ieee754_pow+0x188>
 8007552:	ec47 6b10 	vmov	d0, r6, r7
 8007556:	b009      	add	sp, #36	; 0x24
 8007558:	ecbd 8b06 	vpop	{d8-d10}
 800755c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	f000 bc6c 	b.w	8007e3c <__ieee754_sqrt>
 8007564:	2300      	movs	r3, #0
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	ec47 6b10 	vmov	d0, r6, r7
 800756c:	f000 fd48 	bl	8008000 <fabs>
 8007570:	ec51 0b10 	vmov	r0, r1, d0
 8007574:	f1ba 0f00 	cmp.w	sl, #0
 8007578:	d129      	bne.n	80075ce <__ieee754_pow+0x1ee>
 800757a:	b124      	cbz	r4, 8007586 <__ieee754_pow+0x1a6>
 800757c:	4b2f      	ldr	r3, [pc, #188]	; (800763c <__ieee754_pow+0x25c>)
 800757e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007582:	429a      	cmp	r2, r3
 8007584:	d123      	bne.n	80075ce <__ieee754_pow+0x1ee>
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	da05      	bge.n	8007598 <__ieee754_pow+0x1b8>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	2000      	movs	r0, #0
 8007592:	492a      	ldr	r1, [pc, #168]	; (800763c <__ieee754_pow+0x25c>)
 8007594:	f7f9 f97a 	bl	800088c <__aeabi_ddiv>
 8007598:	2d00      	cmp	r5, #0
 800759a:	f6bf af40 	bge.w	800741e <__ieee754_pow+0x3e>
 800759e:	9b04      	ldr	r3, [sp, #16]
 80075a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075a8:	4323      	orrs	r3, r4
 80075aa:	d108      	bne.n	80075be <__ieee754_pow+0x1de>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4610      	mov	r0, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	f7f8 fe88 	bl	80002c8 <__aeabi_dsub>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	e78f      	b.n	80074de <__ieee754_pow+0xfe>
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f47f af2c 	bne.w	800741e <__ieee754_pow+0x3e>
 80075c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075ca:	4619      	mov	r1, r3
 80075cc:	e727      	b.n	800741e <__ieee754_pow+0x3e>
 80075ce:	0feb      	lsrs	r3, r5, #31
 80075d0:	3b01      	subs	r3, #1
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	9a06      	ldr	r2, [sp, #24]
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	d102      	bne.n	80075e2 <__ieee754_pow+0x202>
 80075dc:	4632      	mov	r2, r6
 80075de:	463b      	mov	r3, r7
 80075e0:	e7e6      	b.n	80075b0 <__ieee754_pow+0x1d0>
 80075e2:	4b19      	ldr	r3, [pc, #100]	; (8007648 <__ieee754_pow+0x268>)
 80075e4:	4598      	cmp	r8, r3
 80075e6:	f340 80fb 	ble.w	80077e0 <__ieee754_pow+0x400>
 80075ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80075ee:	4598      	cmp	r8, r3
 80075f0:	4b13      	ldr	r3, [pc, #76]	; (8007640 <__ieee754_pow+0x260>)
 80075f2:	dd0c      	ble.n	800760e <__ieee754_pow+0x22e>
 80075f4:	429c      	cmp	r4, r3
 80075f6:	dc0f      	bgt.n	8007618 <__ieee754_pow+0x238>
 80075f8:	f1b9 0f00 	cmp.w	r9, #0
 80075fc:	da0f      	bge.n	800761e <__ieee754_pow+0x23e>
 80075fe:	2000      	movs	r0, #0
 8007600:	b009      	add	sp, #36	; 0x24
 8007602:	ecbd 8b06 	vpop	{d8-d10}
 8007606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	f000 bcf0 	b.w	8007fee <__math_oflow>
 800760e:	429c      	cmp	r4, r3
 8007610:	dbf2      	blt.n	80075f8 <__ieee754_pow+0x218>
 8007612:	4b0a      	ldr	r3, [pc, #40]	; (800763c <__ieee754_pow+0x25c>)
 8007614:	429c      	cmp	r4, r3
 8007616:	dd19      	ble.n	800764c <__ieee754_pow+0x26c>
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	dcef      	bgt.n	80075fe <__ieee754_pow+0x21e>
 800761e:	2000      	movs	r0, #0
 8007620:	b009      	add	sp, #36	; 0x24
 8007622:	ecbd 8b06 	vpop	{d8-d10}
 8007626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	f000 bcd7 	b.w	8007fdc <__math_uflow>
 800762e:	bf00      	nop
 8007630:	fff00000 	.word	0xfff00000
 8007634:	7ff00000 	.word	0x7ff00000
 8007638:	433fffff 	.word	0x433fffff
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	3fefffff 	.word	0x3fefffff
 8007644:	3fe00000 	.word	0x3fe00000
 8007648:	41e00000 	.word	0x41e00000
 800764c:	4b60      	ldr	r3, [pc, #384]	; (80077d0 <__ieee754_pow+0x3f0>)
 800764e:	2200      	movs	r2, #0
 8007650:	f7f8 fe3a 	bl	80002c8 <__aeabi_dsub>
 8007654:	a354      	add	r3, pc, #336	; (adr r3, 80077a8 <__ieee754_pow+0x3c8>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	4604      	mov	r4, r0
 800765c:	460d      	mov	r5, r1
 800765e:	f7f8 ffeb 	bl	8000638 <__aeabi_dmul>
 8007662:	a353      	add	r3, pc, #332	; (adr r3, 80077b0 <__ieee754_pow+0x3d0>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	f7f8 ffe2 	bl	8000638 <__aeabi_dmul>
 8007674:	4b57      	ldr	r3, [pc, #348]	; (80077d4 <__ieee754_pow+0x3f4>)
 8007676:	4682      	mov	sl, r0
 8007678:	468b      	mov	fp, r1
 800767a:	2200      	movs	r2, #0
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f7f8 ffda 	bl	8000638 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	a14b      	add	r1, pc, #300	; (adr r1, 80077b8 <__ieee754_pow+0x3d8>)
 800768a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800768e:	f7f8 fe1b 	bl	80002c8 <__aeabi_dsub>
 8007692:	4622      	mov	r2, r4
 8007694:	462b      	mov	r3, r5
 8007696:	f7f8 ffcf 	bl	8000638 <__aeabi_dmul>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	2000      	movs	r0, #0
 80076a0:	494d      	ldr	r1, [pc, #308]	; (80077d8 <__ieee754_pow+0x3f8>)
 80076a2:	f7f8 fe11 	bl	80002c8 <__aeabi_dsub>
 80076a6:	4622      	mov	r2, r4
 80076a8:	4680      	mov	r8, r0
 80076aa:	4689      	mov	r9, r1
 80076ac:	462b      	mov	r3, r5
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f8 ffc1 	bl	8000638 <__aeabi_dmul>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 ffbb 	bl	8000638 <__aeabi_dmul>
 80076c2:	a33f      	add	r3, pc, #252	; (adr r3, 80077c0 <__ieee754_pow+0x3e0>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f7f8 ffb6 	bl	8000638 <__aeabi_dmul>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4650      	mov	r0, sl
 80076d2:	4659      	mov	r1, fp
 80076d4:	f7f8 fdf8 	bl	80002c8 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4680      	mov	r8, r0
 80076de:	4689      	mov	r9, r1
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f8 fdf2 	bl	80002cc <__adddf3>
 80076e8:	2000      	movs	r0, #0
 80076ea:	4632      	mov	r2, r6
 80076ec:	463b      	mov	r3, r7
 80076ee:	4604      	mov	r4, r0
 80076f0:	460d      	mov	r5, r1
 80076f2:	f7f8 fde9 	bl	80002c8 <__aeabi_dsub>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f8 fde3 	bl	80002c8 <__aeabi_dsub>
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	9a06      	ldr	r2, [sp, #24]
 8007706:	3b01      	subs	r3, #1
 8007708:	4313      	orrs	r3, r2
 800770a:	4682      	mov	sl, r0
 800770c:	468b      	mov	fp, r1
 800770e:	f040 81e7 	bne.w	8007ae0 <__ieee754_pow+0x700>
 8007712:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80077c8 <__ieee754_pow+0x3e8>
 8007716:	eeb0 8a47 	vmov.f32	s16, s14
 800771a:	eef0 8a67 	vmov.f32	s17, s15
 800771e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007722:	2600      	movs	r6, #0
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800772c:	f7f8 fdcc 	bl	80002c8 <__aeabi_dsub>
 8007730:	4622      	mov	r2, r4
 8007732:	462b      	mov	r3, r5
 8007734:	f7f8 ff80 	bl	8000638 <__aeabi_dmul>
 8007738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800773c:	4680      	mov	r8, r0
 800773e:	4689      	mov	r9, r1
 8007740:	4650      	mov	r0, sl
 8007742:	4659      	mov	r1, fp
 8007744:	f7f8 ff78 	bl	8000638 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f8 fdbc 	bl	80002cc <__adddf3>
 8007754:	4632      	mov	r2, r6
 8007756:	463b      	mov	r3, r7
 8007758:	4680      	mov	r8, r0
 800775a:	4689      	mov	r9, r1
 800775c:	4620      	mov	r0, r4
 800775e:	4629      	mov	r1, r5
 8007760:	f7f8 ff6a 	bl	8000638 <__aeabi_dmul>
 8007764:	460b      	mov	r3, r1
 8007766:	4604      	mov	r4, r0
 8007768:	460d      	mov	r5, r1
 800776a:	4602      	mov	r2, r0
 800776c:	4649      	mov	r1, r9
 800776e:	4640      	mov	r0, r8
 8007770:	f7f8 fdac 	bl	80002cc <__adddf3>
 8007774:	4b19      	ldr	r3, [pc, #100]	; (80077dc <__ieee754_pow+0x3fc>)
 8007776:	4299      	cmp	r1, r3
 8007778:	ec45 4b19 	vmov	d9, r4, r5
 800777c:	4606      	mov	r6, r0
 800777e:	460f      	mov	r7, r1
 8007780:	468b      	mov	fp, r1
 8007782:	f340 82f1 	ble.w	8007d68 <__ieee754_pow+0x988>
 8007786:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800778a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800778e:	4303      	orrs	r3, r0
 8007790:	f000 81e4 	beq.w	8007b5c <__ieee754_pow+0x77c>
 8007794:	ec51 0b18 	vmov	r0, r1, d8
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	f7f9 f9be 	bl	8000b1c <__aeabi_dcmplt>
 80077a0:	3800      	subs	r0, #0
 80077a2:	bf18      	it	ne
 80077a4:	2001      	movne	r0, #1
 80077a6:	e72b      	b.n	8007600 <__ieee754_pow+0x220>
 80077a8:	60000000 	.word	0x60000000
 80077ac:	3ff71547 	.word	0x3ff71547
 80077b0:	f85ddf44 	.word	0xf85ddf44
 80077b4:	3e54ae0b 	.word	0x3e54ae0b
 80077b8:	55555555 	.word	0x55555555
 80077bc:	3fd55555 	.word	0x3fd55555
 80077c0:	652b82fe 	.word	0x652b82fe
 80077c4:	3ff71547 	.word	0x3ff71547
 80077c8:	00000000 	.word	0x00000000
 80077cc:	bff00000 	.word	0xbff00000
 80077d0:	3ff00000 	.word	0x3ff00000
 80077d4:	3fd00000 	.word	0x3fd00000
 80077d8:	3fe00000 	.word	0x3fe00000
 80077dc:	408fffff 	.word	0x408fffff
 80077e0:	4bd5      	ldr	r3, [pc, #852]	; (8007b38 <__ieee754_pow+0x758>)
 80077e2:	402b      	ands	r3, r5
 80077e4:	2200      	movs	r2, #0
 80077e6:	b92b      	cbnz	r3, 80077f4 <__ieee754_pow+0x414>
 80077e8:	4bd4      	ldr	r3, [pc, #848]	; (8007b3c <__ieee754_pow+0x75c>)
 80077ea:	f7f8 ff25 	bl	8000638 <__aeabi_dmul>
 80077ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80077f2:	460c      	mov	r4, r1
 80077f4:	1523      	asrs	r3, r4, #20
 80077f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077fa:	4413      	add	r3, r2
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	4bd0      	ldr	r3, [pc, #832]	; (8007b40 <__ieee754_pow+0x760>)
 8007800:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007804:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007808:	429c      	cmp	r4, r3
 800780a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800780e:	dd08      	ble.n	8007822 <__ieee754_pow+0x442>
 8007810:	4bcc      	ldr	r3, [pc, #816]	; (8007b44 <__ieee754_pow+0x764>)
 8007812:	429c      	cmp	r4, r3
 8007814:	f340 8162 	ble.w	8007adc <__ieee754_pow+0x6fc>
 8007818:	9b05      	ldr	r3, [sp, #20]
 800781a:	3301      	adds	r3, #1
 800781c:	9305      	str	r3, [sp, #20]
 800781e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007822:	2400      	movs	r4, #0
 8007824:	00e3      	lsls	r3, r4, #3
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	4bc7      	ldr	r3, [pc, #796]	; (8007b48 <__ieee754_pow+0x768>)
 800782a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800782e:	ed93 7b00 	vldr	d7, [r3]
 8007832:	4629      	mov	r1, r5
 8007834:	ec53 2b17 	vmov	r2, r3, d7
 8007838:	eeb0 9a47 	vmov.f32	s18, s14
 800783c:	eef0 9a67 	vmov.f32	s19, s15
 8007840:	4682      	mov	sl, r0
 8007842:	f7f8 fd41 	bl	80002c8 <__aeabi_dsub>
 8007846:	4652      	mov	r2, sl
 8007848:	4606      	mov	r6, r0
 800784a:	460f      	mov	r7, r1
 800784c:	462b      	mov	r3, r5
 800784e:	ec51 0b19 	vmov	r0, r1, d9
 8007852:	f7f8 fd3b 	bl	80002cc <__adddf3>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	2000      	movs	r0, #0
 800785c:	49bb      	ldr	r1, [pc, #748]	; (8007b4c <__ieee754_pow+0x76c>)
 800785e:	f7f9 f815 	bl	800088c <__aeabi_ddiv>
 8007862:	ec41 0b1a 	vmov	d10, r0, r1
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4630      	mov	r0, r6
 800786c:	4639      	mov	r1, r7
 800786e:	f7f8 fee3 	bl	8000638 <__aeabi_dmul>
 8007872:	2300      	movs	r3, #0
 8007874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007878:	9302      	str	r3, [sp, #8]
 800787a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800787e:	46ab      	mov	fp, r5
 8007880:	106d      	asrs	r5, r5, #1
 8007882:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007886:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800788a:	ec41 0b18 	vmov	d8, r0, r1
 800788e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007892:	2200      	movs	r2, #0
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	4614      	mov	r4, r2
 800789a:	461d      	mov	r5, r3
 800789c:	f7f8 fecc 	bl	8000638 <__aeabi_dmul>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 fd0e 	bl	80002c8 <__aeabi_dsub>
 80078ac:	ec53 2b19 	vmov	r2, r3, d9
 80078b0:	4606      	mov	r6, r0
 80078b2:	460f      	mov	r7, r1
 80078b4:	4620      	mov	r0, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	f7f8 fd06 	bl	80002c8 <__aeabi_dsub>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4650      	mov	r0, sl
 80078c2:	4659      	mov	r1, fp
 80078c4:	f7f8 fd00 	bl	80002c8 <__aeabi_dsub>
 80078c8:	4642      	mov	r2, r8
 80078ca:	464b      	mov	r3, r9
 80078cc:	f7f8 feb4 	bl	8000638 <__aeabi_dmul>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f8 fcf6 	bl	80002c8 <__aeabi_dsub>
 80078dc:	ec53 2b1a 	vmov	r2, r3, d10
 80078e0:	f7f8 feaa 	bl	8000638 <__aeabi_dmul>
 80078e4:	ec53 2b18 	vmov	r2, r3, d8
 80078e8:	ec41 0b19 	vmov	d9, r0, r1
 80078ec:	ec51 0b18 	vmov	r0, r1, d8
 80078f0:	f7f8 fea2 	bl	8000638 <__aeabi_dmul>
 80078f4:	a37c      	add	r3, pc, #496	; (adr r3, 8007ae8 <__ieee754_pow+0x708>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	4604      	mov	r4, r0
 80078fc:	460d      	mov	r5, r1
 80078fe:	f7f8 fe9b 	bl	8000638 <__aeabi_dmul>
 8007902:	a37b      	add	r3, pc, #492	; (adr r3, 8007af0 <__ieee754_pow+0x710>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fce0 	bl	80002cc <__adddf3>
 800790c:	4622      	mov	r2, r4
 800790e:	462b      	mov	r3, r5
 8007910:	f7f8 fe92 	bl	8000638 <__aeabi_dmul>
 8007914:	a378      	add	r3, pc, #480	; (adr r3, 8007af8 <__ieee754_pow+0x718>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fcd7 	bl	80002cc <__adddf3>
 800791e:	4622      	mov	r2, r4
 8007920:	462b      	mov	r3, r5
 8007922:	f7f8 fe89 	bl	8000638 <__aeabi_dmul>
 8007926:	a376      	add	r3, pc, #472	; (adr r3, 8007b00 <__ieee754_pow+0x720>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f7f8 fcce 	bl	80002cc <__adddf3>
 8007930:	4622      	mov	r2, r4
 8007932:	462b      	mov	r3, r5
 8007934:	f7f8 fe80 	bl	8000638 <__aeabi_dmul>
 8007938:	a373      	add	r3, pc, #460	; (adr r3, 8007b08 <__ieee754_pow+0x728>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f7f8 fcc5 	bl	80002cc <__adddf3>
 8007942:	4622      	mov	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	f7f8 fe77 	bl	8000638 <__aeabi_dmul>
 800794a:	a371      	add	r3, pc, #452	; (adr r3, 8007b10 <__ieee754_pow+0x730>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f7f8 fcbc 	bl	80002cc <__adddf3>
 8007954:	4622      	mov	r2, r4
 8007956:	4606      	mov	r6, r0
 8007958:	460f      	mov	r7, r1
 800795a:	462b      	mov	r3, r5
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fe6a 	bl	8000638 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	f7f8 fe64 	bl	8000638 <__aeabi_dmul>
 8007970:	4642      	mov	r2, r8
 8007972:	4604      	mov	r4, r0
 8007974:	460d      	mov	r5, r1
 8007976:	464b      	mov	r3, r9
 8007978:	ec51 0b18 	vmov	r0, r1, d8
 800797c:	f7f8 fca6 	bl	80002cc <__adddf3>
 8007980:	ec53 2b19 	vmov	r2, r3, d9
 8007984:	f7f8 fe58 	bl	8000638 <__aeabi_dmul>
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	f7f8 fc9e 	bl	80002cc <__adddf3>
 8007990:	4642      	mov	r2, r8
 8007992:	4682      	mov	sl, r0
 8007994:	468b      	mov	fp, r1
 8007996:	464b      	mov	r3, r9
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	f7f8 fe4c 	bl	8000638 <__aeabi_dmul>
 80079a0:	4b6b      	ldr	r3, [pc, #428]	; (8007b50 <__ieee754_pow+0x770>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	4606      	mov	r6, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	f7f8 fc90 	bl	80002cc <__adddf3>
 80079ac:	4652      	mov	r2, sl
 80079ae:	465b      	mov	r3, fp
 80079b0:	f7f8 fc8c 	bl	80002cc <__adddf3>
 80079b4:	2000      	movs	r0, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f8 fe39 	bl	8000638 <__aeabi_dmul>
 80079c6:	4b62      	ldr	r3, [pc, #392]	; (8007b50 <__ieee754_pow+0x770>)
 80079c8:	4680      	mov	r8, r0
 80079ca:	4689      	mov	r9, r1
 80079cc:	2200      	movs	r2, #0
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 fc79 	bl	80002c8 <__aeabi_dsub>
 80079d6:	4632      	mov	r2, r6
 80079d8:	463b      	mov	r3, r7
 80079da:	f7f8 fc75 	bl	80002c8 <__aeabi_dsub>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	f7f8 fc6f 	bl	80002c8 <__aeabi_dsub>
 80079ea:	ec53 2b18 	vmov	r2, r3, d8
 80079ee:	f7f8 fe23 	bl	8000638 <__aeabi_dmul>
 80079f2:	4622      	mov	r2, r4
 80079f4:	4606      	mov	r6, r0
 80079f6:	460f      	mov	r7, r1
 80079f8:	462b      	mov	r3, r5
 80079fa:	ec51 0b19 	vmov	r0, r1, d9
 80079fe:	f7f8 fe1b 	bl	8000638 <__aeabi_dmul>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4630      	mov	r0, r6
 8007a08:	4639      	mov	r1, r7
 8007a0a:	f7f8 fc5f 	bl	80002cc <__adddf3>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460f      	mov	r7, r1
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f8 fc57 	bl	80002cc <__adddf3>
 8007a1e:	a33e      	add	r3, pc, #248	; (adr r3, 8007b18 <__ieee754_pow+0x738>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	2000      	movs	r0, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	f7f8 fe05 	bl	8000638 <__aeabi_dmul>
 8007a2e:	4642      	mov	r2, r8
 8007a30:	ec41 0b18 	vmov	d8, r0, r1
 8007a34:	464b      	mov	r3, r9
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 fc45 	bl	80002c8 <__aeabi_dsub>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4630      	mov	r0, r6
 8007a44:	4639      	mov	r1, r7
 8007a46:	f7f8 fc3f 	bl	80002c8 <__aeabi_dsub>
 8007a4a:	a335      	add	r3, pc, #212	; (adr r3, 8007b20 <__ieee754_pow+0x740>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7f8 fdf2 	bl	8000638 <__aeabi_dmul>
 8007a54:	a334      	add	r3, pc, #208	; (adr r3, 8007b28 <__ieee754_pow+0x748>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460f      	mov	r7, r1
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f8 fde9 	bl	8000638 <__aeabi_dmul>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f8 fc2d 	bl	80002cc <__adddf3>
 8007a72:	9a07      	ldr	r2, [sp, #28]
 8007a74:	4b37      	ldr	r3, [pc, #220]	; (8007b54 <__ieee754_pow+0x774>)
 8007a76:	4413      	add	r3, r2
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 fc26 	bl	80002cc <__adddf3>
 8007a80:	4682      	mov	sl, r0
 8007a82:	9805      	ldr	r0, [sp, #20]
 8007a84:	468b      	mov	fp, r1
 8007a86:	f7f8 fd6d 	bl	8000564 <__aeabi_i2d>
 8007a8a:	9a07      	ldr	r2, [sp, #28]
 8007a8c:	4b32      	ldr	r3, [pc, #200]	; (8007b58 <__ieee754_pow+0x778>)
 8007a8e:	4413      	add	r3, r2
 8007a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
 8007a98:	4652      	mov	r2, sl
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	ec51 0b18 	vmov	r0, r1, d8
 8007aa0:	f7f8 fc14 	bl	80002cc <__adddf3>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	f7f8 fc10 	bl	80002cc <__adddf3>
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	f7f8 fc0c 	bl	80002cc <__adddf3>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	4632      	mov	r2, r6
 8007ab8:	463b      	mov	r3, r7
 8007aba:	4604      	mov	r4, r0
 8007abc:	460d      	mov	r5, r1
 8007abe:	f7f8 fc03 	bl	80002c8 <__aeabi_dsub>
 8007ac2:	4642      	mov	r2, r8
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	f7f8 fbff 	bl	80002c8 <__aeabi_dsub>
 8007aca:	ec53 2b18 	vmov	r2, r3, d8
 8007ace:	f7f8 fbfb 	bl	80002c8 <__aeabi_dsub>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	4659      	mov	r1, fp
 8007ada:	e610      	b.n	80076fe <__ieee754_pow+0x31e>
 8007adc:	2401      	movs	r4, #1
 8007ade:	e6a1      	b.n	8007824 <__ieee754_pow+0x444>
 8007ae0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007b30 <__ieee754_pow+0x750>
 8007ae4:	e617      	b.n	8007716 <__ieee754_pow+0x336>
 8007ae6:	bf00      	nop
 8007ae8:	4a454eef 	.word	0x4a454eef
 8007aec:	3fca7e28 	.word	0x3fca7e28
 8007af0:	93c9db65 	.word	0x93c9db65
 8007af4:	3fcd864a 	.word	0x3fcd864a
 8007af8:	a91d4101 	.word	0xa91d4101
 8007afc:	3fd17460 	.word	0x3fd17460
 8007b00:	518f264d 	.word	0x518f264d
 8007b04:	3fd55555 	.word	0x3fd55555
 8007b08:	db6fabff 	.word	0xdb6fabff
 8007b0c:	3fdb6db6 	.word	0x3fdb6db6
 8007b10:	33333303 	.word	0x33333303
 8007b14:	3fe33333 	.word	0x3fe33333
 8007b18:	e0000000 	.word	0xe0000000
 8007b1c:	3feec709 	.word	0x3feec709
 8007b20:	dc3a03fd 	.word	0xdc3a03fd
 8007b24:	3feec709 	.word	0x3feec709
 8007b28:	145b01f5 	.word	0x145b01f5
 8007b2c:	be3e2fe0 	.word	0xbe3e2fe0
 8007b30:	00000000 	.word	0x00000000
 8007b34:	3ff00000 	.word	0x3ff00000
 8007b38:	7ff00000 	.word	0x7ff00000
 8007b3c:	43400000 	.word	0x43400000
 8007b40:	0003988e 	.word	0x0003988e
 8007b44:	000bb679 	.word	0x000bb679
 8007b48:	080083c8 	.word	0x080083c8
 8007b4c:	3ff00000 	.word	0x3ff00000
 8007b50:	40080000 	.word	0x40080000
 8007b54:	080083e8 	.word	0x080083e8
 8007b58:	080083d8 	.word	0x080083d8
 8007b5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007e34 <__ieee754_pow+0xa54>)
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	4640      	mov	r0, r8
 8007b64:	4649      	mov	r1, r9
 8007b66:	f7f8 fbb1 	bl	80002cc <__adddf3>
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	ec41 0b1a 	vmov	d10, r0, r1
 8007b70:	462b      	mov	r3, r5
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 fba7 	bl	80002c8 <__aeabi_dsub>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	ec51 0b1a 	vmov	r0, r1, d10
 8007b82:	f7f8 ffe9 	bl	8000b58 <__aeabi_dcmpgt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f47f ae04 	bne.w	8007794 <__ieee754_pow+0x3b4>
 8007b8c:	4aa4      	ldr	r2, [pc, #656]	; (8007e20 <__ieee754_pow+0xa40>)
 8007b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b92:	4293      	cmp	r3, r2
 8007b94:	f340 8108 	ble.w	8007da8 <__ieee754_pow+0x9c8>
 8007b98:	151b      	asrs	r3, r3, #20
 8007b9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007b9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ba2:	fa4a f303 	asr.w	r3, sl, r3
 8007ba6:	445b      	add	r3, fp
 8007ba8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007bac:	4e9d      	ldr	r6, [pc, #628]	; (8007e24 <__ieee754_pow+0xa44>)
 8007bae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007bb2:	4116      	asrs	r6, r2
 8007bb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007bb8:	2000      	movs	r0, #0
 8007bba:	ea23 0106 	bic.w	r1, r3, r6
 8007bbe:	f1c2 0214 	rsb	r2, r2, #20
 8007bc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007bc6:	fa4a fa02 	asr.w	sl, sl, r2
 8007bca:	f1bb 0f00 	cmp.w	fp, #0
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	bfb8      	it	lt
 8007bd8:	f1ca 0a00 	rsblt	sl, sl, #0
 8007bdc:	f7f8 fb74 	bl	80002c8 <__aeabi_dsub>
 8007be0:	ec41 0b19 	vmov	d9, r0, r1
 8007be4:	4642      	mov	r2, r8
 8007be6:	464b      	mov	r3, r9
 8007be8:	ec51 0b19 	vmov	r0, r1, d9
 8007bec:	f7f8 fb6e 	bl	80002cc <__adddf3>
 8007bf0:	a37b      	add	r3, pc, #492	; (adr r3, 8007de0 <__ieee754_pow+0xa00>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	f7f8 fd1c 	bl	8000638 <__aeabi_dmul>
 8007c00:	ec53 2b19 	vmov	r2, r3, d9
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	f7f8 fb5c 	bl	80002c8 <__aeabi_dsub>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4640      	mov	r0, r8
 8007c16:	4649      	mov	r1, r9
 8007c18:	f7f8 fb56 	bl	80002c8 <__aeabi_dsub>
 8007c1c:	a372      	add	r3, pc, #456	; (adr r3, 8007de8 <__ieee754_pow+0xa08>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fd09 	bl	8000638 <__aeabi_dmul>
 8007c26:	a372      	add	r3, pc, #456	; (adr r3, 8007df0 <__ieee754_pow+0xa10>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4689      	mov	r9, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fd00 	bl	8000638 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 fb44 	bl	80002cc <__adddf3>
 8007c44:	4604      	mov	r4, r0
 8007c46:	460d      	mov	r5, r1
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 fb3c 	bl	80002cc <__adddf3>
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	4680      	mov	r8, r0
 8007c5a:	4689      	mov	r9, r1
 8007c5c:	f7f8 fb34 	bl	80002c8 <__aeabi_dsub>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f7f8 fb2e 	bl	80002c8 <__aeabi_dsub>
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	4606      	mov	r6, r0
 8007c70:	460f      	mov	r7, r1
 8007c72:	464b      	mov	r3, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	4649      	mov	r1, r9
 8007c78:	f7f8 fcde 	bl	8000638 <__aeabi_dmul>
 8007c7c:	a35e      	add	r3, pc, #376	; (adr r3, 8007df8 <__ieee754_pow+0xa18>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	4604      	mov	r4, r0
 8007c84:	460d      	mov	r5, r1
 8007c86:	f7f8 fcd7 	bl	8000638 <__aeabi_dmul>
 8007c8a:	a35d      	add	r3, pc, #372	; (adr r3, 8007e00 <__ieee754_pow+0xa20>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f7f8 fb1a 	bl	80002c8 <__aeabi_dsub>
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	f7f8 fcce 	bl	8000638 <__aeabi_dmul>
 8007c9c:	a35a      	add	r3, pc, #360	; (adr r3, 8007e08 <__ieee754_pow+0xa28>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fb13 	bl	80002cc <__adddf3>
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	f7f8 fcc5 	bl	8000638 <__aeabi_dmul>
 8007cae:	a358      	add	r3, pc, #352	; (adr r3, 8007e10 <__ieee754_pow+0xa30>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fb08 	bl	80002c8 <__aeabi_dsub>
 8007cb8:	4622      	mov	r2, r4
 8007cba:	462b      	mov	r3, r5
 8007cbc:	f7f8 fcbc 	bl	8000638 <__aeabi_dmul>
 8007cc0:	a355      	add	r3, pc, #340	; (adr r3, 8007e18 <__ieee754_pow+0xa38>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fb01 	bl	80002cc <__adddf3>
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	f7f8 fcb3 	bl	8000638 <__aeabi_dmul>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 faf5 	bl	80002c8 <__aeabi_dsub>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fca5 	bl	8000638 <__aeabi_dmul>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	ec41 0b19 	vmov	d9, r0, r1
 8007cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f7f8 fae4 	bl	80002c8 <__aeabi_dsub>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	ec51 0b19 	vmov	r0, r1, d9
 8007d08:	f7f8 fdc0 	bl	800088c <__aeabi_ddiv>
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	4604      	mov	r4, r0
 8007d10:	460d      	mov	r5, r1
 8007d12:	463b      	mov	r3, r7
 8007d14:	4640      	mov	r0, r8
 8007d16:	4649      	mov	r1, r9
 8007d18:	f7f8 fc8e 	bl	8000638 <__aeabi_dmul>
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	463b      	mov	r3, r7
 8007d20:	f7f8 fad4 	bl	80002cc <__adddf3>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4620      	mov	r0, r4
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	f7f8 facc 	bl	80002c8 <__aeabi_dsub>
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	f7f8 fac8 	bl	80002c8 <__aeabi_dsub>
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	493a      	ldr	r1, [pc, #232]	; (8007e28 <__ieee754_pow+0xa48>)
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7f8 fac2 	bl	80002c8 <__aeabi_dsub>
 8007d44:	ec41 0b10 	vmov	d0, r0, r1
 8007d48:	ee10 3a90 	vmov	r3, s1
 8007d4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d54:	da2b      	bge.n	8007dae <__ieee754_pow+0x9ce>
 8007d56:	4650      	mov	r0, sl
 8007d58:	f000 f966 	bl	8008028 <scalbn>
 8007d5c:	ec51 0b10 	vmov	r0, r1, d0
 8007d60:	ec53 2b18 	vmov	r2, r3, d8
 8007d64:	f7ff bbed 	b.w	8007542 <__ieee754_pow+0x162>
 8007d68:	4b30      	ldr	r3, [pc, #192]	; (8007e2c <__ieee754_pow+0xa4c>)
 8007d6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	f77f af0c 	ble.w	8007b8c <__ieee754_pow+0x7ac>
 8007d74:	4b2e      	ldr	r3, [pc, #184]	; (8007e30 <__ieee754_pow+0xa50>)
 8007d76:	440b      	add	r3, r1
 8007d78:	4303      	orrs	r3, r0
 8007d7a:	d009      	beq.n	8007d90 <__ieee754_pow+0x9b0>
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	2200      	movs	r2, #0
 8007d82:	2300      	movs	r3, #0
 8007d84:	f7f8 feca 	bl	8000b1c <__aeabi_dcmplt>
 8007d88:	3800      	subs	r0, #0
 8007d8a:	bf18      	it	ne
 8007d8c:	2001      	movne	r0, #1
 8007d8e:	e447      	b.n	8007620 <__ieee754_pow+0x240>
 8007d90:	4622      	mov	r2, r4
 8007d92:	462b      	mov	r3, r5
 8007d94:	f7f8 fa98 	bl	80002c8 <__aeabi_dsub>
 8007d98:	4642      	mov	r2, r8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	f7f8 fed2 	bl	8000b44 <__aeabi_dcmpge>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f43f aef3 	beq.w	8007b8c <__ieee754_pow+0x7ac>
 8007da6:	e7e9      	b.n	8007d7c <__ieee754_pow+0x99c>
 8007da8:	f04f 0a00 	mov.w	sl, #0
 8007dac:	e71a      	b.n	8007be4 <__ieee754_pow+0x804>
 8007dae:	ec51 0b10 	vmov	r0, r1, d0
 8007db2:	4619      	mov	r1, r3
 8007db4:	e7d4      	b.n	8007d60 <__ieee754_pow+0x980>
 8007db6:	491c      	ldr	r1, [pc, #112]	; (8007e28 <__ieee754_pow+0xa48>)
 8007db8:	2000      	movs	r0, #0
 8007dba:	f7ff bb30 	b.w	800741e <__ieee754_pow+0x3e>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	f7ff bb2c 	b.w	800741e <__ieee754_pow+0x3e>
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7ff bb28 	b.w	800741e <__ieee754_pow+0x3e>
 8007dce:	9204      	str	r2, [sp, #16]
 8007dd0:	f7ff bb7a 	b.w	80074c8 <__ieee754_pow+0xe8>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f7ff bb64 	b.w	80074a2 <__ieee754_pow+0xc2>
 8007dda:	bf00      	nop
 8007ddc:	f3af 8000 	nop.w
 8007de0:	00000000 	.word	0x00000000
 8007de4:	3fe62e43 	.word	0x3fe62e43
 8007de8:	fefa39ef 	.word	0xfefa39ef
 8007dec:	3fe62e42 	.word	0x3fe62e42
 8007df0:	0ca86c39 	.word	0x0ca86c39
 8007df4:	be205c61 	.word	0xbe205c61
 8007df8:	72bea4d0 	.word	0x72bea4d0
 8007dfc:	3e663769 	.word	0x3e663769
 8007e00:	c5d26bf1 	.word	0xc5d26bf1
 8007e04:	3ebbbd41 	.word	0x3ebbbd41
 8007e08:	af25de2c 	.word	0xaf25de2c
 8007e0c:	3f11566a 	.word	0x3f11566a
 8007e10:	16bebd93 	.word	0x16bebd93
 8007e14:	3f66c16c 	.word	0x3f66c16c
 8007e18:	5555553e 	.word	0x5555553e
 8007e1c:	3fc55555 	.word	0x3fc55555
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	000fffff 	.word	0x000fffff
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	4090cbff 	.word	0x4090cbff
 8007e30:	3f6f3400 	.word	0x3f6f3400
 8007e34:	652b82fe 	.word	0x652b82fe
 8007e38:	3c971547 	.word	0x3c971547

08007e3c <__ieee754_sqrt>:
 8007e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e40:	ec55 4b10 	vmov	r4, r5, d0
 8007e44:	4e55      	ldr	r6, [pc, #340]	; (8007f9c <__ieee754_sqrt+0x160>)
 8007e46:	43ae      	bics	r6, r5
 8007e48:	ee10 0a10 	vmov	r0, s0
 8007e4c:	ee10 3a10 	vmov	r3, s0
 8007e50:	462a      	mov	r2, r5
 8007e52:	4629      	mov	r1, r5
 8007e54:	d110      	bne.n	8007e78 <__ieee754_sqrt+0x3c>
 8007e56:	ee10 2a10 	vmov	r2, s0
 8007e5a:	462b      	mov	r3, r5
 8007e5c:	f7f8 fbec 	bl	8000638 <__aeabi_dmul>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fa30 	bl	80002cc <__adddf3>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	ec45 4b10 	vmov	d0, r4, r5
 8007e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	dc10      	bgt.n	8007e9e <__ieee754_sqrt+0x62>
 8007e7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e80:	4330      	orrs	r0, r6
 8007e82:	d0f5      	beq.n	8007e70 <__ieee754_sqrt+0x34>
 8007e84:	b15d      	cbz	r5, 8007e9e <__ieee754_sqrt+0x62>
 8007e86:	ee10 2a10 	vmov	r2, s0
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	ee10 0a10 	vmov	r0, s0
 8007e90:	f7f8 fa1a 	bl	80002c8 <__aeabi_dsub>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	f7f8 fcf8 	bl	800088c <__aeabi_ddiv>
 8007e9c:	e7e6      	b.n	8007e6c <__ieee754_sqrt+0x30>
 8007e9e:	1512      	asrs	r2, r2, #20
 8007ea0:	d074      	beq.n	8007f8c <__ieee754_sqrt+0x150>
 8007ea2:	07d4      	lsls	r4, r2, #31
 8007ea4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007ea8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007eac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007eb0:	bf5e      	ittt	pl
 8007eb2:	0fda      	lsrpl	r2, r3, #31
 8007eb4:	005b      	lslpl	r3, r3, #1
 8007eb6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007eba:	2400      	movs	r4, #0
 8007ebc:	0fda      	lsrs	r2, r3, #31
 8007ebe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007ec2:	107f      	asrs	r7, r7, #1
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	2516      	movs	r5, #22
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007ece:	1886      	adds	r6, r0, r2
 8007ed0:	428e      	cmp	r6, r1
 8007ed2:	bfde      	ittt	le
 8007ed4:	1b89      	suble	r1, r1, r6
 8007ed6:	18b0      	addle	r0, r6, r2
 8007ed8:	18a4      	addle	r4, r4, r2
 8007eda:	0049      	lsls	r1, r1, #1
 8007edc:	3d01      	subs	r5, #1
 8007ede:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007ee2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007ee6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007eea:	d1f0      	bne.n	8007ece <__ieee754_sqrt+0x92>
 8007eec:	462a      	mov	r2, r5
 8007eee:	f04f 0e20 	mov.w	lr, #32
 8007ef2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007ef6:	4281      	cmp	r1, r0
 8007ef8:	eb06 0c05 	add.w	ip, r6, r5
 8007efc:	dc02      	bgt.n	8007f04 <__ieee754_sqrt+0xc8>
 8007efe:	d113      	bne.n	8007f28 <__ieee754_sqrt+0xec>
 8007f00:	459c      	cmp	ip, r3
 8007f02:	d811      	bhi.n	8007f28 <__ieee754_sqrt+0xec>
 8007f04:	f1bc 0f00 	cmp.w	ip, #0
 8007f08:	eb0c 0506 	add.w	r5, ip, r6
 8007f0c:	da43      	bge.n	8007f96 <__ieee754_sqrt+0x15a>
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	db41      	blt.n	8007f96 <__ieee754_sqrt+0x15a>
 8007f12:	f100 0801 	add.w	r8, r0, #1
 8007f16:	1a09      	subs	r1, r1, r0
 8007f18:	459c      	cmp	ip, r3
 8007f1a:	bf88      	it	hi
 8007f1c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007f20:	eba3 030c 	sub.w	r3, r3, ip
 8007f24:	4432      	add	r2, r6
 8007f26:	4640      	mov	r0, r8
 8007f28:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007f2c:	f1be 0e01 	subs.w	lr, lr, #1
 8007f30:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007f34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f3c:	d1db      	bne.n	8007ef6 <__ieee754_sqrt+0xba>
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	d006      	beq.n	8007f50 <__ieee754_sqrt+0x114>
 8007f42:	1c50      	adds	r0, r2, #1
 8007f44:	bf13      	iteet	ne
 8007f46:	3201      	addne	r2, #1
 8007f48:	3401      	addeq	r4, #1
 8007f4a:	4672      	moveq	r2, lr
 8007f4c:	f022 0201 	bicne.w	r2, r2, #1
 8007f50:	1063      	asrs	r3, r4, #1
 8007f52:	0852      	lsrs	r2, r2, #1
 8007f54:	07e1      	lsls	r1, r4, #31
 8007f56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007f5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007f5e:	bf48      	it	mi
 8007f60:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007f64:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007f68:	4614      	mov	r4, r2
 8007f6a:	e781      	b.n	8007e70 <__ieee754_sqrt+0x34>
 8007f6c:	0ad9      	lsrs	r1, r3, #11
 8007f6e:	3815      	subs	r0, #21
 8007f70:	055b      	lsls	r3, r3, #21
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d0fa      	beq.n	8007f6c <__ieee754_sqrt+0x130>
 8007f76:	02cd      	lsls	r5, r1, #11
 8007f78:	d50a      	bpl.n	8007f90 <__ieee754_sqrt+0x154>
 8007f7a:	f1c2 0420 	rsb	r4, r2, #32
 8007f7e:	fa23 f404 	lsr.w	r4, r3, r4
 8007f82:	1e55      	subs	r5, r2, #1
 8007f84:	4093      	lsls	r3, r2
 8007f86:	4321      	orrs	r1, r4
 8007f88:	1b42      	subs	r2, r0, r5
 8007f8a:	e78a      	b.n	8007ea2 <__ieee754_sqrt+0x66>
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	e7f0      	b.n	8007f72 <__ieee754_sqrt+0x136>
 8007f90:	0049      	lsls	r1, r1, #1
 8007f92:	3201      	adds	r2, #1
 8007f94:	e7ef      	b.n	8007f76 <__ieee754_sqrt+0x13a>
 8007f96:	4680      	mov	r8, r0
 8007f98:	e7bd      	b.n	8007f16 <__ieee754_sqrt+0xda>
 8007f9a:	bf00      	nop
 8007f9c:	7ff00000 	.word	0x7ff00000

08007fa0 <with_errno>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	460d      	mov	r5, r1
 8007fa6:	4616      	mov	r6, r2
 8007fa8:	f7fe fc6a 	bl	8006880 <__errno>
 8007fac:	4629      	mov	r1, r5
 8007fae:	6006      	str	r6, [r0, #0]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}

08007fb4 <xflow>:
 8007fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fb6:	4614      	mov	r4, r2
 8007fb8:	461d      	mov	r5, r3
 8007fba:	b108      	cbz	r0, 8007fc0 <xflow+0xc>
 8007fbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007fc0:	e9cd 2300 	strd	r2, r3, [sp]
 8007fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 fb34 	bl	8000638 <__aeabi_dmul>
 8007fd0:	2222      	movs	r2, #34	; 0x22
 8007fd2:	b003      	add	sp, #12
 8007fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fd8:	f7ff bfe2 	b.w	8007fa0 <with_errno>

08007fdc <__math_uflow>:
 8007fdc:	b508      	push	{r3, lr}
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fe4:	f7ff ffe6 	bl	8007fb4 <xflow>
 8007fe8:	ec41 0b10 	vmov	d0, r0, r1
 8007fec:	bd08      	pop	{r3, pc}

08007fee <__math_oflow>:
 8007fee:	b508      	push	{r3, lr}
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007ff6:	f7ff ffdd 	bl	8007fb4 <xflow>
 8007ffa:	ec41 0b10 	vmov	d0, r0, r1
 8007ffe:	bd08      	pop	{r3, pc}

08008000 <fabs>:
 8008000:	ec51 0b10 	vmov	r0, r1, d0
 8008004:	ee10 2a10 	vmov	r2, s0
 8008008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800800c:	ec43 2b10 	vmov	d0, r2, r3
 8008010:	4770      	bx	lr

08008012 <finite>:
 8008012:	b082      	sub	sp, #8
 8008014:	ed8d 0b00 	vstr	d0, [sp]
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800801e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008022:	0fc0      	lsrs	r0, r0, #31
 8008024:	b002      	add	sp, #8
 8008026:	4770      	bx	lr

08008028 <scalbn>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	ec55 4b10 	vmov	r4, r5, d0
 800802e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008032:	4606      	mov	r6, r0
 8008034:	462b      	mov	r3, r5
 8008036:	b99a      	cbnz	r2, 8008060 <scalbn+0x38>
 8008038:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800803c:	4323      	orrs	r3, r4
 800803e:	d036      	beq.n	80080ae <scalbn+0x86>
 8008040:	4b39      	ldr	r3, [pc, #228]	; (8008128 <scalbn+0x100>)
 8008042:	4629      	mov	r1, r5
 8008044:	ee10 0a10 	vmov	r0, s0
 8008048:	2200      	movs	r2, #0
 800804a:	f7f8 faf5 	bl	8000638 <__aeabi_dmul>
 800804e:	4b37      	ldr	r3, [pc, #220]	; (800812c <scalbn+0x104>)
 8008050:	429e      	cmp	r6, r3
 8008052:	4604      	mov	r4, r0
 8008054:	460d      	mov	r5, r1
 8008056:	da10      	bge.n	800807a <scalbn+0x52>
 8008058:	a32b      	add	r3, pc, #172	; (adr r3, 8008108 <scalbn+0xe0>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	e03a      	b.n	80080d6 <scalbn+0xae>
 8008060:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008064:	428a      	cmp	r2, r1
 8008066:	d10c      	bne.n	8008082 <scalbn+0x5a>
 8008068:	ee10 2a10 	vmov	r2, s0
 800806c:	4620      	mov	r0, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 f92c 	bl	80002cc <__adddf3>
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	e019      	b.n	80080ae <scalbn+0x86>
 800807a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800807e:	460b      	mov	r3, r1
 8008080:	3a36      	subs	r2, #54	; 0x36
 8008082:	4432      	add	r2, r6
 8008084:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008088:	428a      	cmp	r2, r1
 800808a:	dd08      	ble.n	800809e <scalbn+0x76>
 800808c:	2d00      	cmp	r5, #0
 800808e:	a120      	add	r1, pc, #128	; (adr r1, 8008110 <scalbn+0xe8>)
 8008090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008094:	da1c      	bge.n	80080d0 <scalbn+0xa8>
 8008096:	a120      	add	r1, pc, #128	; (adr r1, 8008118 <scalbn+0xf0>)
 8008098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800809c:	e018      	b.n	80080d0 <scalbn+0xa8>
 800809e:	2a00      	cmp	r2, #0
 80080a0:	dd08      	ble.n	80080b4 <scalbn+0x8c>
 80080a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080ae:	ec45 4b10 	vmov	d0, r4, r5
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80080b8:	da19      	bge.n	80080ee <scalbn+0xc6>
 80080ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080be:	429e      	cmp	r6, r3
 80080c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80080c4:	dd0a      	ble.n	80080dc <scalbn+0xb4>
 80080c6:	a112      	add	r1, pc, #72	; (adr r1, 8008110 <scalbn+0xe8>)
 80080c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e2      	bne.n	8008096 <scalbn+0x6e>
 80080d0:	a30f      	add	r3, pc, #60	; (adr r3, 8008110 <scalbn+0xe8>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 faaf 	bl	8000638 <__aeabi_dmul>
 80080da:	e7cb      	b.n	8008074 <scalbn+0x4c>
 80080dc:	a10a      	add	r1, pc, #40	; (adr r1, 8008108 <scalbn+0xe0>)
 80080de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0b8      	beq.n	8008058 <scalbn+0x30>
 80080e6:	a10e      	add	r1, pc, #56	; (adr r1, 8008120 <scalbn+0xf8>)
 80080e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ec:	e7b4      	b.n	8008058 <scalbn+0x30>
 80080ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080f2:	3236      	adds	r2, #54	; 0x36
 80080f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80080fc:	4620      	mov	r0, r4
 80080fe:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <scalbn+0x108>)
 8008100:	2200      	movs	r2, #0
 8008102:	e7e8      	b.n	80080d6 <scalbn+0xae>
 8008104:	f3af 8000 	nop.w
 8008108:	c2f8f359 	.word	0xc2f8f359
 800810c:	01a56e1f 	.word	0x01a56e1f
 8008110:	8800759c 	.word	0x8800759c
 8008114:	7e37e43c 	.word	0x7e37e43c
 8008118:	8800759c 	.word	0x8800759c
 800811c:	fe37e43c 	.word	0xfe37e43c
 8008120:	c2f8f359 	.word	0xc2f8f359
 8008124:	81a56e1f 	.word	0x81a56e1f
 8008128:	43500000 	.word	0x43500000
 800812c:	ffff3cb0 	.word	0xffff3cb0
 8008130:	3c900000 	.word	0x3c900000

08008134 <_init>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	bf00      	nop
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr

08008140 <_fini>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr
