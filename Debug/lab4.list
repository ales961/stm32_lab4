
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08008418  08008418  00018418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f0  080086f0  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f8  080086f8  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08008700  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          000002b0  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c31  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003407  00000000  00000000  00034d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00038160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  000393d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002636f  00000000  00000000  0003a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018367  00000000  00000000  0006083f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5a0  00000000  00000000  00078ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155146  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000543c  00000000  00000000  00155198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080083fc 	.word	0x080083fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	080083fc 	.word	0x080083fc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8000ee6:	200c      	movs	r0, #12
 8000ee8:	f005 fe5a 	bl	8006ba0 <malloc>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 fe54 	bl	8006ba0 <malloc>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 f896 	bl	8001038 <bufferClear>
    return buffer;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	889a      	ldrh	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	88db      	ldrh	r3, [r3, #6]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d21f      	bcs.n	8000f6e <bufferPush+0x58>
        disableInt();
 8000f2e:	f000 f8a9 	bl	8001084 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	88d2      	ldrh	r2, [r2, #6]
 8000f4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f4e:	fb01 f202 	mul.w	r2, r1, r2
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000f66:	f000 f8a1 	bl	80010ac <enableInt>
        return 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <bufferPush+0x5a>
    } else
        return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	82fb      	strh	r3, [r7, #22]
 8000f8a:	e00f      	b.n	8000fac <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000f8c:	8afb      	ldrh	r3, [r7, #22]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffbd 	bl	8000f16 <bufferPush>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <bufferPushValues+0x2e>
            return pushed;
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	e007      	b.n	8000fb6 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	82fb      	strh	r3, [r7, #22]
 8000fac:	8afa      	ldrh	r2, [r7, #22]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3eb      	bcc.n	8000f8c <bufferPushValues+0x14>
    }
    return pushed;
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <bufferPop+0x14>
        return 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01e      	b.n	8001010 <bufferPop+0x52>

    disableInt();
 8000fd2:	f000 f857 	bl	8001084 <disableInt>

    buffer->size--;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	889b      	ldrh	r3, [r3, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	8852      	ldrh	r2, [r2, #2]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	885b      	ldrh	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	88d2      	ldrh	r2, [r2, #6]
 8000ffa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ffe:	fb01 f202 	mul.w	r2, r1, r2
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	805a      	strh	r2, [r3, #2]

    enableInt();
 800100a:	f000 f84f 	bl	80010ac <enableInt>

    return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <bufferPeek>:

uint8_t bufferPeek(const Buffer * const buffer) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    return buffer->data[buffer->ptrOut];
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	8852      	ldrh	r2, [r2, #2]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <bufferClear>:

void bufferClear(Buffer * const buffer) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    disableInt();
 8001040:	f000 f820 	bl	8001084 <disableInt>
    buffer->size = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
    enableInt();
 8001056:	f000 f829 	bl	80010ac <enableInt>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <disableInt>:
uint16_t bufferPeekValues(const Buffer * const buffer, uint8_t **values) {
    *values = buffer->data + buffer->ptrOut;
    return buffer->size;
}

static void disableInt() {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108a:	f3ef 8310 	mrs	r3, PRIMASK
 800108e:	607b      	str	r3, [r7, #4]
  return(result);
 8001090:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <disableInt+0x24>)
 8001094:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001096:	b672      	cpsid	i
}
 8001098:	bf00      	nop
    __disable_irq();
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000110 	.word	0x20000110

080010ac <enableInt>:

static void enableInt() {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <enableInt+0x20>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f383 8810 	msr	PRIMASK, r3
}
 80010be:	bf00      	nop
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000110 	.word	0x20000110

080010d0 <commandCreate>:
struct Command {
    char *name;
    CommandAction action;
};

Command * commandCreate(const char * const name, const CommandAction action) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    size_t nameLen = strlen(name);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f892 	bl	8000204 <strlen>
 80010e0:	6178      	str	r0, [r7, #20]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fd5a 	bl	8006ba0 <malloc>
 80010ec:	4603      	mov	r3, r0
 80010ee:	613b      	str	r3, [r7, #16]
    strcpy(nameCopy, name);
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	6938      	ldr	r0, [r7, #16]
 80010f4:	f005 fe74 	bl	8006de0 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 80010f8:	2008      	movs	r0, #8
 80010fa:	f005 fd51 	bl	8006ba0 <malloc>
 80010fe:	4603      	mov	r3, r0
 8001100:	60fb      	str	r3, [r7, #12]
    command->name = nameCopy;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	601a      	str	r2, [r3, #0]
    command->action = action;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	605a      	str	r2, [r3, #4]
    return command;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <commandExecute>:

const char * commandExecute(const Command * const command) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (command == NULL || command->action == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <commandExecute+0x16>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <commandExecute+0x1a>
        return NULL;
 800112e:	2300      	movs	r3, #0
 8001130:	e004      	b.n	800113c <commandExecute+0x24>
    return (*command->action)(NULL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2000      	movs	r0, #0
 8001138:	4798      	blx	r3
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <commandGetName+0x12>
        return NULL;
 8001152:	2300      	movs	r3, #0
 8001154:	e001      	b.n	800115a <commandGetName+0x16>
    return command->name;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a34      	ldr	r2, [pc, #208]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <MX_GPIO_Init+0xf0>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_GPIO_Init+0xf0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_GPIO_Init+0xf4>)
 8001212:	f001 febd 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_N_Pin;
 8001216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_N_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_GPIO_Init+0xf8>)
 800122c:	f001 fcec 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xf4>)
 800124a:	f001 fcdd 	bl	8002c08 <HAL_GPIO_Init>

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40020800 	.word	0x40020800

08001264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_I2C1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_I2C1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MX_I2C1_Init+0x7c>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012a2:	f001 fe8f 	bl	8002fc4 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 fbe2 	bl	8001a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b0:	2100      	movs	r1, #0
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012b4:	f002 fe45 	bl	8003f42 <HAL_I2CEx_ConfigAnalogFilter>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012be:	f000 fbd9 	bl	8001a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012c6:	f002 fe78 	bl	8003fba <HAL_I2CEx_ConfigDigitalFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 fbd0 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000114 	.word	0x20000114
 80012dc:	40005400 	.word	0x40005400
 80012e0:	00061a80 	.word	0x00061a80

080012e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_I2C_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12c      	bne.n	8001360 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_I2C_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001334:	2304      	movs	r3, #4
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <HAL_I2C_MspInit+0x8c>)
 8001340:	f001 fc62 	bl	8002c08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005400 	.word	0x40005400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400

08001374 <Set_Keyboard>:
#define KBRD_ADDR 0xE2

uint8_t lastNKey = 0;
uint8_t mode = 1;

HAL_StatusTypeDef Set_Keyboard( void ) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	461a      	mov	r2, r3
 8001386:	2102      	movs	r1, #2
 8001388:	20e2      	movs	r0, #226	; 0xe2
 800138a:	f000 fc05 	bl	8001b98 <PCA9538_Write_Register>
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <Set_Keyboard+0x2e>
		uartTransmit((uint8_t *) "Error write polarity\n", 21);
 8001398:	2115      	movs	r1, #21
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <Set_Keyboard+0x60>)
 800139c:	f000 ff0e 	bl	80021bc <uartTransmit>
		goto exit;
 80013a0:	e012      	b.n	80013c8 <Set_Keyboard+0x54>
	}

	buf = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	461a      	mov	r2, r3
 80013aa:	2101      	movs	r1, #1
 80013ac:	20e2      	movs	r0, #226	; 0xe2
 80013ae:	f000 fbf3 	bl	8001b98 <PCA9538_Write_Register>
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <Set_Keyboard+0x52>
		uartTransmit((uint8_t *) "Error write output\n", 19);
 80013bc:	2113      	movs	r1, #19
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <Set_Keyboard+0x64>)
 80013c0:	f000 fefc 	bl	80021bc <uartTransmit>
 80013c4:	e000      	b.n	80013c8 <Set_Keyboard+0x54>
	}

exit:
 80013c6:	bf00      	nop
	return ret;
 80013c8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08008418 	.word	0x08008418
 80013d8:	08008430 	.word	0x08008430

080013dc <Check_Row>:

uint8_t Check_Row( uint8_t  Nrow ) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	737b      	strb	r3, [r7, #13]
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 80013ee:	f7ff ffc1 	bl	8001374 <Set_Keyboard>
 80013f2:	4603      	mov	r3, r0
 80013f4:	737b      	strb	r3, [r7, #13]
	if( ret != HAL_OK ) {
 80013f6:	7b7b      	ldrb	r3, [r7, #13]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <Check_Row+0x28>
		uartTransmit((uint8_t *) "Error write init\n", 17);
 80013fc:	2111      	movs	r1, #17
 80013fe:	482e      	ldr	r0, [pc, #184]	; (80014b8 <Check_Row+0xdc>)
 8001400:	f000 fedc 	bl	80021bc <uartTransmit>
	}

	buf = Nrow;
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	72fb      	strb	r3, [r7, #11]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 8001408:	f107 030b 	add.w	r3, r7, #11
 800140c:	461a      	mov	r2, r3
 800140e:	2103      	movs	r1, #3
 8001410:	20e2      	movs	r0, #226	; 0xe2
 8001412:	f000 fbc1 	bl	8001b98 <PCA9538_Write_Register>
 8001416:	4603      	mov	r3, r0
 8001418:	737b      	strb	r3, [r7, #13]
	if( ret != HAL_OK ) {
 800141a:	7b7b      	ldrb	r3, [r7, #13]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <Check_Row+0x4c>
		uartTransmit((uint8_t *) "Error write config\n", 19);
 8001420:	2113      	movs	r1, #19
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <Check_Row+0xe0>)
 8001424:	f000 feca 	bl	80021bc <uartTransmit>
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 8001428:	f107 030b 	add.w	r3, r7, #11
 800142c:	4619      	mov	r1, r3
 800142e:	20e2      	movs	r0, #226	; 0xe2
 8001430:	f000 fbd2 	bl	8001bd8 <PCA9538_Read_Inputs>
 8001434:	4603      	mov	r3, r0
 8001436:	737b      	strb	r3, [r7, #13]
	if( ret != HAL_OK ) {
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <Check_Row+0x6a>
		uartTransmit((uint8_t *) "Read error\n", 11);
 800143e:	210b      	movs	r1, #11
 8001440:	481f      	ldr	r0, [pc, #124]	; (80014c0 <Check_Row+0xe4>)
 8001442:	f000 febb 	bl	80021bc <uartTransmit>
	}

	uint8_t pressed = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	73bb      	strb	r3, [r7, #14]
	kbd_in = buf & 0x70;
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001450:	733b      	strb	r3, [r7, #12]
	Nkey = kbd_in;
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	73fb      	strb	r3, [r7, #15]
	if( kbd_in != 0x70) {
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	2b70      	cmp	r3, #112	; 0x70
 800145a:	d01e      	beq.n	800149a <Check_Row+0xbe>
		if( !(kbd_in & 0x10) ) {
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d104      	bne.n	8001470 <Check_Row+0x94>
			Nkey = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
			pressed++;
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	3301      	adds	r3, #1
 800146e:	73bb      	strb	r3, [r7, #14]
		}
		if( !(kbd_in & 0x20) ) {
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <Check_Row+0xa8>
			Nkey = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	73fb      	strb	r3, [r7, #15]
			pressed++;
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	3301      	adds	r3, #1
 8001482:	73bb      	strb	r3, [r7, #14]
		}
		if( !(kbd_in & 0x40) ) {
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <Check_Row+0xc2>
			Nkey = 3;
 800148e:	2303      	movs	r3, #3
 8001490:	73fb      	strb	r3, [r7, #15]
			pressed++;
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]
 8001498:	e001      	b.n	800149e <Check_Row+0xc2>
		}
	} else Nkey = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]

	if (pressed > 1) {
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d904      	bls.n	80014ae <Check_Row+0xd2>
		Nkey = lastNKey;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <Check_Row+0xe8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	73fb      	strb	r3, [r7, #15]
		pressed = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73bb      	strb	r3, [r7, #14]
	}
	return Nkey;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08008444 	.word	0x08008444
 80014bc:	08008458 	.word	0x08008458
 80014c0:	0800846c 	.word	0x0800846c
 80014c4:	20000168 	.word	0x20000168

080014c8 <kbKeyExecute>:

void kbKeyExecute(char* buf) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if (mode == 0) {
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <kbKeyExecute+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d111      	bne.n	80014fc <kbKeyExecute+0x34>
		const char *commandResult = menuExecuteCommand(buf);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fb05 	bl	8001ae8 <menuExecuteCommand>
 80014de:	60f8      	str	r0, [r7, #12]
		uartTransmit((uint8_t *) "\n", 1);
 80014e0:	2101      	movs	r1, #1
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <kbKeyExecute+0x5c>)
 80014e4:	f000 fe6a 	bl	80021bc <uartTransmit>
		uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7fe fe8b 	bl	8000204 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fe61 	bl	80021bc <uartTransmit>
	}
	else {
		uartTransmit((uint8_t *) buf, strlen(buf));
		uartTransmit((uint8_t *) "\n", 1);
	}
}
 80014fa:	e00c      	b.n	8001516 <kbKeyExecute+0x4e>
		uartTransmit((uint8_t *) buf, strlen(buf));
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7fe fe81 	bl	8000204 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29b      	uxth	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fe57 	bl	80021bc <uartTransmit>
		uartTransmit((uint8_t *) "\n", 1);
 800150e:	2101      	movs	r1, #1
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <kbKeyExecute+0x5c>)
 8001512:	f000 fe53 	bl	80021bc <uartTransmit>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000
 8001524:	08008478 	.word	0x08008478

08001528 <getLastNKey>:

uint8_t getLastNKey(uint8_t keyNumber) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	if (keyNumber % 3 == 0) return 3;
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <getLastNKey+0x6c>)
 8001536:	fba3 1302 	umull	r1, r3, r3, r2
 800153a:	0859      	lsrs	r1, r3, #1
 800153c:	460b      	mov	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	440b      	add	r3, r1
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <getLastNKey+0x26>
 800154a:	2303      	movs	r3, #3
 800154c:	e01b      	b.n	8001586 <getLastNKey+0x5e>
	if (keyNumber % 3 == 1) return 1;
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <getLastNKey+0x6c>)
 8001552:	fba3 1302 	umull	r1, r3, r3, r2
 8001556:	0859      	lsrs	r1, r3, #1
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <getLastNKey+0x42>
 8001566:	2301      	movs	r3, #1
 8001568:	e00d      	b.n	8001586 <getLastNKey+0x5e>
	if (keyNumber % 3 == 2) return 2;
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <getLastNKey+0x6c>)
 800156e:	fba3 1302 	umull	r1, r3, r3, r2
 8001572:	0859      	lsrs	r1, r3, #1
 8001574:	460b      	mov	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d101      	bne.n	8001586 <getLastNKey+0x5e>
 8001582:	2302      	movs	r3, #2
 8001584:	e7ff      	b.n	8001586 <getLastNKey+0x5e>
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	aaaaaaab 	.word	0xaaaaaaab

08001598 <keyPressHandle>:

uint32_t clickStarts[12] = {0};
uint32_t releaseStarts[12] = {0};
uint8_t handled[12] = {0};
uint8_t pressed = 0;
void keyPressHandle(uint8_t keyNumber) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	if (handled[keyNumber-1] == 1 || pressed == 1) return;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a24      	ldr	r2, [pc, #144]	; (8001638 <keyPressHandle+0xa0>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d03f      	beq.n	800162e <keyPressHandle+0x96>
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <keyPressHandle+0xa4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d03b      	beq.n	800162e <keyPressHandle+0x96>
	char buf[2];
	uint32_t time = HAL_GetTick();
 80015b6:	f001 f977 	bl	80028a8 <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]
	if (clickStarts[keyNumber-1] > 0) {
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	3b01      	subs	r3, #1
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <keyPressHandle+0xa8>)
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d02a      	beq.n	8001620 <keyPressHandle+0x88>
		if ((time - clickStarts[keyNumber-1]) > 0) {
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <keyPressHandle+0xa8>)
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d02a      	beq.n	8001630 <keyPressHandle+0x98>
			sprintf(buf, "%d", keyNumber);
 80015da:	79fa      	ldrb	r2, [r7, #7]
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4918      	ldr	r1, [pc, #96]	; (8001644 <keyPressHandle+0xac>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 fbdc 	bl	8006da0 <siprintf>
			kbKeyExecute(buf);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff6b 	bl	80014c8 <kbKeyExecute>
			handled[keyNumber-1] = 1;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <keyPressHandle+0xa0>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	54d1      	strb	r1, [r2, r3]
			pressed = 1;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <keyPressHandle+0xa4>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
			lastNKey = getLastNKey(keyNumber); //TODO
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff8f 	bl	8001528 <getLastNKey>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <keyPressHandle+0xb0>)
 8001610:	701a      	strb	r2, [r3, #0]
			clickStarts[keyNumber-1] = 0;
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <keyPressHandle+0xa8>)
 8001618:	2100      	movs	r1, #0
 800161a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800161e:	e007      	b.n	8001630 <keyPressHandle+0x98>
		}
	} else {
		clickStarts[keyNumber-1] = time;
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	3b01      	subs	r3, #1
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <keyPressHandle+0xa8>)
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800162c:	e000      	b.n	8001630 <keyPressHandle+0x98>
	if (handled[keyNumber-1] == 1 || pressed == 1) return;
 800162e:	bf00      	nop
	}
}
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200001cc 	.word	0x200001cc
 800163c:	200001d8 	.word	0x200001d8
 8001640:	2000016c 	.word	0x2000016c
 8001644:	0800847c 	.word	0x0800847c
 8001648:	20000168 	.word	0x20000168

0800164c <keyReleaseHandle>:

void keyReleaseHandle(uint8_t keyNumber) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	uint32_t time = HAL_GetTick();
 8001656:	f001 f927 	bl	80028a8 <HAL_GetTick>
 800165a:	60f8      	str	r0, [r7, #12]
	if (releaseStarts[keyNumber-1] > 0) {
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	3b01      	subs	r3, #1
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <keyReleaseHandle+0x60>)
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d016      	beq.n	8001698 <keyReleaseHandle+0x4c>
		if ((time - releaseStarts[keyNumber-1]) > 0) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <keyReleaseHandle+0x60>)
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	429a      	cmp	r2, r3
 8001678:	d014      	beq.n	80016a4 <keyReleaseHandle+0x58>
			if (handled[keyNumber-1] == 1) {
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <keyReleaseHandle+0x64>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10e      	bne.n	80016a4 <keyReleaseHandle+0x58>
				handled[keyNumber-1] = 0;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <keyReleaseHandle+0x64>)
 800168c:	2100      	movs	r1, #0
 800168e:	54d1      	strb	r1, [r2, r3]
				pressed = 0;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <keyReleaseHandle+0x68>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
			}
		}
	} else {
		releaseStarts[keyNumber-1] = time;
	}
}
 8001696:	e005      	b.n	80016a4 <keyReleaseHandle+0x58>
		releaseStarts[keyNumber-1] = time;
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	3b01      	subs	r3, #1
 800169c:	4903      	ldr	r1, [pc, #12]	; (80016ac <keyReleaseHandle+0x60>)
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000019c 	.word	0x2000019c
 80016b0:	200001cc 	.word	0x200001cc
 80016b4:	200001d8 	.word	0x200001d8

080016b8 <kbChangeMode>:

void kbChangeMode() {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	if (mode == 0) {
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <kbChangeMode+0x30>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <kbChangeMode+0x1c>
		mode = 1;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <kbChangeMode+0x30>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
		uartTransmit((uint8_t *) "Test mode\n", 9);
 80016ca:	2109      	movs	r1, #9
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <kbChangeMode+0x34>)
 80016ce:	f000 fd75 	bl	80021bc <uartTransmit>
	} else {
		mode = 0;
		uartTransmit((uint8_t *) "Work mode\n", 9);
	}
}
 80016d2:	e006      	b.n	80016e2 <kbChangeMode+0x2a>
		mode = 0;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <kbChangeMode+0x30>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
		uartTransmit((uint8_t *) "Work mode\n", 9);
 80016da:	2109      	movs	r1, #9
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <kbChangeMode+0x38>)
 80016de:	f000 fd6d 	bl	80021bc <uartTransmit>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000000 	.word	0x20000000
 80016ec:	08008480 	.word	0x08008480
 80016f0:	0800848c 	.word	0x0800848c

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  commands[0] = commandCreate("1", (CommandAction) playA);
 80016f8:	4940      	ldr	r1, [pc, #256]	; (80017fc <main+0x108>)
 80016fa:	4841      	ldr	r0, [pc, #260]	; (8001800 <main+0x10c>)
 80016fc:	f7ff fce8 	bl	80010d0 <commandCreate>
 8001700:	4603      	mov	r3, r0
 8001702:	4a40      	ldr	r2, [pc, #256]	; (8001804 <main+0x110>)
 8001704:	6013      	str	r3, [r2, #0]
	  commands[1] = commandCreate("2", (CommandAction) playB);
 8001706:	4940      	ldr	r1, [pc, #256]	; (8001808 <main+0x114>)
 8001708:	4840      	ldr	r0, [pc, #256]	; (800180c <main+0x118>)
 800170a:	f7ff fce1 	bl	80010d0 <commandCreate>
 800170e:	4603      	mov	r3, r0
 8001710:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <main+0x110>)
 8001712:	6053      	str	r3, [r2, #4]
	  commands[2] = commandCreate("3", (CommandAction) playC);
 8001714:	493e      	ldr	r1, [pc, #248]	; (8001810 <main+0x11c>)
 8001716:	483f      	ldr	r0, [pc, #252]	; (8001814 <main+0x120>)
 8001718:	f7ff fcda 	bl	80010d0 <commandCreate>
 800171c:	4603      	mov	r3, r0
 800171e:	4a39      	ldr	r2, [pc, #228]	; (8001804 <main+0x110>)
 8001720:	6093      	str	r3, [r2, #8]
	  commands[3] = commandCreate("4", (CommandAction) playD);
 8001722:	493d      	ldr	r1, [pc, #244]	; (8001818 <main+0x124>)
 8001724:	483d      	ldr	r0, [pc, #244]	; (800181c <main+0x128>)
 8001726:	f7ff fcd3 	bl	80010d0 <commandCreate>
 800172a:	4603      	mov	r3, r0
 800172c:	4a35      	ldr	r2, [pc, #212]	; (8001804 <main+0x110>)
 800172e:	60d3      	str	r3, [r2, #12]
	  commands[4] = commandCreate("5", (CommandAction) playE);
 8001730:	493b      	ldr	r1, [pc, #236]	; (8001820 <main+0x12c>)
 8001732:	483c      	ldr	r0, [pc, #240]	; (8001824 <main+0x130>)
 8001734:	f7ff fccc 	bl	80010d0 <commandCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <main+0x110>)
 800173c:	6113      	str	r3, [r2, #16]
	  commands[5] = commandCreate("6", (CommandAction) playF);
 800173e:	493a      	ldr	r1, [pc, #232]	; (8001828 <main+0x134>)
 8001740:	483a      	ldr	r0, [pc, #232]	; (800182c <main+0x138>)
 8001742:	f7ff fcc5 	bl	80010d0 <commandCreate>
 8001746:	4603      	mov	r3, r0
 8001748:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <main+0x110>)
 800174a:	6153      	str	r3, [r2, #20]
	  commands[6] = commandCreate("7", (CommandAction) playG);
 800174c:	4938      	ldr	r1, [pc, #224]	; (8001830 <main+0x13c>)
 800174e:	4839      	ldr	r0, [pc, #228]	; (8001834 <main+0x140>)
 8001750:	f7ff fcbe 	bl	80010d0 <commandCreate>
 8001754:	4603      	mov	r3, r0
 8001756:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <main+0x110>)
 8001758:	6193      	str	r3, [r2, #24]
	  commands[7] = commandCreate("8", (CommandAction) upOctave);//+
 800175a:	4937      	ldr	r1, [pc, #220]	; (8001838 <main+0x144>)
 800175c:	4837      	ldr	r0, [pc, #220]	; (800183c <main+0x148>)
 800175e:	f7ff fcb7 	bl	80010d0 <commandCreate>
 8001762:	4603      	mov	r3, r0
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <main+0x110>)
 8001766:	61d3      	str	r3, [r2, #28]
	  commands[8] = commandCreate("9", (CommandAction) downOctave);//-
 8001768:	4935      	ldr	r1, [pc, #212]	; (8001840 <main+0x14c>)
 800176a:	4836      	ldr	r0, [pc, #216]	; (8001844 <main+0x150>)
 800176c:	f7ff fcb0 	bl	80010d0 <commandCreate>
 8001770:	4603      	mov	r3, r0
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <main+0x110>)
 8001774:	6213      	str	r3, [r2, #32]
	  commands[9] = commandCreate("10", (CommandAction) upDuration);//A
 8001776:	4934      	ldr	r1, [pc, #208]	; (8001848 <main+0x154>)
 8001778:	4834      	ldr	r0, [pc, #208]	; (800184c <main+0x158>)
 800177a:	f7ff fca9 	bl	80010d0 <commandCreate>
 800177e:	4603      	mov	r3, r0
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <main+0x110>)
 8001782:	6253      	str	r3, [r2, #36]	; 0x24
	  commands[10] = commandCreate("11", (CommandAction) downDuration);//a
 8001784:	4932      	ldr	r1, [pc, #200]	; (8001850 <main+0x15c>)
 8001786:	4833      	ldr	r0, [pc, #204]	; (8001854 <main+0x160>)
 8001788:	f7ff fca2 	bl	80010d0 <commandCreate>
 800178c:	4603      	mov	r3, r0
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <main+0x110>)
 8001790:	6293      	str	r3, [r2, #40]	; 0x28
	  commands[11] = commandCreate("12", (CommandAction) playAll);//enter
 8001792:	4931      	ldr	r1, [pc, #196]	; (8001858 <main+0x164>)
 8001794:	4831      	ldr	r0, [pc, #196]	; (800185c <main+0x168>)
 8001796:	f7ff fc9b 	bl	80010d0 <commandCreate>
 800179a:	4603      	mov	r3, r0
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <main+0x110>)
 800179e:	62d3      	str	r3, [r2, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f001 f81c 	bl	80027dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f866 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fcde 	bl	8001168 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80017ac:	f000 fc8c 	bl	80020c8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80017b0:	f000 fad2 	bl	8001d58 <MX_TIM1_Init>
  MX_TIM6_Init();
 80017b4:	f000 fb70 	bl	8001e98 <MX_TIM6_Init>
  MX_I2C1_Init();
 80017b8:	f7ff fd54 	bl	8001264 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 80017bc:	f000 fd1a 	bl	80021f4 <uartInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017c0:	2100      	movs	r1, #0
 80017c2:	4827      	ldr	r0, [pc, #156]	; (8001860 <main+0x16c>)
 80017c4:	f003 fa3a 	bl	8004c3c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80017c8:	4826      	ldr	r0, [pc, #152]	; (8001864 <main+0x170>)
 80017ca:	f003 f96d 	bl	8004aa8 <HAL_TIM_Base_Start_IT>
  buttonInit(BTN_N_GPIO_Port, BTN_N_Pin);
 80017ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d2:	4825      	ldr	r0, [pc, #148]	; (8001868 <main+0x174>)
 80017d4:	f000 fd4e 	bl	8002274 <buttonInit>
  buttonSetOnClick(&kbChangeMode);
 80017d8:	4824      	ldr	r0, [pc, #144]	; (800186c <main+0x178>)
 80017da:	f000 fd67 	bl	80022ac <buttonSetOnClick>

  menuInit(commands, 12);
 80017de:	210c      	movs	r1, #12
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <main+0x110>)
 80017e2:	f000 f94d 	bl	8001a80 <menuInit>
  sendMessage("Started\n");
 80017e6:	4822      	ldr	r0, [pc, #136]	; (8001870 <main+0x17c>)
 80017e8:	f000 f8a4 	bl	8001934 <sendMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uartPolling();
 80017ec:	f000 fd16 	bl	800221c <uartPolling>
	  buttonUpdateState();
 80017f0:	f000 fd6c 	bl	80022cc <buttonUpdateState>
	  kbUpdateState();
 80017f4:	f000 f8b0 	bl	8001958 <kbUpdateState>
	  uartPolling();
 80017f8:	e7f8      	b.n	80017ec <main+0xf8>
 80017fa:	bf00      	nop
 80017fc:	080024e9 	.word	0x080024e9
 8001800:	08008498 	.word	0x08008498
 8001804:	200001dc 	.word	0x200001dc
 8001808:	080024f9 	.word	0x080024f9
 800180c:	0800849c 	.word	0x0800849c
 8001810:	08002509 	.word	0x08002509
 8001814:	080084a0 	.word	0x080084a0
 8001818:	08002519 	.word	0x08002519
 800181c:	080084a4 	.word	0x080084a4
 8001820:	08002529 	.word	0x08002529
 8001824:	080084a8 	.word	0x080084a8
 8001828:	08002539 	.word	0x08002539
 800182c:	080084ac 	.word	0x080084ac
 8001830:	08002549 	.word	0x08002549
 8001834:	080084b0 	.word	0x080084b0
 8001838:	080025b9 	.word	0x080025b9
 800183c:	080084b4 	.word	0x080084b4
 8001840:	08002619 	.word	0x08002619
 8001844:	080084b8 	.word	0x080084b8
 8001848:	08002679 	.word	0x08002679
 800184c:	080084bc 	.word	0x080084bc
 8001850:	080026dd 	.word	0x080026dd
 8001854:	080084c0 	.word	0x080084c0
 8001858:	08002559 	.word	0x08002559
 800185c:	080084c4 	.word	0x080084c4
 8001860:	2000021c 	.word	0x2000021c
 8001864:	20000264 	.word	0x20000264
 8001868:	40020800 	.word	0x40020800
 800186c:	080016b9 	.word	0x080016b9
 8001870:	080084c8 	.word	0x080084c8

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	; 0x50
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	2230      	movs	r2, #48	; 0x30
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f005 f994 	bl	8006bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <SystemClock_Config+0xb8>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <SystemClock_Config+0xb8>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <SystemClock_Config+0xb8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <SystemClock_Config+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <SystemClock_Config+0xbc>)
 80018c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <SystemClock_Config+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d8:	2301      	movs	r3, #1
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018dc:	2310      	movs	r3, #16
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fba5 	bl	8004038 <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018f4:	f000 f8be 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fe08 	bl	8004528 <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800191e:	f000 f8a9 	bl	8001a74 <Error_Handler>
  }
}
 8001922:	bf00      	nop
 8001924:	3750      	adds	r7, #80	; 0x50
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000

08001934 <sendMessage>:

/* USER CODE BEGIN 4 */
static void sendMessage(const char * msg) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7fe fc61 	bl	8000204 <strlen>
 8001942:	4603      	mov	r3, r0
 8001944:	b29b      	uxth	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fc37 	bl	80021bc <uartTransmit>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <kbUpdateState>:

static void kbUpdateState() {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
	uint8_t Row[4] = {ROW1, ROW2, ROW3, ROW4};
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <kbUpdateState+0x118>)
 8001960:	607b      	str	r3, [r7, #4]
	uint8_t Key;
	for ( int i = 0; i < 4; i++ ) {
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e07b      	b.n	8001a60 <kbUpdateState+0x108>
		Key = Check_Row( Row[i] );
 8001968:	1d3a      	adds	r2, r7, #4
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd33 	bl	80013dc <Check_Row>
 8001976:	4603      	mov	r3, r0
 8001978:	72fb      	strb	r3, [r7, #11]
		Key = Check_Row( Row[i] );
 800197a:	1d3a      	adds	r2, r7, #4
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fd2a 	bl	80013dc <Check_Row>
 8001988:	4603      	mov	r3, r0
 800198a:	72fb      	strb	r3, [r7, #11]
		Key = Check_Row( Row[i] );
 800198c:	1d3a      	adds	r2, r7, #4
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fd21 	bl	80013dc <Check_Row>
 800199a:	4603      	mov	r3, r0
 800199c:	72fb      	strb	r3, [r7, #11]
		Key = Check_Row( Row[i] );
 800199e:	1d3a      	adds	r2, r7, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fd18 	bl	80013dc <Check_Row>
 80019ac:	4603      	mov	r3, r0
 80019ae:	72fb      	strb	r3, [r7, #11]
		Key = Check_Row( Row[i] );
 80019b0:	1d3a      	adds	r2, r7, #4
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fd0f 	bl	80013dc <Check_Row>
 80019be:	4603      	mov	r3, r0
 80019c0:	72fb      	strb	r3, [r7, #11]
		if ( Key == 3 ) {
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d10a      	bne.n	80019de <kbUpdateState+0x86>
			keyPressHandle(3*i+3);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	0052      	lsls	r2, r2, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fdde 	bl	8001598 <keyPressHandle>
 80019dc:	e009      	b.n	80019f2 <kbUpdateState+0x9a>
		} else {
			keyReleaseHandle(3*i+3);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe2d 	bl	800164c <keyReleaseHandle>
		}

		if ( Key == 2 ) {
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d10b      	bne.n	8001a10 <kbUpdateState+0xb8>
			keyPressHandle(3*i+2);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3302      	adds	r3, #2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fdc5 	bl	8001598 <keyPressHandle>
 8001a0e:	e00a      	b.n	8001a26 <kbUpdateState+0xce>
		} else {
			keyReleaseHandle(3*i+2);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	0052      	lsls	r2, r2, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe13 	bl	800164c <keyReleaseHandle>
		}

		if ( Key == 1 ) {
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d10b      	bne.n	8001a44 <kbUpdateState+0xec>
			keyPressHandle(3*i+1);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	0052      	lsls	r2, r2, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fdab 	bl	8001598 <keyPressHandle>
 8001a42:	e00a      	b.n	8001a5a <kbUpdateState+0x102>
		} else {
			keyReleaseHandle(3*i+1);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fdf9 	bl	800164c <keyReleaseHandle>
	for ( int i = 0; i < 4; i++ ) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	dd80      	ble.n	8001968 <kbUpdateState+0x10>
		}
	}
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	f7fbfdfe 	.word	0xf7fbfdfe

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <menuInit>:
#include "command.h"

Command **menuCommands = NULL;
uint16_t menuSize;

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <menuInit+0x60>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d121      	bne.n	8001ad8 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 f881 	bl	8006ba0 <malloc>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <menuInit+0x60>)
 8001aa4:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	81fb      	strh	r3, [r7, #14]
 8001aaa:	e00d      	b.n	8001ac8 <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	441a      	add	r2, r3
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <menuInit+0x60>)
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	81fb      	strh	r3, [r7, #14]
 8001ac8:	89fa      	ldrh	r2, [r7, #14]
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3ed      	bcc.n	8001aac <menuInit+0x2c>
    }
    menuSize = commandsSize;
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <menuInit+0x64>)
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	8013      	strh	r3, [r2, #0]
 8001ad6:	e000      	b.n	8001ada <menuInit+0x5a>
        return;
 8001ad8:	bf00      	nop
}
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000020c 	.word	0x2000020c
 8001ae4:	20000210 	.word	0x20000210

08001ae8 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandName) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < menuSize; i++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	81fb      	strh	r3, [r7, #14]
 8001af4:	e01f      	b.n	8001b36 <menuExecuteCommand+0x4e>
        const Command * const command = menuCommands[i];
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <menuExecuteCommand+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <menuExecuteCommand+0x64>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb17 	bl	8001144 <commandGetName>
 8001b16:	4603      	mov	r3, r0
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb68 	bl	80001f0 <strcmp>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <menuExecuteCommand+0x48>
            return commandExecute(command);
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	f7ff faf6 	bl	8001118 <commandExecute>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	e008      	b.n	8001b42 <menuExecuteCommand+0x5a>
    for (uint16_t i = 0; i < menuSize; i++) {
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	3301      	adds	r3, #1
 8001b34:	81fb      	strh	r3, [r7, #14]
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <menuExecuteCommand+0x68>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	89fa      	ldrh	r2, [r7, #14]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3da      	bcc.n	8001af6 <menuExecuteCommand+0xe>
        }
    }
    return "Command not found\n";
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <menuExecuteCommand+0x6c>)
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000020c 	.word	0x2000020c
 8001b50:	20000210 	.word	0x20000210
 8001b54:	080084d4 	.word	0x080084d4

08001b58 <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	4603      	mov	r3, r0
 8001b60:	603a      	str	r2, [r7, #0]
 8001b62:	80fb      	strh	r3, [r7, #6]
 8001b64:	460b      	mov	r3, r1
 8001b66:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	b299      	uxth	r1, r3
 8001b70:	797b      	ldrb	r3, [r7, #5]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2364      	movs	r3, #100	; 0x64
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	4804      	ldr	r0, [pc, #16]	; (8001b94 <PCA9538_Read_Register+0x3c>)
 8001b84:	f001 fc5c 	bl	8003440 <HAL_I2C_Mem_Read>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000114 	.word	0x20000114

08001b98 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	603a      	str	r2, [r7, #0]
 8001ba2:	80fb      	strh	r3, [r7, #6]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	b299      	uxth	r1, r3
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <PCA9538_Write_Register+0x3c>)
 8001bc4:	f001 fb42 	bl	800324c <HAL_I2C_Mem_Write>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000114 	.word	0x20000114

08001bd8 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffb4 	bl	8001b58 <PCA9538_Read_Register>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 fdf2 	bl	8002880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM6_DAC_IRQHandler+0x10>)
 8001ca6:	f003 f891 	bl	8004dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000264 	.word	0x20000264

08001cb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART6_IRQHandler+0x10>)
 8001cba:	f004 f813 	bl	8005ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200002b8 	.word	0x200002b8

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f004 ff28 	bl	8006b4c <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20030000 	.word	0x20030000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	20000214 	.word	0x20000214
 8001d30:	200003a8 	.word	0x200003a8

08001d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b096      	sub	sp, #88	; 0x58
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	615a      	str	r2, [r3, #20]
 8001d88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 ff0d 	bl	8006bb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001d98:	4a3e      	ldr	r2, [pc, #248]	; (8001e94 <MX_TIM1_Init+0x13c>)
 8001d9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d9c:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001daa:	220a      	movs	r2, #10
 8001dac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc0:	4833      	ldr	r0, [pc, #204]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001dc2:	f002 fd91 	bl	80048e8 <HAL_TIM_Base_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001dcc:	f7ff fe52 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482c      	ldr	r0, [pc, #176]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001dde:	f003 f9bf 	bl	8005160 <HAL_TIM_ConfigClockSource>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001de8:	f7ff fe44 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dec:	4828      	ldr	r0, [pc, #160]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001dee:	f002 fecb 	bl	8004b88 <HAL_TIM_PWM_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001df8:	f7ff fe3c 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4821      	ldr	r0, [pc, #132]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001e0c:	f003 fda8 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001e16:	f7ff fe2d 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1a:	2360      	movs	r3, #96	; 0x60
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e26:	2300      	movs	r3, #0
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001e40:	f003 f8cc 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001e4a:	f7ff fe13 	bl	8001a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001e72:	f003 fdf1 	bl	8005a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001e7c:	f7ff fdfa 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <MX_TIM1_Init+0x138>)
 8001e82:	f000 f87d 	bl	8001f80 <HAL_TIM_MspPostInit>

}
 8001e86:	bf00      	nop
 8001e88:	3758      	adds	r7, #88	; 0x58
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000021c 	.word	0x2000021c
 8001e94:	40010000 	.word	0x40010000

08001e98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <MX_TIM6_Init+0x68>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eae:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001eb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eca:	f002 fd0d 	bl	80048e8 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f7ff fdce 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ee6:	f003 fd3b 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ef0:	f7ff fdc0 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000264 	.word	0x20000264
 8001f00:	40001000 	.word	0x40001000

08001f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_TIM_Base_MspInit+0x70>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_TIM_Base_MspInit+0x74>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_TIM_Base_MspInit+0x74>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_TIM_Base_MspInit+0x74>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f32:	e01a      	b.n	8001f6a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_TIM_Base_MspInit+0x78>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d115      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_TIM_Base_MspInit+0x74>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_TIM_Base_MspInit+0x74>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_TIM_Base_MspInit+0x74>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2036      	movs	r0, #54	; 0x36
 8001f60:	f000 fd89 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f64:	2036      	movs	r0, #54	; 0x36
 8001f66:	f000 fda2 	bl	8002aae <HAL_NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40001000 	.word	0x40001000

08001f80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_TIM_MspPostInit+0x68>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d11e      	bne.n	8001fe0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <HAL_TIM_MspPostInit+0x70>)
 8001fdc:	f000 fe14 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <TIM6_START>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef TIM6_START() {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <TIM6_START+0x10>)
 8001ffa:	f002 fcc5 	bl	8004988 <HAL_TIM_Base_Start>
 8001ffe:	4603      	mov	r3, r0
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000264 	.word	0x20000264

08002008 <TIM6_STOP>:

HAL_StatusTypeDef TIM6_STOP() {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Stop(&htim6);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM6_STOP+0x10>)
 800200e:	f002 fd23 	bl	8004a58 <HAL_TIM_Base_Stop>
 8002012:	4603      	mov	r3, r0
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000264 	.word	0x20000264

0800201c <setPlayAllFlag>:

void setPlayAllFlag() {
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	playAllFlag = 1;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <setPlayAllFlag+0x14>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
};
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000218 	.word	0x20000218

08002034 <resetPlayAllFlag>:

void resetPlayAllFlag() {
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	playAllFlag = 0;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <resetPlayAllFlag+0x14>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
};
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20000218 	.word	0x20000218

0800204c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	static uint8_t note = 0;
	if( htim->Instance == TIM6 ) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d127      	bne.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x62>
		if (!playAllFlag) {
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x2a>
			TIM6_STOP();
 8002066:	f7ff ffcf 	bl	8002008 <TIM6_STOP>
			TIM1->CCR1 = 0;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
			disableIsPlaying();
 8002070:	f000 fb64 	bl	800273c <disableIsPlaying>
				setPlay(note);
			}
		}

	}
}
 8002074:	e01b      	b.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x62>
			note++;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002080:	701a      	strb	r2, [r3, #0]
			if (note >= 6) {
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b05      	cmp	r3, #5
 8002088:	d90c      	bls.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x58>
				note = 0;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
				TIM6_STOP();
 8002090:	f7ff ffba 	bl	8002008 <TIM6_STOP>
				TIM1->CCR1 = 0;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002096:	2200      	movs	r2, #0
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
				resetPlayAllFlag();
 800209a:	f7ff ffcb 	bl	8002034 <resetPlayAllFlag>
				disableIsPlaying();
 800209e:	f000 fb4d 	bl	800273c <disableIsPlaying>
}
 80020a2:	e004      	b.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x62>
				setPlay(note);
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f9c5 	bl	8002438 <setPlay>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40001000 	.word	0x40001000
 80020bc:	20000218 	.word	0x20000218
 80020c0:	40010000 	.word	0x40010000
 80020c4:	200002ac 	.word	0x200002ac

080020c8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <MX_USART6_UART_Init+0x50>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_USART6_UART_Init+0x4c>)
 8002100:	f003 fd10 	bl	8005b24 <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800210a:	f7ff fcb3 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200002b8 	.word	0x200002b8
 8002118:	40011400 	.word	0x40011400

0800211c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_UART_MspInit+0x94>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d133      	bne.n	80021a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_UART_MspInit+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002176:	23c0      	movs	r3, #192	; 0xc0
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002186:	2308      	movs	r3, #8
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_UART_MspInit+0x9c>)
 8002192:	f000 fd39 	bl	8002c08 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2047      	movs	r0, #71	; 0x47
 800219c:	f000 fc6b 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021a0:	2047      	movs	r0, #71	; 0x47
 80021a2:	f000 fc84 	bl	8002aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40011400 	.word	0x40011400
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800

080021bc <uartTransmit>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <uartTransmit+0x16>
        return 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e009      	b.n	80021e6 <uartTransmit+0x2a>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <uartTransmit+0x34>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fecc 	bl	8000f78 <bufferPushValues>
 80021e0:	4603      	mov	r3, r0
 80021e2:	81fb      	strh	r3, [r7, #14]
    return transmitted;
 80021e4:	89fb      	ldrh	r3, [r7, #14]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002b0 	.word	0x200002b0

080021f4 <uartInit>:

uint8_t uartHasNext() {
    return bufferHasValues(rxBuffer);
}

void uartInit() {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 80021f8:	2080      	movs	r0, #128	; 0x80
 80021fa:	f7fe fe6f 	bl	8000edc <bufferCreate>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <uartInit+0x20>)
 8002202:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8002204:	2080      	movs	r0, #128	; 0x80
 8002206:	f7fe fe69 	bl	8000edc <bufferCreate>
 800220a:	4603      	mov	r3, r0
 800220c:	4a02      	ldr	r2, [pc, #8]	; (8002218 <uartInit+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200002b0 	.word	0x200002b0
 8002218:	200002b4 	.word	0x200002b4

0800221c <uartPolling>:

void uartPolling() {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    hardwareTransmit();
 8002220:	f000 f802 	bl	8002228 <hardwareTransmit>
    //hardwareReceive();
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <hardwareTransmit>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareTransmit() {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
    if (bufferHasValues(txBuffer)) {
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <hardwareTransmit+0x48>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff15 	bl	8001062 <bufferHasValues>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d013      	beq.n	8002266 <hardwareTransmit+0x3e>
        const uint8_t byte = bufferPeek(txBuffer);
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <hardwareTransmit+0x48>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fee8 	bl	8001018 <bufferPeek>
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareTransmitPolling(byte, 1))
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fa7f 	bl	8002754 <uartHardwareTransmitPolling>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <hardwareTransmit+0x3e>
            bufferPop(txBuffer);
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <hardwareTransmit+0x48>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe feac 	bl	8000fbe <bufferPop>
    }
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200002b0 	.word	0x200002b0

08002274 <buttonInit>:
static uint16_t pin;
static buttonActionListener onClickHandler = NULL;

static uint8_t buttonIsPressed();

void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
	port = GPIOx;
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <buttonInit+0x2c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
    pin = GPIO_Pin;
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <buttonInit+0x30>)
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	8013      	strh	r3, [r2, #0]
    onClickHandler = NULL;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <buttonInit+0x34>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200002fc 	.word	0x200002fc
 80022a4:	20000300 	.word	0x20000300
 80022a8:	20000304 	.word	0x20000304

080022ac <buttonSetOnClick>:

void buttonSetOnClick(buttonActionListener actionListener) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    onClickHandler = actionListener;
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <buttonSetOnClick+0x1c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000304 	.word	0x20000304

080022cc <buttonUpdateState>:

static volatile uint32_t clickStart = 0;
void buttonUpdateState() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
    uint32_t time = HAL_GetTick();
 80022d2:	f000 fae9 	bl	80028a8 <HAL_GetTick>
 80022d6:	6078      	str	r0, [r7, #4]
    uint8_t isPressed = buttonIsPressed();
 80022d8:	f000 f82e 	bl	8002338 <buttonIsPressed>
 80022dc:	4603      	mov	r3, r0
 80022de:	70fb      	strb	r3, [r7, #3]

    if (!isPressed && clickStart > 0 && (time - clickStart) >= SHORT_CLICK) {
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d114      	bne.n	8002310 <buttonUpdateState+0x44>
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <buttonUpdateState+0x64>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <buttonUpdateState+0x44>
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <buttonUpdateState+0x64>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b31      	cmp	r3, #49	; 0x31
 80022f8:	d90a      	bls.n	8002310 <buttonUpdateState+0x44>
        clickStart = 0;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <buttonUpdateState+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
        if (onClickHandler != NULL)
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <buttonUpdateState+0x68>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <buttonUpdateState+0x5a>
            (*onClickHandler)();
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <buttonUpdateState+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4798      	blx	r3
        if (onClickHandler != NULL)
 800230e:	e00a      	b.n	8002326 <buttonUpdateState+0x5a>
    } else if (isPressed && clickStart == 0) {
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <buttonUpdateState+0x5a>
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <buttonUpdateState+0x64>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <buttonUpdateState+0x5a>
        clickStart = time;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <buttonUpdateState+0x64>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6013      	str	r3, [r2, #0]
    }
}
 8002324:	e7ff      	b.n	8002326 <buttonUpdateState+0x5a>
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000308 	.word	0x20000308
 8002334:	20000304 	.word	0x20000304

08002338 <buttonIsPressed>:

static uint8_t buttonIsPressed() {
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <buttonIsPressed+0x24>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <buttonIsPressed+0x28>)
 8002342:	8812      	ldrh	r2, [r2, #0]
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fe0a 	bl	8002f60 <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200002fc 	.word	0x200002fc
 8002360:	20000300 	.word	0x20000300
 8002364:	00000000 	.word	0x00000000

08002368 <getNoteFrequency>:
double notes[7] = {16.352, 18.354, 20.602, 21.827, 24.5, 27.5, 30.868};
char* noteNames[7] = {"A", "B", "C", "D", "E", "F", "G"};

int duration = 1000;

double getNoteFrequency(uint8_t noteNumber) {
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	return rint(notes[noteNumber] * pow(2, octave));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <getNoteFrequency+0x70>)
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <getNoteFrequency+0x74>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f8de 	bl	8000544 <__aeabi_ui2d>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	ec43 2b11 	vmov	d1, r2, r3
 8002390:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80023d0 <getNoteFrequency+0x68>
 8002394:	f005 f918 	bl	80075c8 <pow>
 8002398:	ec53 2b10 	vmov	r2, r3, d0
 800239c:	4620      	mov	r0, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	f7fe f94a 	bl	8000638 <__aeabi_dmul>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	ec43 2b17 	vmov	d7, r2, r3
 80023ac:	eeb0 0a47 	vmov.f32	s0, s14
 80023b0:	eef0 0a67 	vmov.f32	s1, s15
 80023b4:	f005 f87a 	bl	80074ac <rint>
 80023b8:	eeb0 7a40 	vmov.f32	s14, s0
 80023bc:	eef0 7a60 	vmov.f32	s15, s1
}
 80023c0:	eeb0 0a47 	vmov.f32	s0, s14
 80023c4:	eef0 0a67 	vmov.f32	s1, s15
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdb0      	pop	{r4, r5, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00000000 	.word	0x00000000
 80023d4:	40000000 	.word	0x40000000
 80023d8:	20000030 	.word	0x20000030
 80023dc:	20000008 	.word	0x20000008

080023e0 <setVolume>:

void setVolume(uint8_t volume) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	if (0 <= volume && volume <= 10) {
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b0a      	cmp	r3, #10
 80023ee:	d802      	bhi.n	80023f6 <setVolume+0x16>
		TIM1->CCR1 = volume;
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <setVolume+0x24>)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000

08002408 <setFrequency>:

void setFrequency(uint16_t freq) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
	TIM1->PSC = HAL_RCC_GetPCLK2Freq() / (10 * freq) - 1;
 8002412:	f002 fa55 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8002416:	4601      	mov	r1, r0
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fbb1 f3f3 	udiv	r3, r1, r3
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <setFrequency+0x2c>)
 8002428:	3b01      	subs	r3, #1
 800242a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40010000 	.word	0x40010000

08002438 <setPlay>:

void setPlay(uint8_t noteNumber) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
	setFrequency((uint16_t) getNoteFrequency(noteNumber));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff8f 	bl	8002368 <getNoteFrequency>
 800244a:	ec53 2b10 	vmov	r2, r3, d0
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fba1 	bl	8000b98 <__aeabi_d2uiz>
 8002456:	4603      	mov	r3, r0
 8002458:	b29b      	uxth	r3, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ffd4 	bl	8002408 <setFrequency>
	setVolume(10);
 8002460:	200a      	movs	r0, #10
 8002462:	f7ff ffbd 	bl	80023e0 <setVolume>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <playNote>:

char buf[128];
char* playNote(uint8_t noteNumber) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	if (isPlaying) return "buzzer not ready\n";
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <playNote+0x58>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <playNote+0x16>
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <playNote+0x5c>)
 8002484:	e01b      	b.n	80024be <playNote+0x4e>
	isPlaying = 1;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <playNote+0x58>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
	setPlay(noteNumber);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ffd2 	bl	8002438 <setPlay>
	TIM6_START();
 8002494:	f7ff fdae 	bl	8001ff4 <TIM6_START>
	sprintf(buf, "note %s, %s, duration %dms\n", noteNames[noteNumber], octaveNames[octave], duration);
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <playNote+0x60>)
 800249c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <playNote+0x64>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <playNote+0x68>)
 80024a8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <playNote+0x6c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	460b      	mov	r3, r1
 80024b4:	490a      	ldr	r1, [pc, #40]	; (80024e0 <playNote+0x70>)
 80024b6:	480b      	ldr	r0, [pc, #44]	; (80024e4 <playNote+0x74>)
 80024b8:	f004 fc72 	bl	8006da0 <siprintf>
	return buf;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <playNote+0x74>)
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000030c 	.word	0x2000030c
 80024cc:	080085a4 	.word	0x080085a4
 80024d0:	20000068 	.word	0x20000068
 80024d4:	20000008 	.word	0x20000008
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	20000084 	.word	0x20000084
 80024e0:	080085b8 	.word	0x080085b8
 80024e4:	20000310 	.word	0x20000310

080024e8 <playA>:

char* playA() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	return playNote(0);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff ffbf 	bl	8002470 <playNote>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <playB>:
char* playB() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	return playNote(1);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff ffb7 	bl	8002470 <playNote>
 8002502:	4603      	mov	r3, r0
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}

08002508 <playC>:
char* playC() {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	return playNote(2);
 800250c:	2002      	movs	r0, #2
 800250e:	f7ff ffaf 	bl	8002470 <playNote>
 8002512:	4603      	mov	r3, r0
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}

08002518 <playD>:
char* playD() {
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	return playNote(3);
 800251c:	2003      	movs	r0, #3
 800251e:	f7ff ffa7 	bl	8002470 <playNote>
 8002522:	4603      	mov	r3, r0
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}

08002528 <playE>:
char* playE() {
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	return playNote(4);
 800252c:	2004      	movs	r0, #4
 800252e:	f7ff ff9f 	bl	8002470 <playNote>
 8002532:	4603      	mov	r3, r0
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}

08002538 <playF>:
char* playF() {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	return playNote(5);
 800253c:	2005      	movs	r0, #5
 800253e:	f7ff ff97 	bl	8002470 <playNote>
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}

08002548 <playG>:
char* playG() {
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	return playNote(6);
 800254c:	2006      	movs	r0, #6
 800254e:	f7ff ff8f 	bl	8002470 <playNote>
 8002552:	4603      	mov	r3, r0
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}

08002558 <playAll>:

char* playAll() {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <playAll+0x44>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <playAll+0x10>
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <playAll+0x48>)
 8002566:	e016      	b.n	8002596 <playAll+0x3e>
	isPlaying = 1;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <playAll+0x44>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
	setPlayAllFlag();
 800256e:	f7ff fd55 	bl	800201c <setPlayAllFlag>
	setPlay(0);
 8002572:	2000      	movs	r0, #0
 8002574:	f7ff ff60 	bl	8002438 <setPlay>
	TIM6_START();
 8002578:	f7ff fd3c 	bl	8001ff4 <TIM6_START>
	sprintf(buf, "notes A,B,C,D,E,F,G, %s, duration %dms\n", octaveNames[octave], duration);
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <playAll+0x4c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <playAll+0x50>)
 8002584:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <playAll+0x54>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4908      	ldr	r1, [pc, #32]	; (80025b0 <playAll+0x58>)
 800258e:	4809      	ldr	r0, [pc, #36]	; (80025b4 <playAll+0x5c>)
 8002590:	f004 fc06 	bl	8006da0 <siprintf>
	return buf;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <playAll+0x5c>)
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000030c 	.word	0x2000030c
 80025a0:	080085a4 	.word	0x080085a4
 80025a4:	20000008 	.word	0x20000008
 80025a8:	2000000c 	.word	0x2000000c
 80025ac:	20000084 	.word	0x20000084
 80025b0:	080085d4 	.word	0x080085d4
 80025b4:	20000310 	.word	0x20000310

080025b8 <upOctave>:

char* upOctave() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <upOctave+0x44>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <upOctave+0x10>
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <upOctave+0x48>)
 80025c6:	e017      	b.n	80025f8 <upOctave+0x40>
	if (octave < 8) {
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <upOctave+0x4c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b07      	cmp	r3, #7
 80025ce:	d812      	bhi.n	80025f6 <upOctave+0x3e>
		octave++;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <upOctave+0x4c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <upOctave+0x4c>)
 80025da:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "%s\n", octaveNames[octave]);
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <upOctave+0x4c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <upOctave+0x50>)
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <upOctave+0x54>)
 80025ec:	4808      	ldr	r0, [pc, #32]	; (8002610 <upOctave+0x58>)
 80025ee:	f004 fbd7 	bl	8006da0 <siprintf>
		return buf;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <upOctave+0x58>)
 80025f4:	e000      	b.n	80025f8 <upOctave+0x40>
	}
	return "Octave is maximum\n";
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <upOctave+0x5c>)
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000030c 	.word	0x2000030c
 8002600:	080085a4 	.word	0x080085a4
 8002604:	20000008 	.word	0x20000008
 8002608:	2000000c 	.word	0x2000000c
 800260c:	080085fc 	.word	0x080085fc
 8002610:	20000310 	.word	0x20000310
 8002614:	08008600 	.word	0x08008600

08002618 <downOctave>:

char* downOctave() {
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <downOctave+0x44>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <downOctave+0x10>
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <downOctave+0x48>)
 8002626:	e017      	b.n	8002658 <downOctave+0x40>
	if (octave > 0) {
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <downOctave+0x4c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <downOctave+0x3e>
		octave--;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <downOctave+0x4c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	3b01      	subs	r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <downOctave+0x4c>)
 800263a:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "%s\n", octaveNames[octave]);
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <downOctave+0x4c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <downOctave+0x50>)
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	461a      	mov	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <downOctave+0x54>)
 800264c:	4808      	ldr	r0, [pc, #32]	; (8002670 <downOctave+0x58>)
 800264e:	f004 fba7 	bl	8006da0 <siprintf>
		return buf;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <downOctave+0x58>)
 8002654:	e000      	b.n	8002658 <downOctave+0x40>
	}
	return "Octave is minimum\n";
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <downOctave+0x5c>)
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000030c 	.word	0x2000030c
 8002660:	080085a4 	.word	0x080085a4
 8002664:	20000008 	.word	0x20000008
 8002668:	2000000c 	.word	0x2000000c
 800266c:	080085fc 	.word	0x080085fc
 8002670:	20000310 	.word	0x20000310
 8002674:	08008614 	.word	0x08008614

08002678 <upDuration>:

char* upDuration() {
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <upDuration+0x48>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <upDuration+0x10>
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <upDuration+0x4c>)
 8002686:	e019      	b.n	80026bc <upDuration+0x44>
	if (duration < 5000) {
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <upDuration+0x50>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002690:	4293      	cmp	r3, r2
 8002692:	dc12      	bgt.n	80026ba <upDuration+0x42>
		TIM6->ARR += 100;
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <upDuration+0x54>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <upDuration+0x54>)
 800269a:	3364      	adds	r3, #100	; 0x64
 800269c:	62d3      	str	r3, [r2, #44]	; 0x2c
		duration += 100;
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <upDuration+0x50>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3364      	adds	r3, #100	; 0x64
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <upDuration+0x50>)
 80026a6:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <upDuration+0x50>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <upDuration+0x58>)
 80026b0:	4808      	ldr	r0, [pc, #32]	; (80026d4 <upDuration+0x5c>)
 80026b2:	f004 fb75 	bl	8006da0 <siprintf>
		return buf;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <upDuration+0x5c>)
 80026b8:	e000      	b.n	80026bc <upDuration+0x44>
	}
	return "Duration is maximum\n";
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <upDuration+0x60>)
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000030c 	.word	0x2000030c
 80026c4:	080085a4 	.word	0x080085a4
 80026c8:	20000084 	.word	0x20000084
 80026cc:	40001000 	.word	0x40001000
 80026d0:	08008628 	.word	0x08008628
 80026d4:	20000310 	.word	0x20000310
 80026d8:	08008630 	.word	0x08008630

080026dc <downDuration>:

char* downDuration() {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <downDuration+0x44>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <downDuration+0x10>
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <downDuration+0x48>)
 80026ea:	e017      	b.n	800271c <downDuration+0x40>
	if (duration > 100) {
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <downDuration+0x4c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	dd12      	ble.n	800271a <downDuration+0x3e>
		TIM6->ARR -= 100;
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <downDuration+0x50>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <downDuration+0x50>)
 80026fa:	3b64      	subs	r3, #100	; 0x64
 80026fc:	62d3      	str	r3, [r2, #44]	; 0x2c
		duration -= 100;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <downDuration+0x4c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3b64      	subs	r3, #100	; 0x64
 8002704:	4a08      	ldr	r2, [pc, #32]	; (8002728 <downDuration+0x4c>)
 8002706:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <downDuration+0x4c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <downDuration+0x54>)
 8002710:	4808      	ldr	r0, [pc, #32]	; (8002734 <downDuration+0x58>)
 8002712:	f004 fb45 	bl	8006da0 <siprintf>
		return buf;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <downDuration+0x58>)
 8002718:	e000      	b.n	800271c <downDuration+0x40>
	}
	return "Duration is minimum\n";
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <downDuration+0x5c>)
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000030c 	.word	0x2000030c
 8002724:	080085a4 	.word	0x080085a4
 8002728:	20000084 	.word	0x20000084
 800272c:	40001000 	.word	0x40001000
 8002730:	08008628 	.word	0x08008628
 8002734:	20000310 	.word	0x20000310
 8002738:	08008648 	.word	0x08008648

0800273c <disableIsPlaying>:

void disableIsPlaying() {
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	isPlaying = 0;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <disableIsPlaying+0x14>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	2000030c 	.word	0x2000030c

08002754 <uartHardwareTransmitPolling>:
#include "usart.h"

uint8_t usartHardwareTransmitBuffer;
uint8_t usartHardwareReceiveBuffer;

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	460a      	mov	r2, r1
 800275e:	71fb      	strb	r3, [r7, #7]
 8002760:	4613      	mov	r3, r2
 8002762:	80bb      	strh	r3, [r7, #4]
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
 8002764:	88bb      	ldrh	r3, [r7, #4]
 8002766:	1df9      	adds	r1, r7, #7
 8002768:	2201      	movs	r2, #1
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <uartHardwareTransmitPolling+0x30>)
 800276c:	f003 fa27 	bl	8005bbe <HAL_UART_Transmit>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200002b8 	.word	0x200002b8

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800278e:	490e      	ldr	r1, [pc, #56]	; (80027c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a4:	4c0b      	ldr	r4, [pc, #44]	; (80027d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b2:	f7ff fabf 	bl	8001d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b6:	f004 f9cf 	bl	8006b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7fe ff9b 	bl	80016f4 <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c8:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80027cc:	08008700 	.word	0x08008700
  ldr r2, =_sbss
 80027d0:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80027d4:	200003a4 	.word	0x200003a4

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_Init+0x40>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_Init+0x40>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_Init+0x40>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002804:	2003      	movs	r0, #3
 8002806:	f000 f92b 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280a:	200f      	movs	r0, #15
 800280c:	f000 f808 	bl	8002820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002810:	f7ff f9f4 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x54>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x58>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f943 	bl	8002aca <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00e      	b.n	800286c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d80a      	bhi.n	800286a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002854:	2200      	movs	r2, #0
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f000 f90b 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_InitTick+0x5c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000004 	.word	0x20000004
 8002878:	2000008c 	.word	0x2000008c
 800287c:	20000088 	.word	0x20000088

08002880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x20>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x24>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4413      	add	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_IncTick+0x24>)
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000008c 	.word	0x2000008c
 80028a4:	20000390 	.word	0x20000390

080028a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_GetTick+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000390 	.word	0x20000390

080028c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <__NVIC_SetPriorityGrouping+0x44>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f2:	4a04      	ldr	r2, [pc, #16]	; (8002904 <__NVIC_SetPriorityGrouping+0x44>)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	60d3      	str	r3, [r2, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <__NVIC_GetPriorityGrouping+0x18>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f003 0307 	and.w	r3, r3, #7
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	2b00      	cmp	r3, #0
 8002934:	db0b      	blt.n	800294e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <__NVIC_EnableIRQ+0x38>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2001      	movs	r0, #1
 8002946:	fa00 f202 	lsl.w	r2, r0, r2
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e100 	.word	0xe000e100

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff8e 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff29 	bl	80028c0 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff3e 	bl	8002908 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff8e 	bl	80029b4 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5d 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff31 	bl	8002924 <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff feda 	bl	80028a8 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d008      	beq.n	8002b14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e052      	b.n	8002bba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0216 	bic.w	r2, r2, #22
 8002b22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <HAL_DMA_Abort+0x62>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0208 	bic.w	r2, r2, #8
 8002b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b64:	e013      	b.n	8002b8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b66:	f7ff fe9f 	bl	80028a8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d90c      	bls.n	8002b8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e015      	b.n	8002bba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e4      	bne.n	8002b66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e00c      	b.n	8002bfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2205      	movs	r2, #5
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e177      	b.n	8002f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c24:	2201      	movs	r2, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f040 8166 	bne.w	8002f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d005      	beq.n	8002c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d130      	bne.n	8002cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c90:	2201      	movs	r2, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 0201 	and.w	r2, r3, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d017      	beq.n	8002cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d123      	bne.n	8002d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	08da      	lsrs	r2, r3, #3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3208      	adds	r2, #8
 8002d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	69b9      	ldr	r1, [r7, #24]
 8002d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0203 	and.w	r2, r3, #3
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80c0 	beq.w	8002f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002daa:	4a61      	ldr	r2, [pc, #388]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d037      	beq.n	8002e46 <HAL_GPIO_Init+0x23e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_GPIO_Init+0x23a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a56      	ldr	r2, [pc, #344]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x236>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a55      	ldr	r2, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x338>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x232>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <HAL_GPIO_Init+0x33c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x22e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a53      	ldr	r2, [pc, #332]	; (8002f48 <HAL_GPIO_Init+0x340>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x22a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_GPIO_Init+0x344>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <HAL_GPIO_Init+0x348>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x222>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <HAL_GPIO_Init+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x21e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x21a>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e012      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e010      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e26:	2308      	movs	r3, #8
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae84 	bls.w	8002c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022400 	.word	0x40022400
 8002f5c:	40013c00 	.word	0x40013c00

08002f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e12b      	b.n	800322e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe f97a 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003028:	f001 fc36 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4a81      	ldr	r2, [pc, #516]	; (8003238 <HAL_I2C_Init+0x274>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d807      	bhi.n	8003048 <HAL_I2C_Init+0x84>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a80      	ldr	r2, [pc, #512]	; (800323c <HAL_I2C_Init+0x278>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e006      	b.n	8003056 <HAL_I2C_Init+0x92>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a7d      	ldr	r2, [pc, #500]	; (8003240 <HAL_I2C_Init+0x27c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	bf94      	ite	ls
 8003050:	2301      	movls	r3, #1
 8003052:	2300      	movhi	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0e7      	b.n	800322e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a78      	ldr	r2, [pc, #480]	; (8003244 <HAL_I2C_Init+0x280>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0c9b      	lsrs	r3, r3, #18
 8003068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <HAL_I2C_Init+0x274>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d802      	bhi.n	8003098 <HAL_I2C_Init+0xd4>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	e009      	b.n	80030ac <HAL_I2C_Init+0xe8>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_I2C_Init+0x284>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	3301      	adds	r3, #1
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	495c      	ldr	r1, [pc, #368]	; (8003238 <HAL_I2C_Init+0x274>)
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d819      	bhi.n	8003100 <HAL_I2C_Init+0x13c>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e59      	subs	r1, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e0:	400b      	ands	r3, r1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_I2C_Init+0x138>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e59      	subs	r1, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fa:	e051      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e04f      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d111      	bne.n	800312c <HAL_I2C_Init+0x168>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e58      	subs	r0, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e012      	b.n	8003152 <HAL_I2C_Init+0x18e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e58      	subs	r0, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	0099      	lsls	r1, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x196>
 8003156:	2301      	movs	r3, #1
 8003158:	e022      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10e      	bne.n	8003180 <HAL_I2C_Init+0x1bc>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e58      	subs	r0, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	440b      	add	r3, r1
 8003170:	fbb0 f3f3 	udiv	r3, r0, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317e:	e00f      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	0099      	lsls	r1, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	6809      	ldr	r1, [r1, #0]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6911      	ldr	r1, [r2, #16]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	4311      	orrs	r1, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	000186a0 	.word	0x000186a0
 800323c:	001e847f 	.word	0x001e847f
 8003240:	003d08ff 	.word	0x003d08ff
 8003244:	431bde83 	.word	0x431bde83
 8003248:	10624dd3 	.word	0x10624dd3

0800324c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	460b      	mov	r3, r1
 8003260:	813b      	strh	r3, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003266:	f7ff fb1f 	bl	80028a8 <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	f040 80d9 	bne.w	800342c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2319      	movs	r3, #25
 8003280:	2201      	movs	r2, #1
 8003282:	496d      	ldr	r1, [pc, #436]	; (8003438 <HAL_I2C_Mem_Write+0x1ec>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fc7f 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	e0cc      	b.n	800342e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Mem_Write+0x56>
 800329e:	2302      	movs	r3, #2
 80032a0:	e0c5      	b.n	800342e <HAL_I2C_Mem_Write+0x1e2>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d007      	beq.n	80032c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2221      	movs	r2, #33	; 0x21
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a4d      	ldr	r2, [pc, #308]	; (800343c <HAL_I2C_Mem_Write+0x1f0>)
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800330a:	88f8      	ldrh	r0, [r7, #6]
 800330c:	893a      	ldrh	r2, [r7, #8]
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fab6 	bl	800388c <I2C_RequestMemoryWrite>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d052      	beq.n	80033cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e081      	b.n	800342e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fd00 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b04      	cmp	r3, #4
 8003340:	d107      	bne.n	8003352 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06b      	b.n	800342e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d11b      	bne.n	80033cc <HAL_I2C_Mem_Write+0x180>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d017      	beq.n	80033cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1aa      	bne.n	800332a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fcec 	bl	8003db6 <I2C_WaitOnBTFFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d107      	bne.n	80033fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e016      	b.n	800342e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	00100002 	.word	0x00100002
 800343c:	ffff0000 	.word	0xffff0000

08003440 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	4608      	mov	r0, r1
 800344a:	4611      	mov	r1, r2
 800344c:	461a      	mov	r2, r3
 800344e:	4603      	mov	r3, r0
 8003450:	817b      	strh	r3, [r7, #10]
 8003452:	460b      	mov	r3, r1
 8003454:	813b      	strh	r3, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800345a:	f7ff fa25 	bl	80028a8 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b20      	cmp	r3, #32
 800346a:	f040 8208 	bne.w	800387e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2319      	movs	r3, #25
 8003474:	2201      	movs	r2, #1
 8003476:	497b      	ldr	r1, [pc, #492]	; (8003664 <HAL_I2C_Mem_Read+0x224>)
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fb85 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
 8003486:	e1fb      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_I2C_Mem_Read+0x56>
 8003492:	2302      	movs	r3, #2
 8003494:	e1f4      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d007      	beq.n	80034bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2222      	movs	r2, #34	; 0x22
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_I2C_Mem_Read+0x228>)
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034fe:	88f8      	ldrh	r0, [r7, #6]
 8003500:	893a      	ldrh	r2, [r7, #8]
 8003502:	8979      	ldrh	r1, [r7, #10]
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	4603      	mov	r3, r0
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fa52 	bl	80039b8 <I2C_RequestMemoryRead>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1b0      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d113      	bne.n	800354e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e184      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	2b01      	cmp	r3, #1
 8003554:	d11b      	bne.n	800358e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e164      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	2b02      	cmp	r3, #2
 8003594:	d11b      	bne.n	80035ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	e144      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035e4:	e138      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	f200 80f1 	bhi.w	80037d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d123      	bne.n	8003640 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fc1b 	bl	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e139      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800363e:	e10b      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	2b02      	cmp	r3, #2
 8003646:	d14e      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	2200      	movs	r2, #0
 8003650:	4906      	ldr	r1, [pc, #24]	; (800366c <HAL_I2C_Mem_Read+0x22c>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa98 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e10e      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
 8003662:	bf00      	nop
 8003664:	00100002 	.word	0x00100002
 8003668:	ffff0000 	.word	0xffff0000
 800366c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e4:	e0b8      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	2200      	movs	r2, #0
 80036ee:	4966      	ldr	r1, [pc, #408]	; (8003888 <HAL_I2C_Mem_Read+0x448>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa49 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0bf      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2200      	movs	r2, #0
 800374a:	494f      	ldr	r1, [pc, #316]	; (8003888 <HAL_I2C_Mem_Read+0x448>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fa1b 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e091      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d0:	e042      	b.n	8003858 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb2e 	bl	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e04c      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d118      	bne.n	8003858 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f aec2 	bne.w	80035e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	00010004 	.word	0x00010004

0800388c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2200      	movs	r2, #0
 80038be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f960 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038dc:	d103      	bne.n	80038e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e05f      	b.n	80039aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	492d      	ldr	r1, [pc, #180]	; (80039b4 <I2C_RequestMemoryWrite+0x128>)
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f998 	bl	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e04c      	b.n	80039aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	6a39      	ldr	r1, [r7, #32]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa02 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b04      	cmp	r3, #4
 800393c:	d107      	bne.n	800394e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e02b      	b.n	80039aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003958:	893b      	ldrh	r3, [r7, #8]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]
 8003962:	e021      	b.n	80039a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003964:	893b      	ldrh	r3, [r7, #8]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b29b      	uxth	r3, r3
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	6a39      	ldr	r1, [r7, #32]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f9dc 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2b04      	cmp	r3, #4
 8003988:	d107      	bne.n	800399a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e005      	b.n	80039aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800399e:	893b      	ldrh	r3, [r7, #8]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	00010002 	.word	0x00010002

080039b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f8c2 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d103      	bne.n	8003a22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0aa      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	4952      	ldr	r1, [pc, #328]	; (8003b84 <I2C_RequestMemoryRead+0x1cc>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8fa 	bl	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e097      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6a39      	ldr	r1, [r7, #32]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f964 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d107      	bne.n	8003a8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e076      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a94:	893b      	ldrh	r3, [r7, #8]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]
 8003a9e:	e021      	b.n	8003ae4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f93e 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e050      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ada:	893b      	ldrh	r3, [r7, #8]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	6a39      	ldr	r1, [r7, #32]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f923 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00d      	beq.n	8003b10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d107      	bne.n	8003b0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e035      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f82b 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b46:	d103      	bne.n	8003b50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e013      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b54:	897b      	ldrh	r3, [r7, #10]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	6a3a      	ldr	r2, [r7, #32]
 8003b68:	4906      	ldr	r1, [pc, #24]	; (8003b84 <I2C_RequestMemoryRead+0x1cc>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f863 	bl	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	00010002 	.word	0x00010002

08003b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	e025      	b.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d021      	beq.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fe81 	bl	80028a8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e023      	b.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10d      	bne.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	e00c      	b.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d0b6      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c44:	e051      	b.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d123      	bne.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e046      	b.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d021      	beq.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fe fdff 	bl	80028a8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d116      	bne.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e020      	b.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10c      	bne.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e00b      	b.n	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	43da      	mvns	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d18d      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d40:	e02d      	b.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f8ce 	bl	8003ee4 <I2C_IsAcknowledgeFailed>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e02d      	b.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d021      	beq.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe fda5 	bl	80028a8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e007      	b.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d1ca      	bne.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc2:	e02d      	b.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f88d 	bl	8003ee4 <I2C_IsAcknowledgeFailed>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e02d      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d021      	beq.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ddc:	f7fe fd64 	bl	80028a8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d116      	bne.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d1ca      	bne.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e44:	e042      	b.n	8003ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d119      	bne.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0210 	mvn.w	r2, #16
 8003e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e029      	b.n	8003edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e88:	f7fe fd0e 	bl	80028a8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d1b5      	bne.n	8003e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efa:	d11b      	bne.n	8003f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d129      	bne.n	8003fac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	; 0x24
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0210 	bic.w	r2, r2, #16
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d12a      	bne.n	800402a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	f023 030f 	bic.w	r3, r3, #15
 8003ffa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	89fb      	ldrh	r3, [r7, #14]
 8004002:	4313      	orrs	r3, r2
 8004004:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	89fa      	ldrh	r2, [r7, #14]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e267      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d075      	beq.n	8004142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00c      	beq.n	800407c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406a:	2b08      	cmp	r3, #8
 800406c:	d112      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407a:	d10b      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	4b7e      	ldr	r3, [pc, #504]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05b      	beq.n	8004140 <HAL_RCC_OscConfig+0x108>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d157      	bne.n	8004140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e242      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d106      	bne.n	80040ac <HAL_RCC_OscConfig+0x74>
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e01d      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b6d      	ldr	r3, [pc, #436]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6c      	ldr	r2, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a68      	ldr	r2, [pc, #416]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b66      	ldr	r3, [pc, #408]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a65      	ldr	r2, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe fbda 	bl	80028a8 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fe fbd6 	bl	80028a8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e207      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b5b      	ldr	r3, [pc, #364]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0xc0>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe fbc6 	bl	80028a8 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004120:	f7fe fbc2 	bl	80028a8 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1f3      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	4b51      	ldr	r3, [pc, #324]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0xe8>
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d063      	beq.n	8004216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414e:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004162:	2b08      	cmp	r3, #8
 8004164:	d11c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x152>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c7      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4937      	ldr	r1, [pc, #220]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	e03a      	b.n	8004216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCC_OscConfig+0x244>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe fb7b 	bl	80028a8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fe fb77 	bl	80028a8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e1a8      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4925      	ldr	r1, [pc, #148]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_OscConfig+0x244>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fe fb5a 	bl	80028a8 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fe fb56 	bl	80028a8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e187      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d036      	beq.n	8004290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCC_OscConfig+0x248>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fe fb3a 	bl	80028a8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004238:	f7fe fb36 	bl	80028a8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e167      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x200>
 8004256:	e01b      	b.n	8004290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_OscConfig+0x248>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7fe fb23 	bl	80028a8 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e00e      	b.n	8004284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004266:	f7fe fb1f 	bl	80028a8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d907      	bls.n	8004284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e150      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ea      	bne.n	8004266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8097 	beq.w	80043cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	4b7d      	ldr	r3, [pc, #500]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a7c      	ldr	r2, [pc, #496]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b77      	ldr	r3, [pc, #476]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b74      	ldr	r3, [pc, #464]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a73      	ldr	r2, [pc, #460]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fe fadf 	bl	80028a8 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7fe fadb 	bl	80028a8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e10c      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x2ea>
 8004314:	4b64      	ldr	r3, [pc, #400]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a63      	ldr	r2, [pc, #396]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	e01c      	b.n	800435c <HAL_RCC_OscConfig+0x324>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x30c>
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a5e      	ldr	r2, [pc, #376]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a5b      	ldr	r2, [pc, #364]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0x324>
 8004344:	4b58      	ldr	r3, [pc, #352]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a57      	ldr	r2, [pc, #348]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	4b55      	ldr	r3, [pc, #340]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a54      	ldr	r2, [pc, #336]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fe faa0 	bl	80028a8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fe fa9c 	bl	80028a8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0cb      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ee      	beq.n	800436c <HAL_RCC_OscConfig+0x334>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fe fa8a 	bl	80028a8 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fe fa86 	bl	80028a8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0b5      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ee      	bne.n	8004398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	4a38      	ldr	r2, [pc, #224]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80a1 	beq.w	8004518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d05c      	beq.n	800449c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d141      	bne.n	800446e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_RCC_OscConfig+0x478>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe fa5a 	bl	80028a8 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fe fa56 	bl	80028a8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e087      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	491b      	ldr	r1, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCC_OscConfig+0x478>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fe fa2f 	bl	80028a8 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fa2b 	bl	80028a8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e05c      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x416>
 800446c:	e054      	b.n	8004518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCC_OscConfig+0x478>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe fa18 	bl	80028a8 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7fe fa14 	bl	80028a8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e045      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x444>
 800449a:	e03d      	b.n	8004518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e038      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000
 80044b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x4ec>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d028      	beq.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d121      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d11a      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d111      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	3b01      	subs	r3, #1
 80044fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cc      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90c      	bls.n	8004564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b63      	ldr	r3, [pc, #396]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0b8      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b53      	ldr	r3, [pc, #332]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b50      	ldr	r3, [pc, #320]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	494d      	ldr	r1, [pc, #308]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d044      	beq.n	8004648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d119      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e067      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004606:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 0203 	bic.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4934      	ldr	r1, [pc, #208]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004618:	f7fe f946 	bl	80028a8 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7fe f942 	bl	80028a8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e04f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 020c 	and.w	r2, r3, #12
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	429a      	cmp	r2, r3
 8004646:	d1eb      	bne.n	8004620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d20c      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e032      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4916      	ldr	r1, [pc, #88]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ae:	f000 f821 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490a      	ldr	r1, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe f8a6 	bl	8002820 <HAL_InitTick>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40023c00 	.word	0x40023c00
 80046e4:	40023800 	.word	0x40023800
 80046e8:	08008660 	.word	0x08008660
 80046ec:	20000004 	.word	0x20000004
 80046f0:	20000088 	.word	0x20000088

080046f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f8:	b090      	sub	sp, #64	; 0x40
 80046fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004700:	2300      	movs	r3, #0
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004704:	2300      	movs	r3, #0
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_GetSysClockFreq+0x180>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
 8004714:	2b08      	cmp	r3, #8
 8004716:	d00d      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x40>
 8004718:	2b08      	cmp	r3, #8
 800471a:	f200 80a1 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x16c>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x34>
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0x3a>
 8004726:	e09b      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_GetSysClockFreq+0x184>)
 800472a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800472c:	e09b      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472e:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_GetSysClockFreq+0x188>)
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004732:	e098      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <HAL_RCC_GetSysClockFreq+0x180>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473e:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <HAL_RCC_GetSysClockFreq+0x180>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d028      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b4a      	ldr	r3, [pc, #296]	; (8004874 <HAL_RCC_GetSysClockFreq+0x180>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	2200      	movs	r2, #0
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	627a      	str	r2, [r7, #36]	; 0x24
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800475c:	2100      	movs	r1, #0
 800475e:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_GetSysClockFreq+0x188>)
 8004760:	fb03 f201 	mul.w	r2, r3, r1
 8004764:	2300      	movs	r3, #0
 8004766:	fb00 f303 	mul.w	r3, r0, r3
 800476a:	4413      	add	r3, r2
 800476c:	4a43      	ldr	r2, [pc, #268]	; (800487c <HAL_RCC_GetSysClockFreq+0x188>)
 800476e:	fba0 1202 	umull	r1, r2, r0, r2
 8004772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004774:	460a      	mov	r2, r1
 8004776:	62ba      	str	r2, [r7, #40]	; 0x28
 8004778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477a:	4413      	add	r3, r2
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	2200      	movs	r2, #0
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800478e:	f7fc fa23 	bl	8000bd8 <__aeabi_uldivmod>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4613      	mov	r3, r2
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479a:	e053      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479c:	4b35      	ldr	r3, [pc, #212]	; (8004874 <HAL_RCC_GetSysClockFreq+0x180>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	099b      	lsrs	r3, r3, #6
 80047a2:	2200      	movs	r2, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	617a      	str	r2, [r7, #20]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047ae:	f04f 0b00 	mov.w	fp, #0
 80047b2:	4652      	mov	r2, sl
 80047b4:	465b      	mov	r3, fp
 80047b6:	f04f 0000 	mov.w	r0, #0
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c4:	0150      	lsls	r0, r2, #5
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	ebb2 080a 	subs.w	r8, r2, sl
 80047ce:	eb63 090b 	sbc.w	r9, r3, fp
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047e6:	ebb2 0408 	subs.w	r4, r2, r8
 80047ea:	eb63 0509 	sbc.w	r5, r3, r9
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	00eb      	lsls	r3, r5, #3
 80047f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fc:	00e2      	lsls	r2, r4, #3
 80047fe:	4614      	mov	r4, r2
 8004800:	461d      	mov	r5, r3
 8004802:	eb14 030a 	adds.w	r3, r4, sl
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	eb45 030b 	adc.w	r3, r5, fp
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482e:	2200      	movs	r2, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	60fa      	str	r2, [r7, #12]
 8004834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004838:	f7fc f9ce 	bl	8000bd8 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_GetSysClockFreq+0x180>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetSysClockFreq+0x184>)
 8004862:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004868:	4618      	mov	r0, r3
 800486a:	3740      	adds	r7, #64	; 0x40
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	017d7840 	.word	0x017d7840

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_RCC_GetHCLKFreq+0x14>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000004 	.word	0x20000004

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff0 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	08008670 	.word	0x08008670

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffdc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0b5b      	lsrs	r3, r3, #13
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	08008670 	.word	0x08008670

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd faf8 	bl	8001f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fd0a 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e046      	b.n	8004a2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_TIM_Base_Start+0xb4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d01d      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_TIM_Base_Start+0xb8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_TIM_Base_Start+0xbc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <HAL_TIM_Base_Start+0xc0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_TIM_Base_Start+0xc4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <HAL_TIM_Base_Start+0xc8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_TIM_Base_Start+0xcc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d111      	bne.n	8004a1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b06      	cmp	r3, #6
 8004a08:	d010      	beq.n	8004a2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e007      	b.n	8004a2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40001800 	.word	0x40001800

08004a58 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10f      	bne.n	8004a90 <HAL_TIM_Base_Stop+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a1a      	ldr	r2, [r3, #32]
 8004a76:	f240 4344 	movw	r3, #1092	; 0x444
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_Base_Stop+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e04e      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d01d      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1f      	ldr	r2, [pc, #124]	; (8004b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d010      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e007      	b.n	8004b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40010400 	.word	0x40010400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40001800 	.word	0x40001800

08004b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f839 	bl	8004c26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fbba 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_TIM_PWM_Start+0x24>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e022      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x6a>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d109      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x3e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e015      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x6a>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d109      	bne.n	8004c94 <HAL_TIM_PWM_Start+0x58>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e008      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x6a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e07c      	b.n	8004da8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0x82>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbc:	e013      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xaa>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0x92>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	e00b      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xaa>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xa2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cdc:	e003      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xaa>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fe10 	bl	8005914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <HAL_TIM_PWM_Start+0x174>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_TIM_PWM_Start+0xcc>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <HAL_TIM_PWM_Start+0x178>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_PWM_Start+0xd0>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_TIM_PWM_Start+0xd2>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_TIM_PWM_Start+0x174>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d01d      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <HAL_TIM_PWM_Start+0x17c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <HAL_TIM_PWM_Start+0x180>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_TIM_PWM_Start+0x184>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <HAL_TIM_PWM_Start+0x178>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <HAL_TIM_PWM_Start+0x188>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x136>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <HAL_TIM_PWM_Start+0x18c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d111      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b06      	cmp	r3, #6
 8004d82:	d010      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d94:	e007      	b.n	8004da6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40010400 	.word	0x40010400
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40001800 	.word	0x40001800

08004dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d122      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d11b      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0202 	mvn.w	r2, #2
 8004df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa77 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fa69 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fa7a 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0204 	mvn.w	r2, #4
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa4d 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa3f 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa50 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0208 	mvn.w	r2, #8
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa23 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa15 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fa26 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0210 	mvn.w	r2, #16
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2208      	movs	r2, #8
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f9f9 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9eb 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9fc 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0201 	mvn.w	r2, #1
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd f87e 	bl	800204c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d10e      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fdca 	bl	8005b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d10e      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9c1 	bl	800532a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0220 	mvn.w	r2, #32
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fd94 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0ae      	b.n	8005158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	f200 809f 	bhi.w	8005148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005045 	.word	0x08005045
 8005014:	08005149 	.word	0x08005149
 8005018:	08005149 	.word	0x08005149
 800501c:	08005149 	.word	0x08005149
 8005020:	08005085 	.word	0x08005085
 8005024:	08005149 	.word	0x08005149
 8005028:	08005149 	.word	0x08005149
 800502c:	08005149 	.word	0x08005149
 8005030:	080050c7 	.word	0x080050c7
 8005034:	08005149 	.word	0x08005149
 8005038:	08005149 	.word	0x08005149
 800503c:	08005149 	.word	0x08005149
 8005040:	08005107 	.word	0x08005107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fa18 	bl	8005480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0208 	orr.w	r2, r2, #8
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
      break;
 8005082:	e064      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa68 	bl	8005560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e043      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fabd 	bl	800564c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
      break;
 8005104:	e023      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fb11 	bl	8005734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	61da      	str	r2, [r3, #28]
      break;
 8005146:	e002      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIM_ConfigClockSource+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e0b4      	b.n	80052e6 <HAL_TIM_ConfigClockSource+0x186>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800519a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	d03e      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0xd4>
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ba:	f200 8087 	bhi.w	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	f000 8086 	beq.w	80052d2 <HAL_TIM_ConfigClockSource+0x172>
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d87f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d01a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xa6>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d87b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b60      	cmp	r3, #96	; 0x60
 80051d6:	d050      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x11a>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d877      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b50      	cmp	r3, #80	; 0x50
 80051de:	d03c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xfa>
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d873      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d058      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x13a>
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d86f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b30      	cmp	r3, #48	; 0x30
 80051ee:	d064      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d86b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d060      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d867      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005200:	2b10      	cmp	r3, #16
 8005202:	d05a      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	e062      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f000 fb5d 	bl	80058d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
      break;
 8005232:	e04f      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6899      	ldr	r1, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f000 fb46 	bl	80058d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005256:	609a      	str	r2, [r3, #8]
      break;
 8005258:	e03c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f000 faba 	bl	80057e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2150      	movs	r1, #80	; 0x50
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb13 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005278:	e02c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fad9 	bl	800583e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2160      	movs	r1, #96	; 0x60
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fb03 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005298:	e01c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fa9a 	bl	80057e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2140      	movs	r1, #64	; 0x40
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 faf3 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80052b8:	e00c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 faea 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80052ca:	e003      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a40      	ldr	r2, [pc, #256]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d00f      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a3d      	ldr	r2, [pc, #244]	; (8005458 <TIM_Base_SetConfig+0x118>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3c      	ldr	r2, [pc, #240]	; (800545c <TIM_Base_SetConfig+0x11c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <TIM_Base_SetConfig+0x120>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <TIM_Base_SetConfig+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2f      	ldr	r2, [pc, #188]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d02b      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d027      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <TIM_Base_SetConfig+0x118>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d023      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <TIM_Base_SetConfig+0x11c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01f      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <TIM_Base_SetConfig+0x120>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01b      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a29      	ldr	r2, [pc, #164]	; (8005464 <TIM_Base_SetConfig+0x124>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d017      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <TIM_Base_SetConfig+0x128>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a27      	ldr	r2, [pc, #156]	; (800546c <TIM_Base_SetConfig+0x12c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00f      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <TIM_Base_SetConfig+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00b      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <TIM_Base_SetConfig+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a24      	ldr	r2, [pc, #144]	; (8005478 <TIM_Base_SetConfig+0x138>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a23      	ldr	r2, [pc, #140]	; (800547c <TIM_Base_SetConfig+0x13c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d108      	bne.n	8005404 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <TIM_Base_SetConfig+0x114>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <TIM_Base_SetConfig+0x124>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	615a      	str	r2, [r3, #20]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	40001800 	.word	0x40001800
 8005478:	40001c00 	.word	0x40001c00
 800547c:	40002000 	.word	0x40002000

08005480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0302 	bic.w	r3, r3, #2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a20      	ldr	r2, [pc, #128]	; (8005558 <TIM_OC1_SetConfig+0xd8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC1_SetConfig+0x64>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <TIM_OC1_SetConfig+0xdc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10c      	bne.n	80054fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0308 	bic.w	r3, r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <TIM_OC1_SetConfig+0xd8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_OC1_SetConfig+0x8e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a14      	ldr	r2, [pc, #80]	; (800555c <TIM_OC1_SetConfig+0xdc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0210 	bic.w	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0320 	bic.w	r3, r3, #32
 80055aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a22      	ldr	r2, [pc, #136]	; (8005644 <TIM_OC2_SetConfig+0xe4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC2_SetConfig+0x68>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a21      	ldr	r2, [pc, #132]	; (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10d      	bne.n	80055e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a17      	ldr	r2, [pc, #92]	; (8005644 <TIM_OC2_SetConfig+0xe4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0x94>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d113      	bne.n	800561c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400

0800564c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a21      	ldr	r2, [pc, #132]	; (800572c <TIM_OC3_SetConfig+0xe0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC3_SetConfig+0x66>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a20      	ldr	r2, [pc, #128]	; (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10d      	bne.n	80056ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <TIM_OC3_SetConfig+0xe0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0x92>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d113      	bne.n	8005706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400

08005734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <TIM_OC4_SetConfig+0xa4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC4_SetConfig+0x68>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <TIM_OC4_SetConfig+0xa8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d109      	bne.n	80057b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40010400 	.word	0x40010400

080057e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 030a 	bic.w	r3, r3, #10
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583e:	b480      	push	{r7}
 8005840:	b087      	sub	sp, #28
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f023 0210 	bic.w	r2, r3, #16
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800587a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 0307 	orr.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2201      	movs	r2, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e05a      	b.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d01d      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10c      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40001800 	.word	0x40001800

08005a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e03d      	b.n	8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e03f      	b.n	8005bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fc fae6 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fd7b 	bl	8006664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b08a      	sub	sp, #40	; 0x28
 8005bc2:	af02      	add	r7, sp, #8
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d17c      	bne.n	8005cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Transmit+0x2c>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e075      	b.n	8005cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Transmit+0x3e>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e06e      	b.n	8005cda <HAL_UART_Transmit+0x11c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2221      	movs	r2, #33	; 0x21
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c12:	f7fc fe49 	bl	80028a8 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2c:	d108      	bne.n	8005c40 <HAL_UART_Transmit+0x82>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e003      	b.n	8005c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c50:	e02a      	b.n	8005ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 faf9 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e036      	b.n	8005cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	3302      	adds	r3, #2
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e007      	b.n	8005c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1cf      	bne.n	8005c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2140      	movs	r1, #64	; 0x40
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fac9 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e006      	b.n	8005cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b0ba      	sub	sp, #232	; 0xe8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10f      	bne.n	8005d4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <HAL_UART_IRQHandler+0x66>
 8005d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fbd3 	bl	80064ee <UART_Receive_IT>
      return;
 8005d48:	e256      	b.n	80061f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80de 	beq.w	8005f10 <HAL_UART_IRQHandler+0x22c>
 8005d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80d1 	beq.w	8005f10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_UART_IRQHandler+0xae>
 8005d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f043 0201 	orr.w	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <HAL_UART_IRQHandler+0xd2>
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0202 	orr.w	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0xf6>
 8005dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f043 0204 	orr.w	r2, r3, #4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d011      	beq.n	8005e0a <HAL_UART_IRQHandler+0x126>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f043 0208 	orr.w	r2, r3, #8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 81ed 	beq.w	80061ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_UART_IRQHandler+0x14e>
 8005e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb5e 	bl	80064ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <HAL_UART_IRQHandler+0x17a>
 8005e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d04f      	beq.n	8005efe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa66 	bl	8006330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d141      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3314      	adds	r3, #20
 8005e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1d9      	bne.n	8005e72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d013      	beq.n	8005eee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	4a7d      	ldr	r2, [pc, #500]	; (80060c0 <HAL_UART_IRQHandler+0x3dc>)
 8005ecc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fc fe75 	bl	8002bc2 <HAL_DMA_Abort_IT>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	e00e      	b.n	8005f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f99a 	bl	8006228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e00a      	b.n	8005f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f996 	bl	8006228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	e006      	b.n	8005f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f992 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f0a:	e170      	b.n	80061ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	bf00      	nop
    return;
 8005f0e:	e16e      	b.n	80061ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f040 814a 	bne.w	80061ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8143 	beq.w	80061ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 813c 	beq.w	80061ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	f040 80b4 	bne.w	80060c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8140 	beq.w	80061f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	f080 8139 	bcs.w	80061f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f92:	f000 8088 	beq.w	80060a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1d9      	bne.n	8005f96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3314      	adds	r3, #20
 8006002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006006:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800600a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800600e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e1      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3314      	adds	r3, #20
 8006024:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800602e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3314      	adds	r3, #20
 800603e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e3      	bne.n	800601e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006076:	f023 0310 	bic.w	r3, r3, #16
 800607a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006088:	65ba      	str	r2, [r7, #88]	; 0x58
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800608e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e3      	bne.n	8006064 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fc fd1e 	bl	8002ae2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f8c0 	bl	800623c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060bc:	e099      	b.n	80061f2 <HAL_UART_IRQHandler+0x50e>
 80060be:	bf00      	nop
 80060c0:	080063f7 	.word	0x080063f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 808b 	beq.w	80061f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8086 	beq.w	80061f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800610e:	647a      	str	r2, [r7, #68]	; 0x44
 8006110:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800611c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e3      	bne.n	80060ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3314      	adds	r3, #20
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	623b      	str	r3, [r7, #32]
   return(result);
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3314      	adds	r3, #20
 8006142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006146:	633a      	str	r2, [r7, #48]	; 0x30
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800614c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e3      	bne.n	8006122 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	60fb      	str	r3, [r7, #12]
   return(result);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0310 	bic.w	r3, r3, #16
 800617e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	69b9      	ldr	r1, [r7, #24]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	617b      	str	r3, [r7, #20]
   return(result);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e3      	bne.n	8006168 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f848 	bl	800623c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061ac:	e023      	b.n	80061f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_UART_IRQHandler+0x4ea>
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f929 	bl	800641e <UART_Transmit_IT>
    return;
 80061cc:	e014      	b.n	80061f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <HAL_UART_IRQHandler+0x514>
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d008      	beq.n	80061f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f969 	bl	80064be <UART_EndTransmit_IT>
    return;
 80061ec:	e004      	b.n	80061f8 <HAL_UART_IRQHandler+0x514>
    return;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <HAL_UART_IRQHandler+0x514>
      return;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <HAL_UART_IRQHandler+0x514>
      return;
 80061f6:	bf00      	nop
  }
}
 80061f8:	37e8      	adds	r7, #232	; 0xe8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop

08006200 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b090      	sub	sp, #64	; 0x40
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006264:	e050      	b.n	8006308 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d04c      	beq.n	8006308 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <UART_WaitOnFlagUntilTimeout+0x30>
 8006274:	f7fc fb18 	bl	80028a8 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006280:	429a      	cmp	r2, r3
 8006282:	d241      	bcs.n	8006308 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062a4:	637a      	str	r2, [r7, #52]	; 0x34
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3314      	adds	r3, #20
 80062d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062d8:	623a      	str	r2, [r7, #32]
 80062da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e00f      	b.n	8006328 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4013      	ands	r3, r2
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	429a      	cmp	r2, r3
 8006324:	d09f      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3740      	adds	r7, #64	; 0x40
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b095      	sub	sp, #84	; 0x54
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800634e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006358:	643a      	str	r2, [r7, #64]	; 0x40
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800635e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3314      	adds	r3, #20
 8006372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	61fb      	str	r3, [r7, #28]
   return(result);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d119      	bne.n	80063dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f023 0310 	bic.w	r3, r3, #16
 80063be:	647b      	str	r3, [r7, #68]	; 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c8:	61ba      	str	r2, [r7, #24]
 80063ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6979      	ldr	r1, [r7, #20]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	613b      	str	r3, [r7, #16]
   return(result);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063ea:	bf00      	nop
 80063ec:	3754      	adds	r7, #84	; 0x54
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff ff09 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d13e      	bne.n	80064b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d114      	bne.n	8006466 <UART_Transmit_IT+0x48>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d110      	bne.n	8006466 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	621a      	str	r2, [r3, #32]
 8006464:	e008      	b.n	8006478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6211      	str	r1, [r2, #32]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4619      	mov	r1, r3
 8006486:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe8e 	bl	8006200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b08c      	sub	sp, #48	; 0x30
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b22      	cmp	r3, #34	; 0x22
 8006500:	f040 80ab 	bne.w	800665a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650c:	d117      	bne.n	800653e <UART_Receive_IT+0x50>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d113      	bne.n	800653e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	b29a      	uxth	r2, r3
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	1c9a      	adds	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28
 800653c:	e026      	b.n	800658c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006550:	d007      	beq.n	8006562 <UART_Receive_IT+0x74>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <UART_Receive_IT+0x82>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e008      	b.n	8006582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657c:	b2da      	uxtb	r2, r3
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4619      	mov	r1, r3
 800659a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800659c:	2b00      	cmp	r3, #0
 800659e:	d15a      	bne.n	8006656 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0220 	bic.w	r2, r2, #32
 80065ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d135      	bne.n	800664c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	613b      	str	r3, [r7, #16]
   return(result);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f023 0310 	bic.w	r3, r3, #16
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	623a      	str	r2, [r7, #32]
 8006608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	69f9      	ldr	r1, [r7, #28]
 800660c:	6a3a      	ldr	r2, [r7, #32]
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	61bb      	str	r3, [r7, #24]
   return(result);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e5      	bne.n	80065e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b10      	cmp	r3, #16
 8006626:	d10a      	bne.n	800663e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fdf9 	bl	800623c <HAL_UARTEx_RxEventCallback>
 800664a:	e002      	b.n	8006652 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fde1 	bl	8006214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	e002      	b.n	800665c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	e000      	b.n	800665c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800665a:	2302      	movs	r3, #2
  }
}
 800665c:	4618      	mov	r0, r3
 800665e:	3730      	adds	r7, #48	; 0x30
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006668:	b0c0      	sub	sp, #256	; 0x100
 800666a:	af00      	add	r7, sp, #0
 800666c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	68d9      	ldr	r1, [r3, #12]
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	ea40 0301 	orr.w	r3, r0, r1
 800668c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	431a      	orrs	r2, r3
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066bc:	f021 010c 	bic.w	r1, r1, #12
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ca:	430b      	orrs	r3, r1
 80066cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066de:	6999      	ldr	r1, [r3, #24]
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	ea40 0301 	orr.w	r3, r0, r1
 80066ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b8f      	ldr	r3, [pc, #572]	; (8006930 <UART_SetConfig+0x2cc>)
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d005      	beq.n	8006704 <UART_SetConfig+0xa0>
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b8d      	ldr	r3, [pc, #564]	; (8006934 <UART_SetConfig+0x2d0>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d104      	bne.n	800670e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fe f8dc 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8006708:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800670c:	e003      	b.n	8006716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800670e:	f7fe f8c3 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8006712:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006720:	f040 810c 	bne.w	800693c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006728:	2200      	movs	r2, #0
 800672a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800672e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	1891      	adds	r1, r2, r2
 800673c:	65b9      	str	r1, [r7, #88]	; 0x58
 800673e:	415b      	adcs	r3, r3
 8006740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006746:	4621      	mov	r1, r4
 8006748:	eb12 0801 	adds.w	r8, r2, r1
 800674c:	4629      	mov	r1, r5
 800674e:	eb43 0901 	adc.w	r9, r3, r1
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006766:	4690      	mov	r8, r2
 8006768:	4699      	mov	r9, r3
 800676a:	4623      	mov	r3, r4
 800676c:	eb18 0303 	adds.w	r3, r8, r3
 8006770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006774:	462b      	mov	r3, r5
 8006776:	eb49 0303 	adc.w	r3, r9, r3
 800677a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800678a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800678e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006792:	460b      	mov	r3, r1
 8006794:	18db      	adds	r3, r3, r3
 8006796:	653b      	str	r3, [r7, #80]	; 0x50
 8006798:	4613      	mov	r3, r2
 800679a:	eb42 0303 	adc.w	r3, r2, r3
 800679e:	657b      	str	r3, [r7, #84]	; 0x54
 80067a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067a8:	f7fa fa16 	bl	8000bd8 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b61      	ldr	r3, [pc, #388]	; (8006938 <UART_SetConfig+0x2d4>)
 80067b2:	fba3 2302 	umull	r2, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	011c      	lsls	r4, r3, #4
 80067ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	1891      	adds	r1, r2, r2
 80067d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80067d4:	415b      	adcs	r3, r3
 80067d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067dc:	4641      	mov	r1, r8
 80067de:	eb12 0a01 	adds.w	sl, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb43 0b01 	adc.w	fp, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067fc:	4692      	mov	sl, r2
 80067fe:	469b      	mov	fp, r3
 8006800:	4643      	mov	r3, r8
 8006802:	eb1a 0303 	adds.w	r3, sl, r3
 8006806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800680a:	464b      	mov	r3, r9
 800680c:	eb4b 0303 	adc.w	r3, fp, r3
 8006810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006820:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006828:	460b      	mov	r3, r1
 800682a:	18db      	adds	r3, r3, r3
 800682c:	643b      	str	r3, [r7, #64]	; 0x40
 800682e:	4613      	mov	r3, r2
 8006830:	eb42 0303 	adc.w	r3, r2, r3
 8006834:	647b      	str	r3, [r7, #68]	; 0x44
 8006836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800683a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800683e:	f7fa f9cb 	bl	8000bd8 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4611      	mov	r1, r2
 8006848:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <UART_SetConfig+0x2d4>)
 800684a:	fba3 2301 	umull	r2, r3, r3, r1
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2264      	movs	r2, #100	; 0x64
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	1acb      	subs	r3, r1, r3
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800685e:	4b36      	ldr	r3, [pc, #216]	; (8006938 <UART_SetConfig+0x2d4>)
 8006860:	fba3 2302 	umull	r2, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800686c:	441c      	add	r4, r3
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006878:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800687c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	1891      	adds	r1, r2, r2
 8006886:	63b9      	str	r1, [r7, #56]	; 0x38
 8006888:	415b      	adcs	r3, r3
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006890:	4641      	mov	r1, r8
 8006892:	1851      	adds	r1, r2, r1
 8006894:	6339      	str	r1, [r7, #48]	; 0x30
 8006896:	4649      	mov	r1, r9
 8006898:	414b      	adcs	r3, r1
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068a8:	4659      	mov	r1, fp
 80068aa:	00cb      	lsls	r3, r1, #3
 80068ac:	4651      	mov	r1, sl
 80068ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b2:	4651      	mov	r1, sl
 80068b4:	00ca      	lsls	r2, r1, #3
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	4642      	mov	r2, r8
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068c4:	464b      	mov	r3, r9
 80068c6:	460a      	mov	r2, r1
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068e4:	460b      	mov	r3, r1
 80068e6:	18db      	adds	r3, r3, r3
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ea:	4613      	mov	r3, r2
 80068ec:	eb42 0303 	adc.w	r3, r2, r3
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068fa:	f7fa f96d 	bl	8000bd8 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <UART_SetConfig+0x2d4>)
 8006904:	fba3 1302 	umull	r1, r3, r3, r2
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	2164      	movs	r1, #100	; 0x64
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	3332      	adds	r3, #50	; 0x32
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <UART_SetConfig+0x2d4>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f003 0207 	and.w	r2, r3, #7
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4422      	add	r2, r4
 800692a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800692c:	e105      	b.n	8006b3a <UART_SetConfig+0x4d6>
 800692e:	bf00      	nop
 8006930:	40011000 	.word	0x40011000
 8006934:	40011400 	.word	0x40011400
 8006938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800693c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006940:	2200      	movs	r2, #0
 8006942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006946:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800694a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	1891      	adds	r1, r2, r2
 8006954:	6239      	str	r1, [r7, #32]
 8006956:	415b      	adcs	r3, r3
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
 800695a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800695e:	4641      	mov	r1, r8
 8006960:	1854      	adds	r4, r2, r1
 8006962:	4649      	mov	r1, r9
 8006964:	eb43 0501 	adc.w	r5, r3, r1
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	00eb      	lsls	r3, r5, #3
 8006972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006976:	00e2      	lsls	r2, r4, #3
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	4643      	mov	r3, r8
 800697e:	18e3      	adds	r3, r4, r3
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006984:	464b      	mov	r3, r9
 8006986:	eb45 0303 	adc.w	r3, r5, r3
 800698a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800699a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069aa:	4629      	mov	r1, r5
 80069ac:	008b      	lsls	r3, r1, #2
 80069ae:	4621      	mov	r1, r4
 80069b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b4:	4621      	mov	r1, r4
 80069b6:	008a      	lsls	r2, r1, #2
 80069b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069bc:	f7fa f90c 	bl	8000bd8 <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4b60      	ldr	r3, [pc, #384]	; (8006b48 <UART_SetConfig+0x4e4>)
 80069c6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	011c      	lsls	r4, r3, #4
 80069ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	1891      	adds	r1, r2, r2
 80069e6:	61b9      	str	r1, [r7, #24]
 80069e8:	415b      	adcs	r3, r3
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f0:	4641      	mov	r1, r8
 80069f2:	1851      	adds	r1, r2, r1
 80069f4:	6139      	str	r1, [r7, #16]
 80069f6:	4649      	mov	r1, r9
 80069f8:	414b      	adcs	r3, r1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a08:	4659      	mov	r1, fp
 8006a0a:	00cb      	lsls	r3, r1, #3
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a12:	4651      	mov	r1, sl
 8006a14:	00ca      	lsls	r2, r1, #3
 8006a16:	4610      	mov	r0, r2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a24:	464b      	mov	r3, r9
 8006a26:	460a      	mov	r2, r1
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a48:	4649      	mov	r1, r9
 8006a4a:	008b      	lsls	r3, r1, #2
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a52:	4641      	mov	r1, r8
 8006a54:	008a      	lsls	r2, r1, #2
 8006a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a5a:	f7fa f8bd 	bl	8000bd8 <__aeabi_uldivmod>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4b39      	ldr	r3, [pc, #228]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006a64:	fba3 1302 	umull	r1, r3, r3, r2
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	2164      	movs	r1, #100	; 0x64
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	3332      	adds	r3, #50	; 0x32
 8006a76:	4a34      	ldr	r2, [pc, #208]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a82:	441c      	add	r4, r3
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a8c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a92:	4642      	mov	r2, r8
 8006a94:	464b      	mov	r3, r9
 8006a96:	1891      	adds	r1, r2, r2
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	415b      	adcs	r3, r3
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	1851      	adds	r1, r2, r1
 8006aa6:	6039      	str	r1, [r7, #0]
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	414b      	adcs	r3, r1
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aba:	4659      	mov	r1, fp
 8006abc:	00cb      	lsls	r3, r1, #3
 8006abe:	4651      	mov	r1, sl
 8006ac0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	00ca      	lsls	r2, r1, #3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4619      	mov	r1, r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	4642      	mov	r2, r8
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae8:	667a      	str	r2, [r7, #100]	; 0x64
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006af6:	4649      	mov	r1, r9
 8006af8:	008b      	lsls	r3, r1, #2
 8006afa:	4641      	mov	r1, r8
 8006afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b00:	4641      	mov	r1, r8
 8006b02:	008a      	lsls	r2, r1, #2
 8006b04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b08:	f7fa f866 	bl	8000bd8 <__aeabi_uldivmod>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006b12:	fba3 1302 	umull	r1, r3, r3, r2
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	2164      	movs	r1, #100	; 0x64
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	3332      	adds	r3, #50	; 0x32
 8006b24:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4422      	add	r2, r4
 8006b38:	609a      	str	r2, [r3, #8]
}
 8006b3a:	bf00      	nop
 8006b3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop
 8006b48:	51eb851f 	.word	0x51eb851f

08006b4c <__errno>:
 8006b4c:	4b01      	ldr	r3, [pc, #4]	; (8006b54 <__errno+0x8>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000090 	.word	0x20000090

08006b58 <__libc_init_array>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	4d0d      	ldr	r5, [pc, #52]	; (8006b90 <__libc_init_array+0x38>)
 8006b5c:	4c0d      	ldr	r4, [pc, #52]	; (8006b94 <__libc_init_array+0x3c>)
 8006b5e:	1b64      	subs	r4, r4, r5
 8006b60:	10a4      	asrs	r4, r4, #2
 8006b62:	2600      	movs	r6, #0
 8006b64:	42a6      	cmp	r6, r4
 8006b66:	d109      	bne.n	8006b7c <__libc_init_array+0x24>
 8006b68:	4d0b      	ldr	r5, [pc, #44]	; (8006b98 <__libc_init_array+0x40>)
 8006b6a:	4c0c      	ldr	r4, [pc, #48]	; (8006b9c <__libc_init_array+0x44>)
 8006b6c:	f001 fc46 	bl	80083fc <_init>
 8006b70:	1b64      	subs	r4, r4, r5
 8006b72:	10a4      	asrs	r4, r4, #2
 8006b74:	2600      	movs	r6, #0
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	d105      	bne.n	8006b86 <__libc_init_array+0x2e>
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b80:	4798      	blx	r3
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7ee      	b.n	8006b64 <__libc_init_array+0xc>
 8006b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8a:	4798      	blx	r3
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	e7f2      	b.n	8006b76 <__libc_init_array+0x1e>
 8006b90:	080086f8 	.word	0x080086f8
 8006b94:	080086f8 	.word	0x080086f8
 8006b98:	080086f8 	.word	0x080086f8
 8006b9c:	080086fc 	.word	0x080086fc

08006ba0 <malloc>:
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <malloc+0xc>)
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	f000 b877 	b.w	8006c98 <_malloc_r>
 8006baa:	bf00      	nop
 8006bac:	20000090 	.word	0x20000090

08006bb0 <memset>:
 8006bb0:	4402      	add	r2, r0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d100      	bne.n	8006bba <memset+0xa>
 8006bb8:	4770      	bx	lr
 8006bba:	f803 1b01 	strb.w	r1, [r3], #1
 8006bbe:	e7f9      	b.n	8006bb4 <memset+0x4>

08006bc0 <_free_r>:
 8006bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d044      	beq.n	8006c50 <_free_r+0x90>
 8006bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bca:	9001      	str	r0, [sp, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f1a1 0404 	sub.w	r4, r1, #4
 8006bd2:	bfb8      	it	lt
 8006bd4:	18e4      	addlt	r4, r4, r3
 8006bd6:	f000 f90b 	bl	8006df0 <__malloc_lock>
 8006bda:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <_free_r+0x94>)
 8006bdc:	9801      	ldr	r0, [sp, #4]
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	b933      	cbnz	r3, 8006bf0 <_free_r+0x30>
 8006be2:	6063      	str	r3, [r4, #4]
 8006be4:	6014      	str	r4, [r2, #0]
 8006be6:	b003      	add	sp, #12
 8006be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bec:	f000 b906 	b.w	8006dfc <__malloc_unlock>
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d908      	bls.n	8006c06 <_free_r+0x46>
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	1961      	adds	r1, r4, r5
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	bf01      	itttt	eq
 8006bfc:	6819      	ldreq	r1, [r3, #0]
 8006bfe:	685b      	ldreq	r3, [r3, #4]
 8006c00:	1949      	addeq	r1, r1, r5
 8006c02:	6021      	streq	r1, [r4, #0]
 8006c04:	e7ed      	b.n	8006be2 <_free_r+0x22>
 8006c06:	461a      	mov	r2, r3
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b10b      	cbz	r3, 8006c10 <_free_r+0x50>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d9fa      	bls.n	8006c06 <_free_r+0x46>
 8006c10:	6811      	ldr	r1, [r2, #0]
 8006c12:	1855      	adds	r5, r2, r1
 8006c14:	42a5      	cmp	r5, r4
 8006c16:	d10b      	bne.n	8006c30 <_free_r+0x70>
 8006c18:	6824      	ldr	r4, [r4, #0]
 8006c1a:	4421      	add	r1, r4
 8006c1c:	1854      	adds	r4, r2, r1
 8006c1e:	42a3      	cmp	r3, r4
 8006c20:	6011      	str	r1, [r2, #0]
 8006c22:	d1e0      	bne.n	8006be6 <_free_r+0x26>
 8006c24:	681c      	ldr	r4, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	6053      	str	r3, [r2, #4]
 8006c2a:	4421      	add	r1, r4
 8006c2c:	6011      	str	r1, [r2, #0]
 8006c2e:	e7da      	b.n	8006be6 <_free_r+0x26>
 8006c30:	d902      	bls.n	8006c38 <_free_r+0x78>
 8006c32:	230c      	movs	r3, #12
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	e7d6      	b.n	8006be6 <_free_r+0x26>
 8006c38:	6825      	ldr	r5, [r4, #0]
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	bf04      	itt	eq
 8006c40:	6819      	ldreq	r1, [r3, #0]
 8006c42:	685b      	ldreq	r3, [r3, #4]
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	bf04      	itt	eq
 8006c48:	1949      	addeq	r1, r1, r5
 8006c4a:	6021      	streq	r1, [r4, #0]
 8006c4c:	6054      	str	r4, [r2, #4]
 8006c4e:	e7ca      	b.n	8006be6 <_free_r+0x26>
 8006c50:	b003      	add	sp, #12
 8006c52:	bd30      	pop	{r4, r5, pc}
 8006c54:	20000394 	.word	0x20000394

08006c58 <sbrk_aligned>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4e0e      	ldr	r6, [pc, #56]	; (8006c94 <sbrk_aligned+0x3c>)
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	6831      	ldr	r1, [r6, #0]
 8006c60:	4605      	mov	r5, r0
 8006c62:	b911      	cbnz	r1, 8006c6a <sbrk_aligned+0x12>
 8006c64:	f000 f88c 	bl	8006d80 <_sbrk_r>
 8006c68:	6030      	str	r0, [r6, #0]
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f887 	bl	8006d80 <_sbrk_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d00a      	beq.n	8006c8c <sbrk_aligned+0x34>
 8006c76:	1cc4      	adds	r4, r0, #3
 8006c78:	f024 0403 	bic.w	r4, r4, #3
 8006c7c:	42a0      	cmp	r0, r4
 8006c7e:	d007      	beq.n	8006c90 <sbrk_aligned+0x38>
 8006c80:	1a21      	subs	r1, r4, r0
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f87c 	bl	8006d80 <_sbrk_r>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d101      	bne.n	8006c90 <sbrk_aligned+0x38>
 8006c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c90:	4620      	mov	r0, r4
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	20000398 	.word	0x20000398

08006c98 <_malloc_r>:
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9c:	1ccd      	adds	r5, r1, #3
 8006c9e:	f025 0503 	bic.w	r5, r5, #3
 8006ca2:	3508      	adds	r5, #8
 8006ca4:	2d0c      	cmp	r5, #12
 8006ca6:	bf38      	it	cc
 8006ca8:	250c      	movcc	r5, #12
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	4607      	mov	r7, r0
 8006cae:	db01      	blt.n	8006cb4 <_malloc_r+0x1c>
 8006cb0:	42a9      	cmp	r1, r5
 8006cb2:	d905      	bls.n	8006cc0 <_malloc_r+0x28>
 8006cb4:	230c      	movs	r3, #12
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	2600      	movs	r6, #0
 8006cba:	4630      	mov	r0, r6
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc0:	4e2e      	ldr	r6, [pc, #184]	; (8006d7c <_malloc_r+0xe4>)
 8006cc2:	f000 f895 	bl	8006df0 <__malloc_lock>
 8006cc6:	6833      	ldr	r3, [r6, #0]
 8006cc8:	461c      	mov	r4, r3
 8006cca:	bb34      	cbnz	r4, 8006d1a <_malloc_r+0x82>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4638      	mov	r0, r7
 8006cd0:	f7ff ffc2 	bl	8006c58 <sbrk_aligned>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	d14d      	bne.n	8006d76 <_malloc_r+0xde>
 8006cda:	6834      	ldr	r4, [r6, #0]
 8006cdc:	4626      	mov	r6, r4
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	d140      	bne.n	8006d64 <_malloc_r+0xcc>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	eb04 0803 	add.w	r8, r4, r3
 8006cec:	f000 f848 	bl	8006d80 <_sbrk_r>
 8006cf0:	4580      	cmp	r8, r0
 8006cf2:	d13a      	bne.n	8006d6a <_malloc_r+0xd2>
 8006cf4:	6821      	ldr	r1, [r4, #0]
 8006cf6:	3503      	adds	r5, #3
 8006cf8:	1a6d      	subs	r5, r5, r1
 8006cfa:	f025 0503 	bic.w	r5, r5, #3
 8006cfe:	3508      	adds	r5, #8
 8006d00:	2d0c      	cmp	r5, #12
 8006d02:	bf38      	it	cc
 8006d04:	250c      	movcc	r5, #12
 8006d06:	4629      	mov	r1, r5
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7ff ffa5 	bl	8006c58 <sbrk_aligned>
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d02b      	beq.n	8006d6a <_malloc_r+0xd2>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	442b      	add	r3, r5
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	e00e      	b.n	8006d38 <_malloc_r+0xa0>
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	1b52      	subs	r2, r2, r5
 8006d1e:	d41e      	bmi.n	8006d5e <_malloc_r+0xc6>
 8006d20:	2a0b      	cmp	r2, #11
 8006d22:	d916      	bls.n	8006d52 <_malloc_r+0xba>
 8006d24:	1961      	adds	r1, r4, r5
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	bf18      	it	ne
 8006d2c:	6059      	strne	r1, [r3, #4]
 8006d2e:	6863      	ldr	r3, [r4, #4]
 8006d30:	bf08      	it	eq
 8006d32:	6031      	streq	r1, [r6, #0]
 8006d34:	5162      	str	r2, [r4, r5]
 8006d36:	604b      	str	r3, [r1, #4]
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f104 060b 	add.w	r6, r4, #11
 8006d3e:	f000 f85d 	bl	8006dfc <__malloc_unlock>
 8006d42:	f026 0607 	bic.w	r6, r6, #7
 8006d46:	1d23      	adds	r3, r4, #4
 8006d48:	1af2      	subs	r2, r6, r3
 8006d4a:	d0b6      	beq.n	8006cba <_malloc_r+0x22>
 8006d4c:	1b9b      	subs	r3, r3, r6
 8006d4e:	50a3      	str	r3, [r4, r2]
 8006d50:	e7b3      	b.n	8006cba <_malloc_r+0x22>
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	bf0c      	ite	eq
 8006d58:	6032      	streq	r2, [r6, #0]
 8006d5a:	605a      	strne	r2, [r3, #4]
 8006d5c:	e7ec      	b.n	8006d38 <_malloc_r+0xa0>
 8006d5e:	4623      	mov	r3, r4
 8006d60:	6864      	ldr	r4, [r4, #4]
 8006d62:	e7b2      	b.n	8006cca <_malloc_r+0x32>
 8006d64:	4634      	mov	r4, r6
 8006d66:	6876      	ldr	r6, [r6, #4]
 8006d68:	e7b9      	b.n	8006cde <_malloc_r+0x46>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f000 f844 	bl	8006dfc <__malloc_unlock>
 8006d74:	e7a1      	b.n	8006cba <_malloc_r+0x22>
 8006d76:	6025      	str	r5, [r4, #0]
 8006d78:	e7de      	b.n	8006d38 <_malloc_r+0xa0>
 8006d7a:	bf00      	nop
 8006d7c:	20000394 	.word	0x20000394

08006d80 <_sbrk_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d06      	ldr	r5, [pc, #24]	; (8006d9c <_sbrk_r+0x1c>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7fa ff9c 	bl	8001cc8 <_sbrk>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_sbrk_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_sbrk_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	2000039c 	.word	0x2000039c

08006da0 <siprintf>:
 8006da0:	b40e      	push	{r1, r2, r3}
 8006da2:	b500      	push	{lr}
 8006da4:	b09c      	sub	sp, #112	; 0x70
 8006da6:	ab1d      	add	r3, sp, #116	; 0x74
 8006da8:	9002      	str	r0, [sp, #8]
 8006daa:	9006      	str	r0, [sp, #24]
 8006dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006db0:	4809      	ldr	r0, [pc, #36]	; (8006dd8 <siprintf+0x38>)
 8006db2:	9107      	str	r1, [sp, #28]
 8006db4:	9104      	str	r1, [sp, #16]
 8006db6:	4909      	ldr	r1, [pc, #36]	; (8006ddc <siprintf+0x3c>)
 8006db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbc:	9105      	str	r1, [sp, #20]
 8006dbe:	6800      	ldr	r0, [r0, #0]
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	a902      	add	r1, sp, #8
 8006dc4:	f000 f87c 	bl	8006ec0 <_svfiprintf_r>
 8006dc8:	9b02      	ldr	r3, [sp, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	b01c      	add	sp, #112	; 0x70
 8006dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd4:	b003      	add	sp, #12
 8006dd6:	4770      	bx	lr
 8006dd8:	20000090 	.word	0x20000090
 8006ddc:	ffff0208 	.word	0xffff0208

08006de0 <strcpy>:
 8006de0:	4603      	mov	r3, r0
 8006de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de6:	f803 2b01 	strb.w	r2, [r3], #1
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	d1f9      	bne.n	8006de2 <strcpy+0x2>
 8006dee:	4770      	bx	lr

08006df0 <__malloc_lock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_lock+0x8>)
 8006df2:	f000 baf9 	b.w	80073e8 <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	200003a0 	.word	0x200003a0

08006dfc <__malloc_unlock>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <__malloc_unlock+0x8>)
 8006dfe:	f000 baf4 	b.w	80073ea <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	200003a0 	.word	0x200003a0

08006e08 <__ssputs_r>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	688e      	ldr	r6, [r1, #8]
 8006e0e:	429e      	cmp	r6, r3
 8006e10:	4682      	mov	sl, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	4690      	mov	r8, r2
 8006e16:	461f      	mov	r7, r3
 8006e18:	d838      	bhi.n	8006e8c <__ssputs_r+0x84>
 8006e1a:	898a      	ldrh	r2, [r1, #12]
 8006e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e20:	d032      	beq.n	8006e88 <__ssputs_r+0x80>
 8006e22:	6825      	ldr	r5, [r4, #0]
 8006e24:	6909      	ldr	r1, [r1, #16]
 8006e26:	eba5 0901 	sub.w	r9, r5, r1
 8006e2a:	6965      	ldr	r5, [r4, #20]
 8006e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e34:	3301      	adds	r3, #1
 8006e36:	444b      	add	r3, r9
 8006e38:	106d      	asrs	r5, r5, #1
 8006e3a:	429d      	cmp	r5, r3
 8006e3c:	bf38      	it	cc
 8006e3e:	461d      	movcc	r5, r3
 8006e40:	0553      	lsls	r3, r2, #21
 8006e42:	d531      	bpl.n	8006ea8 <__ssputs_r+0xa0>
 8006e44:	4629      	mov	r1, r5
 8006e46:	f7ff ff27 	bl	8006c98 <_malloc_r>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	b950      	cbnz	r0, 8006e64 <__ssputs_r+0x5c>
 8006e4e:	230c      	movs	r3, #12
 8006e50:	f8ca 3000 	str.w	r3, [sl]
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	6921      	ldr	r1, [r4, #16]
 8006e66:	464a      	mov	r2, r9
 8006e68:	f000 fac0 	bl	80073ec <memcpy>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	6126      	str	r6, [r4, #16]
 8006e7a:	6165      	str	r5, [r4, #20]
 8006e7c:	444e      	add	r6, r9
 8006e7e:	eba5 0509 	sub.w	r5, r5, r9
 8006e82:	6026      	str	r6, [r4, #0]
 8006e84:	60a5      	str	r5, [r4, #8]
 8006e86:	463e      	mov	r6, r7
 8006e88:	42be      	cmp	r6, r7
 8006e8a:	d900      	bls.n	8006e8e <__ssputs_r+0x86>
 8006e8c:	463e      	mov	r6, r7
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	4632      	mov	r2, r6
 8006e92:	4641      	mov	r1, r8
 8006e94:	f000 fab8 	bl	8007408 <memmove>
 8006e98:	68a3      	ldr	r3, [r4, #8]
 8006e9a:	1b9b      	subs	r3, r3, r6
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	4433      	add	r3, r6
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e7db      	b.n	8006e60 <__ssputs_r+0x58>
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	f000 fac7 	bl	800743c <_realloc_r>
 8006eae:	4606      	mov	r6, r0
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d1e1      	bne.n	8006e78 <__ssputs_r+0x70>
 8006eb4:	6921      	ldr	r1, [r4, #16]
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	f7ff fe82 	bl	8006bc0 <_free_r>
 8006ebc:	e7c7      	b.n	8006e4e <__ssputs_r+0x46>
	...

08006ec0 <_svfiprintf_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4698      	mov	r8, r3
 8006ec6:	898b      	ldrh	r3, [r1, #12]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	b09d      	sub	sp, #116	; 0x74
 8006ecc:	4607      	mov	r7, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	d50e      	bpl.n	8006ef2 <_svfiprintf_r+0x32>
 8006ed4:	690b      	ldr	r3, [r1, #16]
 8006ed6:	b963      	cbnz	r3, 8006ef2 <_svfiprintf_r+0x32>
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	f7ff fedd 	bl	8006c98 <_malloc_r>
 8006ede:	6028      	str	r0, [r5, #0]
 8006ee0:	6128      	str	r0, [r5, #16]
 8006ee2:	b920      	cbnz	r0, 8006eee <_svfiprintf_r+0x2e>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e0d1      	b.n	8007092 <_svfiprintf_r+0x1d2>
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	616b      	str	r3, [r5, #20]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef6:	2320      	movs	r3, #32
 8006ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f00:	2330      	movs	r3, #48	; 0x30
 8006f02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070ac <_svfiprintf_r+0x1ec>
 8006f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f0a:	f04f 0901 	mov.w	r9, #1
 8006f0e:	4623      	mov	r3, r4
 8006f10:	469a      	mov	sl, r3
 8006f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f16:	b10a      	cbz	r2, 8006f1c <_svfiprintf_r+0x5c>
 8006f18:	2a25      	cmp	r2, #37	; 0x25
 8006f1a:	d1f9      	bne.n	8006f10 <_svfiprintf_r+0x50>
 8006f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f20:	d00b      	beq.n	8006f3a <_svfiprintf_r+0x7a>
 8006f22:	465b      	mov	r3, fp
 8006f24:	4622      	mov	r2, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff ff6d 	bl	8006e08 <__ssputs_r>
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f000 80aa 	beq.w	8007088 <_svfiprintf_r+0x1c8>
 8006f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f36:	445a      	add	r2, fp
 8006f38:	9209      	str	r2, [sp, #36]	; 0x24
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80a2 	beq.w	8007088 <_svfiprintf_r+0x1c8>
 8006f44:	2300      	movs	r3, #0
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f4e:	f10a 0a01 	add.w	sl, sl, #1
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	9307      	str	r3, [sp, #28]
 8006f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f5c:	4654      	mov	r4, sl
 8006f5e:	2205      	movs	r2, #5
 8006f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f64:	4851      	ldr	r0, [pc, #324]	; (80070ac <_svfiprintf_r+0x1ec>)
 8006f66:	f7f9 f95b 	bl	8000220 <memchr>
 8006f6a:	9a04      	ldr	r2, [sp, #16]
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_svfiprintf_r+0xe6>
 8006f6e:	06d0      	lsls	r0, r2, #27
 8006f70:	bf44      	itt	mi
 8006f72:	2320      	movmi	r3, #32
 8006f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f78:	0711      	lsls	r1, r2, #28
 8006f7a:	bf44      	itt	mi
 8006f7c:	232b      	movmi	r3, #43	; 0x2b
 8006f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f82:	f89a 3000 	ldrb.w	r3, [sl]
 8006f86:	2b2a      	cmp	r3, #42	; 0x2a
 8006f88:	d015      	beq.n	8006fb6 <_svfiprintf_r+0xf6>
 8006f8a:	9a07      	ldr	r2, [sp, #28]
 8006f8c:	4654      	mov	r4, sl
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f04f 0c0a 	mov.w	ip, #10
 8006f94:	4621      	mov	r1, r4
 8006f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9a:	3b30      	subs	r3, #48	; 0x30
 8006f9c:	2b09      	cmp	r3, #9
 8006f9e:	d94e      	bls.n	800703e <_svfiprintf_r+0x17e>
 8006fa0:	b1b0      	cbz	r0, 8006fd0 <_svfiprintf_r+0x110>
 8006fa2:	9207      	str	r2, [sp, #28]
 8006fa4:	e014      	b.n	8006fd0 <_svfiprintf_r+0x110>
 8006fa6:	eba0 0308 	sub.w	r3, r0, r8
 8006faa:	fa09 f303 	lsl.w	r3, r9, r3
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	46a2      	mov	sl, r4
 8006fb4:	e7d2      	b.n	8006f5c <_svfiprintf_r+0x9c>
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	1d19      	adds	r1, r3, #4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	9103      	str	r1, [sp, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bfbb      	ittet	lt
 8006fc2:	425b      	neglt	r3, r3
 8006fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc8:	9307      	strge	r3, [sp, #28]
 8006fca:	9307      	strlt	r3, [sp, #28]
 8006fcc:	bfb8      	it	lt
 8006fce:	9204      	strlt	r2, [sp, #16]
 8006fd0:	7823      	ldrb	r3, [r4, #0]
 8006fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd4:	d10c      	bne.n	8006ff0 <_svfiprintf_r+0x130>
 8006fd6:	7863      	ldrb	r3, [r4, #1]
 8006fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fda:	d135      	bne.n	8007048 <_svfiprintf_r+0x188>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	9203      	str	r2, [sp, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfb8      	it	lt
 8006fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fec:	3402      	adds	r4, #2
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070bc <_svfiprintf_r+0x1fc>
 8006ff4:	7821      	ldrb	r1, [r4, #0]
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	f7f9 f911 	bl	8000220 <memchr>
 8006ffe:	b140      	cbz	r0, 8007012 <_svfiprintf_r+0x152>
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	eba0 000a 	sub.w	r0, r0, sl
 8007006:	fa03 f000 	lsl.w	r0, r3, r0
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	4303      	orrs	r3, r0
 800700e:	3401      	adds	r4, #1
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	4826      	ldr	r0, [pc, #152]	; (80070b0 <_svfiprintf_r+0x1f0>)
 8007018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800701c:	2206      	movs	r2, #6
 800701e:	f7f9 f8ff 	bl	8000220 <memchr>
 8007022:	2800      	cmp	r0, #0
 8007024:	d038      	beq.n	8007098 <_svfiprintf_r+0x1d8>
 8007026:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <_svfiprintf_r+0x1f4>)
 8007028:	bb1b      	cbnz	r3, 8007072 <_svfiprintf_r+0x1b2>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	3307      	adds	r3, #7
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	3308      	adds	r3, #8
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	4433      	add	r3, r6
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	e767      	b.n	8006f0e <_svfiprintf_r+0x4e>
 800703e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007042:	460c      	mov	r4, r1
 8007044:	2001      	movs	r0, #1
 8007046:	e7a5      	b.n	8006f94 <_svfiprintf_r+0xd4>
 8007048:	2300      	movs	r3, #0
 800704a:	3401      	adds	r4, #1
 800704c:	9305      	str	r3, [sp, #20]
 800704e:	4619      	mov	r1, r3
 8007050:	f04f 0c0a 	mov.w	ip, #10
 8007054:	4620      	mov	r0, r4
 8007056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800705a:	3a30      	subs	r2, #48	; 0x30
 800705c:	2a09      	cmp	r2, #9
 800705e:	d903      	bls.n	8007068 <_svfiprintf_r+0x1a8>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0c5      	beq.n	8006ff0 <_svfiprintf_r+0x130>
 8007064:	9105      	str	r1, [sp, #20]
 8007066:	e7c3      	b.n	8006ff0 <_svfiprintf_r+0x130>
 8007068:	fb0c 2101 	mla	r1, ip, r1, r2
 800706c:	4604      	mov	r4, r0
 800706e:	2301      	movs	r3, #1
 8007070:	e7f0      	b.n	8007054 <_svfiprintf_r+0x194>
 8007072:	ab03      	add	r3, sp, #12
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	462a      	mov	r2, r5
 8007078:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <_svfiprintf_r+0x1f8>)
 800707a:	a904      	add	r1, sp, #16
 800707c:	4638      	mov	r0, r7
 800707e:	f3af 8000 	nop.w
 8007082:	1c42      	adds	r2, r0, #1
 8007084:	4606      	mov	r6, r0
 8007086:	d1d6      	bne.n	8007036 <_svfiprintf_r+0x176>
 8007088:	89ab      	ldrh	r3, [r5, #12]
 800708a:	065b      	lsls	r3, r3, #25
 800708c:	f53f af2c 	bmi.w	8006ee8 <_svfiprintf_r+0x28>
 8007090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007092:	b01d      	add	sp, #116	; 0x74
 8007094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	462a      	mov	r2, r5
 800709e:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <_svfiprintf_r+0x1f8>)
 80070a0:	a904      	add	r1, sp, #16
 80070a2:	4638      	mov	r0, r7
 80070a4:	f000 f87a 	bl	800719c <_printf_i>
 80070a8:	e7eb      	b.n	8007082 <_svfiprintf_r+0x1c2>
 80070aa:	bf00      	nop
 80070ac:	08008678 	.word	0x08008678
 80070b0:	08008682 	.word	0x08008682
 80070b4:	00000000 	.word	0x00000000
 80070b8:	08006e09 	.word	0x08006e09
 80070bc:	0800867e 	.word	0x0800867e

080070c0 <_printf_common>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	4616      	mov	r6, r2
 80070c6:	4699      	mov	r9, r3
 80070c8:	688a      	ldr	r2, [r1, #8]
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	bfb8      	it	lt
 80070d4:	4613      	movlt	r3, r2
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070dc:	4607      	mov	r7, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	b10a      	cbz	r2, 80070e6 <_printf_common+0x26>
 80070e2:	3301      	adds	r3, #1
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	0699      	lsls	r1, r3, #26
 80070ea:	bf42      	ittt	mi
 80070ec:	6833      	ldrmi	r3, [r6, #0]
 80070ee:	3302      	addmi	r3, #2
 80070f0:	6033      	strmi	r3, [r6, #0]
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	f015 0506 	ands.w	r5, r5, #6
 80070f8:	d106      	bne.n	8007108 <_printf_common+0x48>
 80070fa:	f104 0a19 	add.w	sl, r4, #25
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	6832      	ldr	r2, [r6, #0]
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	42ab      	cmp	r3, r5
 8007106:	dc26      	bgt.n	8007156 <_printf_common+0x96>
 8007108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800710c:	1e13      	subs	r3, r2, #0
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	bf18      	it	ne
 8007112:	2301      	movne	r3, #1
 8007114:	0692      	lsls	r2, r2, #26
 8007116:	d42b      	bmi.n	8007170 <_printf_common+0xb0>
 8007118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800711c:	4649      	mov	r1, r9
 800711e:	4638      	mov	r0, r7
 8007120:	47c0      	blx	r8
 8007122:	3001      	adds	r0, #1
 8007124:	d01e      	beq.n	8007164 <_printf_common+0xa4>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	68e5      	ldr	r5, [r4, #12]
 800712a:	6832      	ldr	r2, [r6, #0]
 800712c:	f003 0306 	and.w	r3, r3, #6
 8007130:	2b04      	cmp	r3, #4
 8007132:	bf08      	it	eq
 8007134:	1aad      	subeq	r5, r5, r2
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	6922      	ldr	r2, [r4, #16]
 800713a:	bf0c      	ite	eq
 800713c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007140:	2500      	movne	r5, #0
 8007142:	4293      	cmp	r3, r2
 8007144:	bfc4      	itt	gt
 8007146:	1a9b      	subgt	r3, r3, r2
 8007148:	18ed      	addgt	r5, r5, r3
 800714a:	2600      	movs	r6, #0
 800714c:	341a      	adds	r4, #26
 800714e:	42b5      	cmp	r5, r6
 8007150:	d11a      	bne.n	8007188 <_printf_common+0xc8>
 8007152:	2000      	movs	r0, #0
 8007154:	e008      	b.n	8007168 <_printf_common+0xa8>
 8007156:	2301      	movs	r3, #1
 8007158:	4652      	mov	r2, sl
 800715a:	4649      	mov	r1, r9
 800715c:	4638      	mov	r0, r7
 800715e:	47c0      	blx	r8
 8007160:	3001      	adds	r0, #1
 8007162:	d103      	bne.n	800716c <_printf_common+0xac>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	3501      	adds	r5, #1
 800716e:	e7c6      	b.n	80070fe <_printf_common+0x3e>
 8007170:	18e1      	adds	r1, r4, r3
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	2030      	movs	r0, #48	; 0x30
 8007176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800717a:	4422      	add	r2, r4
 800717c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007184:	3302      	adds	r3, #2
 8007186:	e7c7      	b.n	8007118 <_printf_common+0x58>
 8007188:	2301      	movs	r3, #1
 800718a:	4622      	mov	r2, r4
 800718c:	4649      	mov	r1, r9
 800718e:	4638      	mov	r0, r7
 8007190:	47c0      	blx	r8
 8007192:	3001      	adds	r0, #1
 8007194:	d0e6      	beq.n	8007164 <_printf_common+0xa4>
 8007196:	3601      	adds	r6, #1
 8007198:	e7d9      	b.n	800714e <_printf_common+0x8e>
	...

0800719c <_printf_i>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	7e0f      	ldrb	r7, [r1, #24]
 80071a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071a4:	2f78      	cmp	r7, #120	; 0x78
 80071a6:	4691      	mov	r9, r2
 80071a8:	4680      	mov	r8, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	469a      	mov	sl, r3
 80071ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071b2:	d807      	bhi.n	80071c4 <_printf_i+0x28>
 80071b4:	2f62      	cmp	r7, #98	; 0x62
 80071b6:	d80a      	bhi.n	80071ce <_printf_i+0x32>
 80071b8:	2f00      	cmp	r7, #0
 80071ba:	f000 80d8 	beq.w	800736e <_printf_i+0x1d2>
 80071be:	2f58      	cmp	r7, #88	; 0x58
 80071c0:	f000 80a3 	beq.w	800730a <_printf_i+0x16e>
 80071c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071cc:	e03a      	b.n	8007244 <_printf_i+0xa8>
 80071ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071d2:	2b15      	cmp	r3, #21
 80071d4:	d8f6      	bhi.n	80071c4 <_printf_i+0x28>
 80071d6:	a101      	add	r1, pc, #4	; (adr r1, 80071dc <_printf_i+0x40>)
 80071d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007249 	.word	0x08007249
 80071e4:	080071c5 	.word	0x080071c5
 80071e8:	080071c5 	.word	0x080071c5
 80071ec:	080071c5 	.word	0x080071c5
 80071f0:	080071c5 	.word	0x080071c5
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080071c5 	.word	0x080071c5
 80071fc:	080071c5 	.word	0x080071c5
 8007200:	080071c5 	.word	0x080071c5
 8007204:	080071c5 	.word	0x080071c5
 8007208:	08007355 	.word	0x08007355
 800720c:	08007279 	.word	0x08007279
 8007210:	08007337 	.word	0x08007337
 8007214:	080071c5 	.word	0x080071c5
 8007218:	080071c5 	.word	0x080071c5
 800721c:	08007377 	.word	0x08007377
 8007220:	080071c5 	.word	0x080071c5
 8007224:	08007279 	.word	0x08007279
 8007228:	080071c5 	.word	0x080071c5
 800722c:	080071c5 	.word	0x080071c5
 8007230:	0800733f 	.word	0x0800733f
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	602a      	str	r2, [r5, #0]
 800723c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007244:	2301      	movs	r3, #1
 8007246:	e0a3      	b.n	8007390 <_printf_i+0x1f4>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	6829      	ldr	r1, [r5, #0]
 800724c:	0606      	lsls	r6, r0, #24
 800724e:	f101 0304 	add.w	r3, r1, #4
 8007252:	d50a      	bpl.n	800726a <_printf_i+0xce>
 8007254:	680e      	ldr	r6, [r1, #0]
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	2e00      	cmp	r6, #0
 800725a:	da03      	bge.n	8007264 <_printf_i+0xc8>
 800725c:	232d      	movs	r3, #45	; 0x2d
 800725e:	4276      	negs	r6, r6
 8007260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007264:	485e      	ldr	r0, [pc, #376]	; (80073e0 <_printf_i+0x244>)
 8007266:	230a      	movs	r3, #10
 8007268:	e019      	b.n	800729e <_printf_i+0x102>
 800726a:	680e      	ldr	r6, [r1, #0]
 800726c:	602b      	str	r3, [r5, #0]
 800726e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007272:	bf18      	it	ne
 8007274:	b236      	sxthne	r6, r6
 8007276:	e7ef      	b.n	8007258 <_printf_i+0xbc>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	6820      	ldr	r0, [r4, #0]
 800727c:	1d19      	adds	r1, r3, #4
 800727e:	6029      	str	r1, [r5, #0]
 8007280:	0601      	lsls	r1, r0, #24
 8007282:	d501      	bpl.n	8007288 <_printf_i+0xec>
 8007284:	681e      	ldr	r6, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0xf2>
 8007288:	0646      	lsls	r6, r0, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0xe8>
 800728c:	881e      	ldrh	r6, [r3, #0]
 800728e:	4854      	ldr	r0, [pc, #336]	; (80073e0 <_printf_i+0x244>)
 8007290:	2f6f      	cmp	r7, #111	; 0x6f
 8007292:	bf0c      	ite	eq
 8007294:	2308      	moveq	r3, #8
 8007296:	230a      	movne	r3, #10
 8007298:	2100      	movs	r1, #0
 800729a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800729e:	6865      	ldr	r5, [r4, #4]
 80072a0:	60a5      	str	r5, [r4, #8]
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	bfa2      	ittt	ge
 80072a6:	6821      	ldrge	r1, [r4, #0]
 80072a8:	f021 0104 	bicge.w	r1, r1, #4
 80072ac:	6021      	strge	r1, [r4, #0]
 80072ae:	b90e      	cbnz	r6, 80072b4 <_printf_i+0x118>
 80072b0:	2d00      	cmp	r5, #0
 80072b2:	d04d      	beq.n	8007350 <_printf_i+0x1b4>
 80072b4:	4615      	mov	r5, r2
 80072b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ba:	fb03 6711 	mls	r7, r3, r1, r6
 80072be:	5dc7      	ldrb	r7, [r0, r7]
 80072c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072c4:	4637      	mov	r7, r6
 80072c6:	42bb      	cmp	r3, r7
 80072c8:	460e      	mov	r6, r1
 80072ca:	d9f4      	bls.n	80072b6 <_printf_i+0x11a>
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d10b      	bne.n	80072e8 <_printf_i+0x14c>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	07de      	lsls	r6, r3, #31
 80072d4:	d508      	bpl.n	80072e8 <_printf_i+0x14c>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	6861      	ldr	r1, [r4, #4]
 80072da:	4299      	cmp	r1, r3
 80072dc:	bfde      	ittt	le
 80072de:	2330      	movle	r3, #48	; 0x30
 80072e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072e8:	1b52      	subs	r2, r2, r5
 80072ea:	6122      	str	r2, [r4, #16]
 80072ec:	f8cd a000 	str.w	sl, [sp]
 80072f0:	464b      	mov	r3, r9
 80072f2:	aa03      	add	r2, sp, #12
 80072f4:	4621      	mov	r1, r4
 80072f6:	4640      	mov	r0, r8
 80072f8:	f7ff fee2 	bl	80070c0 <_printf_common>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d14c      	bne.n	800739a <_printf_i+0x1fe>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b004      	add	sp, #16
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	4835      	ldr	r0, [pc, #212]	; (80073e0 <_printf_i+0x244>)
 800730c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007310:	6829      	ldr	r1, [r5, #0]
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f851 6b04 	ldr.w	r6, [r1], #4
 8007318:	6029      	str	r1, [r5, #0]
 800731a:	061d      	lsls	r5, r3, #24
 800731c:	d514      	bpl.n	8007348 <_printf_i+0x1ac>
 800731e:	07df      	lsls	r7, r3, #31
 8007320:	bf44      	itt	mi
 8007322:	f043 0320 	orrmi.w	r3, r3, #32
 8007326:	6023      	strmi	r3, [r4, #0]
 8007328:	b91e      	cbnz	r6, 8007332 <_printf_i+0x196>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f023 0320 	bic.w	r3, r3, #32
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	2310      	movs	r3, #16
 8007334:	e7b0      	b.n	8007298 <_printf_i+0xfc>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	f043 0320 	orr.w	r3, r3, #32
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	2378      	movs	r3, #120	; 0x78
 8007340:	4828      	ldr	r0, [pc, #160]	; (80073e4 <_printf_i+0x248>)
 8007342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007346:	e7e3      	b.n	8007310 <_printf_i+0x174>
 8007348:	0659      	lsls	r1, r3, #25
 800734a:	bf48      	it	mi
 800734c:	b2b6      	uxthmi	r6, r6
 800734e:	e7e6      	b.n	800731e <_printf_i+0x182>
 8007350:	4615      	mov	r5, r2
 8007352:	e7bb      	b.n	80072cc <_printf_i+0x130>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	6826      	ldr	r6, [r4, #0]
 8007358:	6961      	ldr	r1, [r4, #20]
 800735a:	1d18      	adds	r0, r3, #4
 800735c:	6028      	str	r0, [r5, #0]
 800735e:	0635      	lsls	r5, r6, #24
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	d501      	bpl.n	8007368 <_printf_i+0x1cc>
 8007364:	6019      	str	r1, [r3, #0]
 8007366:	e002      	b.n	800736e <_printf_i+0x1d2>
 8007368:	0670      	lsls	r0, r6, #25
 800736a:	d5fb      	bpl.n	8007364 <_printf_i+0x1c8>
 800736c:	8019      	strh	r1, [r3, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	4615      	mov	r5, r2
 8007374:	e7ba      	b.n	80072ec <_printf_i+0x150>
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	602a      	str	r2, [r5, #0]
 800737c:	681d      	ldr	r5, [r3, #0]
 800737e:	6862      	ldr	r2, [r4, #4]
 8007380:	2100      	movs	r1, #0
 8007382:	4628      	mov	r0, r5
 8007384:	f7f8 ff4c 	bl	8000220 <memchr>
 8007388:	b108      	cbz	r0, 800738e <_printf_i+0x1f2>
 800738a:	1b40      	subs	r0, r0, r5
 800738c:	6060      	str	r0, [r4, #4]
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	2300      	movs	r3, #0
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007398:	e7a8      	b.n	80072ec <_printf_i+0x150>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	462a      	mov	r2, r5
 800739e:	4649      	mov	r1, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	47d0      	blx	sl
 80073a4:	3001      	adds	r0, #1
 80073a6:	d0ab      	beq.n	8007300 <_printf_i+0x164>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	079b      	lsls	r3, r3, #30
 80073ac:	d413      	bmi.n	80073d6 <_printf_i+0x23a>
 80073ae:	68e0      	ldr	r0, [r4, #12]
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	4298      	cmp	r0, r3
 80073b4:	bfb8      	it	lt
 80073b6:	4618      	movlt	r0, r3
 80073b8:	e7a4      	b.n	8007304 <_printf_i+0x168>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4632      	mov	r2, r6
 80073be:	4649      	mov	r1, r9
 80073c0:	4640      	mov	r0, r8
 80073c2:	47d0      	blx	sl
 80073c4:	3001      	adds	r0, #1
 80073c6:	d09b      	beq.n	8007300 <_printf_i+0x164>
 80073c8:	3501      	adds	r5, #1
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	1a5b      	subs	r3, r3, r1
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dcf2      	bgt.n	80073ba <_printf_i+0x21e>
 80073d4:	e7eb      	b.n	80073ae <_printf_i+0x212>
 80073d6:	2500      	movs	r5, #0
 80073d8:	f104 0619 	add.w	r6, r4, #25
 80073dc:	e7f5      	b.n	80073ca <_printf_i+0x22e>
 80073de:	bf00      	nop
 80073e0:	08008689 	.word	0x08008689
 80073e4:	0800869a 	.word	0x0800869a

080073e8 <__retarget_lock_acquire_recursive>:
 80073e8:	4770      	bx	lr

080073ea <__retarget_lock_release_recursive>:
 80073ea:	4770      	bx	lr

080073ec <memcpy>:
 80073ec:	440a      	add	r2, r1
 80073ee:	4291      	cmp	r1, r2
 80073f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f4:	d100      	bne.n	80073f8 <memcpy+0xc>
 80073f6:	4770      	bx	lr
 80073f8:	b510      	push	{r4, lr}
 80073fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007402:	4291      	cmp	r1, r2
 8007404:	d1f9      	bne.n	80073fa <memcpy+0xe>
 8007406:	bd10      	pop	{r4, pc}

08007408 <memmove>:
 8007408:	4288      	cmp	r0, r1
 800740a:	b510      	push	{r4, lr}
 800740c:	eb01 0402 	add.w	r4, r1, r2
 8007410:	d902      	bls.n	8007418 <memmove+0x10>
 8007412:	4284      	cmp	r4, r0
 8007414:	4623      	mov	r3, r4
 8007416:	d807      	bhi.n	8007428 <memmove+0x20>
 8007418:	1e43      	subs	r3, r0, #1
 800741a:	42a1      	cmp	r1, r4
 800741c:	d008      	beq.n	8007430 <memmove+0x28>
 800741e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007426:	e7f8      	b.n	800741a <memmove+0x12>
 8007428:	4402      	add	r2, r0
 800742a:	4601      	mov	r1, r0
 800742c:	428a      	cmp	r2, r1
 800742e:	d100      	bne.n	8007432 <memmove+0x2a>
 8007430:	bd10      	pop	{r4, pc}
 8007432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743a:	e7f7      	b.n	800742c <memmove+0x24>

0800743c <_realloc_r>:
 800743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	4680      	mov	r8, r0
 8007442:	4614      	mov	r4, r2
 8007444:	460e      	mov	r6, r1
 8007446:	b921      	cbnz	r1, 8007452 <_realloc_r+0x16>
 8007448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800744c:	4611      	mov	r1, r2
 800744e:	f7ff bc23 	b.w	8006c98 <_malloc_r>
 8007452:	b92a      	cbnz	r2, 8007460 <_realloc_r+0x24>
 8007454:	f7ff fbb4 	bl	8006bc0 <_free_r>
 8007458:	4625      	mov	r5, r4
 800745a:	4628      	mov	r0, r5
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	f000 f81b 	bl	800749a <_malloc_usable_size_r>
 8007464:	4284      	cmp	r4, r0
 8007466:	4607      	mov	r7, r0
 8007468:	d802      	bhi.n	8007470 <_realloc_r+0x34>
 800746a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800746e:	d812      	bhi.n	8007496 <_realloc_r+0x5a>
 8007470:	4621      	mov	r1, r4
 8007472:	4640      	mov	r0, r8
 8007474:	f7ff fc10 	bl	8006c98 <_malloc_r>
 8007478:	4605      	mov	r5, r0
 800747a:	2800      	cmp	r0, #0
 800747c:	d0ed      	beq.n	800745a <_realloc_r+0x1e>
 800747e:	42bc      	cmp	r4, r7
 8007480:	4622      	mov	r2, r4
 8007482:	4631      	mov	r1, r6
 8007484:	bf28      	it	cs
 8007486:	463a      	movcs	r2, r7
 8007488:	f7ff ffb0 	bl	80073ec <memcpy>
 800748c:	4631      	mov	r1, r6
 800748e:	4640      	mov	r0, r8
 8007490:	f7ff fb96 	bl	8006bc0 <_free_r>
 8007494:	e7e1      	b.n	800745a <_realloc_r+0x1e>
 8007496:	4635      	mov	r5, r6
 8007498:	e7df      	b.n	800745a <_realloc_r+0x1e>

0800749a <_malloc_usable_size_r>:
 800749a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749e:	1f18      	subs	r0, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	bfbc      	itt	lt
 80074a4:	580b      	ldrlt	r3, [r1, r0]
 80074a6:	18c0      	addlt	r0, r0, r3
 80074a8:	4770      	bx	lr
	...

080074ac <rint>:
 80074ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ae:	ec51 0b10 	vmov	r0, r1, d0
 80074b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074b6:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80074ba:	2d13      	cmp	r5, #19
 80074bc:	ee10 3a10 	vmov	r3, s0
 80074c0:	460c      	mov	r4, r1
 80074c2:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80074c6:	dc5b      	bgt.n	8007580 <rint+0xd4>
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	da2d      	bge.n	8007528 <rint+0x7c>
 80074cc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80074d0:	4302      	orrs	r2, r0
 80074d2:	d025      	beq.n	8007520 <rint+0x74>
 80074d4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80074d8:	4302      	orrs	r2, r0
 80074da:	4253      	negs	r3, r2
 80074dc:	4313      	orrs	r3, r2
 80074de:	0b1b      	lsrs	r3, r3, #12
 80074e0:	0c4a      	lsrs	r2, r1, #17
 80074e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e6:	0452      	lsls	r2, r2, #17
 80074e8:	ea43 0102 	orr.w	r1, r3, r2
 80074ec:	460b      	mov	r3, r1
 80074ee:	4934      	ldr	r1, [pc, #208]	; (80075c0 <rint+0x114>)
 80074f0:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80074f4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80074f8:	4602      	mov	r2, r0
 80074fa:	4639      	mov	r1, r7
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7f8 fee5 	bl	80002cc <__adddf3>
 8007502:	e9cd 0100 	strd	r0, r1, [sp]
 8007506:	463b      	mov	r3, r7
 8007508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800750c:	4632      	mov	r2, r6
 800750e:	f7f8 fedb 	bl	80002c8 <__aeabi_dsub>
 8007512:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8007516:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800751a:	ea43 0704 	orr.w	r7, r3, r4
 800751e:	4639      	mov	r1, r7
 8007520:	ec41 0b10 	vmov	d0, r0, r1
 8007524:	b003      	add	sp, #12
 8007526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007528:	4a26      	ldr	r2, [pc, #152]	; (80075c4 <rint+0x118>)
 800752a:	412a      	asrs	r2, r5
 800752c:	ea01 0702 	and.w	r7, r1, r2
 8007530:	4307      	orrs	r7, r0
 8007532:	d0f5      	beq.n	8007520 <rint+0x74>
 8007534:	0851      	lsrs	r1, r2, #1
 8007536:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 800753a:	4313      	orrs	r3, r2
 800753c:	d00c      	beq.n	8007558 <rint+0xac>
 800753e:	ea24 0201 	bic.w	r2, r4, r1
 8007542:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007546:	2d13      	cmp	r5, #19
 8007548:	fa44 f505 	asr.w	r5, r4, r5
 800754c:	bf0c      	ite	eq
 800754e:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8007552:	2300      	movne	r3, #0
 8007554:	ea42 0405 	orr.w	r4, r2, r5
 8007558:	4919      	ldr	r1, [pc, #100]	; (80075c0 <rint+0x114>)
 800755a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800755e:	461a      	mov	r2, r3
 8007560:	4623      	mov	r3, r4
 8007562:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f8 feaf 	bl	80002cc <__adddf3>
 800756e:	e9cd 0100 	strd	r0, r1, [sp]
 8007572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	f7f8 fea5 	bl	80002c8 <__aeabi_dsub>
 800757e:	e7cf      	b.n	8007520 <rint+0x74>
 8007580:	2d33      	cmp	r5, #51	; 0x33
 8007582:	dd08      	ble.n	8007596 <rint+0xea>
 8007584:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007588:	d1ca      	bne.n	8007520 <rint+0x74>
 800758a:	ee10 2a10 	vmov	r2, s0
 800758e:	460b      	mov	r3, r1
 8007590:	f7f8 fe9c 	bl	80002cc <__adddf3>
 8007594:	e7c4      	b.n	8007520 <rint+0x74>
 8007596:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800759a:	f04f 35ff 	mov.w	r5, #4294967295
 800759e:	40d5      	lsrs	r5, r2
 80075a0:	4228      	tst	r0, r5
 80075a2:	d0bd      	beq.n	8007520 <rint+0x74>
 80075a4:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 80075a8:	ea4f 0155 	mov.w	r1, r5, lsr #1
 80075ac:	bf1f      	itttt	ne
 80075ae:	ea23 0101 	bicne.w	r1, r3, r1
 80075b2:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 80075b6:	fa43 f202 	asrne.w	r2, r3, r2
 80075ba:	ea41 0302 	orrne.w	r3, r1, r2
 80075be:	e7cb      	b.n	8007558 <rint+0xac>
 80075c0:	080086b0 	.word	0x080086b0
 80075c4:	000fffff 	.word	0x000fffff

080075c8 <pow>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	ed2d 8b02 	vpush	{d8}
 80075ce:	eeb0 8a40 	vmov.f32	s16, s0
 80075d2:	eef0 8a60 	vmov.f32	s17, s1
 80075d6:	ec55 4b11 	vmov	r4, r5, d1
 80075da:	f000 f865 	bl	80076a8 <__ieee754_pow>
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	4620      	mov	r0, r4
 80075e4:	4629      	mov	r1, r5
 80075e6:	ec57 6b10 	vmov	r6, r7, d0
 80075ea:	f7f9 fabf 	bl	8000b6c <__aeabi_dcmpun>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d13b      	bne.n	800766a <pow+0xa2>
 80075f2:	ec51 0b18 	vmov	r0, r1, d8
 80075f6:	2200      	movs	r2, #0
 80075f8:	2300      	movs	r3, #0
 80075fa:	f7f9 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 80075fe:	b1b8      	cbz	r0, 8007630 <pow+0x68>
 8007600:	2200      	movs	r2, #0
 8007602:	2300      	movs	r3, #0
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f9 fa7e 	bl	8000b08 <__aeabi_dcmpeq>
 800760c:	2800      	cmp	r0, #0
 800760e:	d146      	bne.n	800769e <pow+0xd6>
 8007610:	ec45 4b10 	vmov	d0, r4, r5
 8007614:	f000 fe61 	bl	80082da <finite>
 8007618:	b338      	cbz	r0, 800766a <pow+0xa2>
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	4620      	mov	r0, r4
 8007620:	4629      	mov	r1, r5
 8007622:	f7f9 fa7b 	bl	8000b1c <__aeabi_dcmplt>
 8007626:	b300      	cbz	r0, 800766a <pow+0xa2>
 8007628:	f7ff fa90 	bl	8006b4c <__errno>
 800762c:	2322      	movs	r3, #34	; 0x22
 800762e:	e01b      	b.n	8007668 <pow+0xa0>
 8007630:	ec47 6b10 	vmov	d0, r6, r7
 8007634:	f000 fe51 	bl	80082da <finite>
 8007638:	b9e0      	cbnz	r0, 8007674 <pow+0xac>
 800763a:	eeb0 0a48 	vmov.f32	s0, s16
 800763e:	eef0 0a68 	vmov.f32	s1, s17
 8007642:	f000 fe4a 	bl	80082da <finite>
 8007646:	b1a8      	cbz	r0, 8007674 <pow+0xac>
 8007648:	ec45 4b10 	vmov	d0, r4, r5
 800764c:	f000 fe45 	bl	80082da <finite>
 8007650:	b180      	cbz	r0, 8007674 <pow+0xac>
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f9 fa87 	bl	8000b6c <__aeabi_dcmpun>
 800765e:	2800      	cmp	r0, #0
 8007660:	d0e2      	beq.n	8007628 <pow+0x60>
 8007662:	f7ff fa73 	bl	8006b4c <__errno>
 8007666:	2321      	movs	r3, #33	; 0x21
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	ecbd 8b02 	vpop	{d8}
 800766e:	ec47 6b10 	vmov	d0, r6, r7
 8007672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d0f2      	beq.n	800766a <pow+0xa2>
 8007684:	eeb0 0a48 	vmov.f32	s0, s16
 8007688:	eef0 0a68 	vmov.f32	s1, s17
 800768c:	f000 fe25 	bl	80082da <finite>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0ea      	beq.n	800766a <pow+0xa2>
 8007694:	ec45 4b10 	vmov	d0, r4, r5
 8007698:	f000 fe1f 	bl	80082da <finite>
 800769c:	e7c3      	b.n	8007626 <pow+0x5e>
 800769e:	4f01      	ldr	r7, [pc, #4]	; (80076a4 <pow+0xdc>)
 80076a0:	2600      	movs	r6, #0
 80076a2:	e7e2      	b.n	800766a <pow+0xa2>
 80076a4:	3ff00000 	.word	0x3ff00000

080076a8 <__ieee754_pow>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	ed2d 8b06 	vpush	{d8-d10}
 80076b0:	b089      	sub	sp, #36	; 0x24
 80076b2:	ed8d 1b00 	vstr	d1, [sp]
 80076b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80076ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80076be:	ea58 0102 	orrs.w	r1, r8, r2
 80076c2:	ec57 6b10 	vmov	r6, r7, d0
 80076c6:	d115      	bne.n	80076f4 <__ieee754_pow+0x4c>
 80076c8:	19b3      	adds	r3, r6, r6
 80076ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80076ce:	4152      	adcs	r2, r2
 80076d0:	4299      	cmp	r1, r3
 80076d2:	4b89      	ldr	r3, [pc, #548]	; (80078f8 <__ieee754_pow+0x250>)
 80076d4:	4193      	sbcs	r3, r2
 80076d6:	f080 84d2 	bcs.w	800807e <__ieee754_pow+0x9d6>
 80076da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076de:	4630      	mov	r0, r6
 80076e0:	4639      	mov	r1, r7
 80076e2:	f7f8 fdf3 	bl	80002cc <__adddf3>
 80076e6:	ec41 0b10 	vmov	d0, r0, r1
 80076ea:	b009      	add	sp, #36	; 0x24
 80076ec:	ecbd 8b06 	vpop	{d8-d10}
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	4b81      	ldr	r3, [pc, #516]	; (80078fc <__ieee754_pow+0x254>)
 80076f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80076fa:	429c      	cmp	r4, r3
 80076fc:	ee10 aa10 	vmov	sl, s0
 8007700:	463d      	mov	r5, r7
 8007702:	dc06      	bgt.n	8007712 <__ieee754_pow+0x6a>
 8007704:	d101      	bne.n	800770a <__ieee754_pow+0x62>
 8007706:	2e00      	cmp	r6, #0
 8007708:	d1e7      	bne.n	80076da <__ieee754_pow+0x32>
 800770a:	4598      	cmp	r8, r3
 800770c:	dc01      	bgt.n	8007712 <__ieee754_pow+0x6a>
 800770e:	d10f      	bne.n	8007730 <__ieee754_pow+0x88>
 8007710:	b172      	cbz	r2, 8007730 <__ieee754_pow+0x88>
 8007712:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007716:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800771a:	ea55 050a 	orrs.w	r5, r5, sl
 800771e:	d1dc      	bne.n	80076da <__ieee754_pow+0x32>
 8007720:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007724:	18db      	adds	r3, r3, r3
 8007726:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800772a:	4152      	adcs	r2, r2
 800772c:	429d      	cmp	r5, r3
 800772e:	e7d0      	b.n	80076d2 <__ieee754_pow+0x2a>
 8007730:	2d00      	cmp	r5, #0
 8007732:	da3b      	bge.n	80077ac <__ieee754_pow+0x104>
 8007734:	4b72      	ldr	r3, [pc, #456]	; (8007900 <__ieee754_pow+0x258>)
 8007736:	4598      	cmp	r8, r3
 8007738:	dc51      	bgt.n	80077de <__ieee754_pow+0x136>
 800773a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800773e:	4598      	cmp	r8, r3
 8007740:	f340 84ac 	ble.w	800809c <__ieee754_pow+0x9f4>
 8007744:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007748:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800774c:	2b14      	cmp	r3, #20
 800774e:	dd0f      	ble.n	8007770 <__ieee754_pow+0xc8>
 8007750:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007754:	fa22 f103 	lsr.w	r1, r2, r3
 8007758:	fa01 f303 	lsl.w	r3, r1, r3
 800775c:	4293      	cmp	r3, r2
 800775e:	f040 849d 	bne.w	800809c <__ieee754_pow+0x9f4>
 8007762:	f001 0101 	and.w	r1, r1, #1
 8007766:	f1c1 0302 	rsb	r3, r1, #2
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	b182      	cbz	r2, 8007790 <__ieee754_pow+0xe8>
 800776e:	e05f      	b.n	8007830 <__ieee754_pow+0x188>
 8007770:	2a00      	cmp	r2, #0
 8007772:	d15b      	bne.n	800782c <__ieee754_pow+0x184>
 8007774:	f1c3 0314 	rsb	r3, r3, #20
 8007778:	fa48 f103 	asr.w	r1, r8, r3
 800777c:	fa01 f303 	lsl.w	r3, r1, r3
 8007780:	4543      	cmp	r3, r8
 8007782:	f040 8488 	bne.w	8008096 <__ieee754_pow+0x9ee>
 8007786:	f001 0101 	and.w	r1, r1, #1
 800778a:	f1c1 0302 	rsb	r3, r1, #2
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	4b5c      	ldr	r3, [pc, #368]	; (8007904 <__ieee754_pow+0x25c>)
 8007792:	4598      	cmp	r8, r3
 8007794:	d132      	bne.n	80077fc <__ieee754_pow+0x154>
 8007796:	f1b9 0f00 	cmp.w	r9, #0
 800779a:	f280 8478 	bge.w	800808e <__ieee754_pow+0x9e6>
 800779e:	4959      	ldr	r1, [pc, #356]	; (8007904 <__ieee754_pow+0x25c>)
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	2000      	movs	r0, #0
 80077a6:	f7f9 f871 	bl	800088c <__aeabi_ddiv>
 80077aa:	e79c      	b.n	80076e6 <__ieee754_pow+0x3e>
 80077ac:	2300      	movs	r3, #0
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	d13d      	bne.n	8007830 <__ieee754_pow+0x188>
 80077b4:	4b51      	ldr	r3, [pc, #324]	; (80078fc <__ieee754_pow+0x254>)
 80077b6:	4598      	cmp	r8, r3
 80077b8:	d1ea      	bne.n	8007790 <__ieee754_pow+0xe8>
 80077ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80077be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80077c2:	ea53 030a 	orrs.w	r3, r3, sl
 80077c6:	f000 845a 	beq.w	800807e <__ieee754_pow+0x9d6>
 80077ca:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <__ieee754_pow+0x260>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	dd08      	ble.n	80077e2 <__ieee754_pow+0x13a>
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	f2c0 8457 	blt.w	8008086 <__ieee754_pow+0x9de>
 80077d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077dc:	e783      	b.n	80076e6 <__ieee754_pow+0x3e>
 80077de:	2302      	movs	r3, #2
 80077e0:	e7e5      	b.n	80077ae <__ieee754_pow+0x106>
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	f04f 0000 	mov.w	r0, #0
 80077ea:	f04f 0100 	mov.w	r1, #0
 80077ee:	f6bf af7a 	bge.w	80076e6 <__ieee754_pow+0x3e>
 80077f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80077f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077fa:	e774      	b.n	80076e6 <__ieee754_pow+0x3e>
 80077fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007800:	d106      	bne.n	8007810 <__ieee754_pow+0x168>
 8007802:	4632      	mov	r2, r6
 8007804:	463b      	mov	r3, r7
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 ff15 	bl	8000638 <__aeabi_dmul>
 800780e:	e76a      	b.n	80076e6 <__ieee754_pow+0x3e>
 8007810:	4b3e      	ldr	r3, [pc, #248]	; (800790c <__ieee754_pow+0x264>)
 8007812:	4599      	cmp	r9, r3
 8007814:	d10c      	bne.n	8007830 <__ieee754_pow+0x188>
 8007816:	2d00      	cmp	r5, #0
 8007818:	db0a      	blt.n	8007830 <__ieee754_pow+0x188>
 800781a:	ec47 6b10 	vmov	d0, r6, r7
 800781e:	b009      	add	sp, #36	; 0x24
 8007820:	ecbd 8b06 	vpop	{d8-d10}
 8007824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	f000 bc6c 	b.w	8008104 <__ieee754_sqrt>
 800782c:	2300      	movs	r3, #0
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	ec47 6b10 	vmov	d0, r6, r7
 8007834:	f000 fd48 	bl	80082c8 <fabs>
 8007838:	ec51 0b10 	vmov	r0, r1, d0
 800783c:	f1ba 0f00 	cmp.w	sl, #0
 8007840:	d129      	bne.n	8007896 <__ieee754_pow+0x1ee>
 8007842:	b124      	cbz	r4, 800784e <__ieee754_pow+0x1a6>
 8007844:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <__ieee754_pow+0x25c>)
 8007846:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800784a:	429a      	cmp	r2, r3
 800784c:	d123      	bne.n	8007896 <__ieee754_pow+0x1ee>
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	da05      	bge.n	8007860 <__ieee754_pow+0x1b8>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	2000      	movs	r0, #0
 800785a:	492a      	ldr	r1, [pc, #168]	; (8007904 <__ieee754_pow+0x25c>)
 800785c:	f7f9 f816 	bl	800088c <__aeabi_ddiv>
 8007860:	2d00      	cmp	r5, #0
 8007862:	f6bf af40 	bge.w	80076e6 <__ieee754_pow+0x3e>
 8007866:	9b04      	ldr	r3, [sp, #16]
 8007868:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800786c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007870:	4323      	orrs	r3, r4
 8007872:	d108      	bne.n	8007886 <__ieee754_pow+0x1de>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4610      	mov	r0, r2
 800787a:	4619      	mov	r1, r3
 800787c:	f7f8 fd24 	bl	80002c8 <__aeabi_dsub>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	e78f      	b.n	80077a6 <__ieee754_pow+0xfe>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	2b01      	cmp	r3, #1
 800788a:	f47f af2c 	bne.w	80076e6 <__ieee754_pow+0x3e>
 800788e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007892:	4619      	mov	r1, r3
 8007894:	e727      	b.n	80076e6 <__ieee754_pow+0x3e>
 8007896:	0feb      	lsrs	r3, r5, #31
 8007898:	3b01      	subs	r3, #1
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	9a06      	ldr	r2, [sp, #24]
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	d102      	bne.n	80078aa <__ieee754_pow+0x202>
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	e7e6      	b.n	8007878 <__ieee754_pow+0x1d0>
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <__ieee754_pow+0x268>)
 80078ac:	4598      	cmp	r8, r3
 80078ae:	f340 80fb 	ble.w	8007aa8 <__ieee754_pow+0x400>
 80078b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078b6:	4598      	cmp	r8, r3
 80078b8:	4b13      	ldr	r3, [pc, #76]	; (8007908 <__ieee754_pow+0x260>)
 80078ba:	dd0c      	ble.n	80078d6 <__ieee754_pow+0x22e>
 80078bc:	429c      	cmp	r4, r3
 80078be:	dc0f      	bgt.n	80078e0 <__ieee754_pow+0x238>
 80078c0:	f1b9 0f00 	cmp.w	r9, #0
 80078c4:	da0f      	bge.n	80078e6 <__ieee754_pow+0x23e>
 80078c6:	2000      	movs	r0, #0
 80078c8:	b009      	add	sp, #36	; 0x24
 80078ca:	ecbd 8b06 	vpop	{d8-d10}
 80078ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d2:	f000 bcf0 	b.w	80082b6 <__math_oflow>
 80078d6:	429c      	cmp	r4, r3
 80078d8:	dbf2      	blt.n	80078c0 <__ieee754_pow+0x218>
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <__ieee754_pow+0x25c>)
 80078dc:	429c      	cmp	r4, r3
 80078de:	dd19      	ble.n	8007914 <__ieee754_pow+0x26c>
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	dcef      	bgt.n	80078c6 <__ieee754_pow+0x21e>
 80078e6:	2000      	movs	r0, #0
 80078e8:	b009      	add	sp, #36	; 0x24
 80078ea:	ecbd 8b06 	vpop	{d8-d10}
 80078ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f2:	f000 bcd7 	b.w	80082a4 <__math_uflow>
 80078f6:	bf00      	nop
 80078f8:	fff00000 	.word	0xfff00000
 80078fc:	7ff00000 	.word	0x7ff00000
 8007900:	433fffff 	.word	0x433fffff
 8007904:	3ff00000 	.word	0x3ff00000
 8007908:	3fefffff 	.word	0x3fefffff
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	41e00000 	.word	0x41e00000
 8007914:	4b60      	ldr	r3, [pc, #384]	; (8007a98 <__ieee754_pow+0x3f0>)
 8007916:	2200      	movs	r2, #0
 8007918:	f7f8 fcd6 	bl	80002c8 <__aeabi_dsub>
 800791c:	a354      	add	r3, pc, #336	; (adr r3, 8007a70 <__ieee754_pow+0x3c8>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4604      	mov	r4, r0
 8007924:	460d      	mov	r5, r1
 8007926:	f7f8 fe87 	bl	8000638 <__aeabi_dmul>
 800792a:	a353      	add	r3, pc, #332	; (adr r3, 8007a78 <__ieee754_pow+0x3d0>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fe7e 	bl	8000638 <__aeabi_dmul>
 800793c:	4b57      	ldr	r3, [pc, #348]	; (8007a9c <__ieee754_pow+0x3f4>)
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	2200      	movs	r2, #0
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fe76 	bl	8000638 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	a14b      	add	r1, pc, #300	; (adr r1, 8007a80 <__ieee754_pow+0x3d8>)
 8007952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007956:	f7f8 fcb7 	bl	80002c8 <__aeabi_dsub>
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	f7f8 fe6b 	bl	8000638 <__aeabi_dmul>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	2000      	movs	r0, #0
 8007968:	494d      	ldr	r1, [pc, #308]	; (8007aa0 <__ieee754_pow+0x3f8>)
 800796a:	f7f8 fcad 	bl	80002c8 <__aeabi_dsub>
 800796e:	4622      	mov	r2, r4
 8007970:	4680      	mov	r8, r0
 8007972:	4689      	mov	r9, r1
 8007974:	462b      	mov	r3, r5
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fe5d 	bl	8000638 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fe57 	bl	8000638 <__aeabi_dmul>
 800798a:	a33f      	add	r3, pc, #252	; (adr r3, 8007a88 <__ieee754_pow+0x3e0>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fe52 	bl	8000638 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4650      	mov	r0, sl
 800799a:	4659      	mov	r1, fp
 800799c:	f7f8 fc94 	bl	80002c8 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fc8e 	bl	80002cc <__adddf3>
 80079b0:	2000      	movs	r0, #0
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f8 fc85 	bl	80002c8 <__aeabi_dsub>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fc7f 	bl	80002c8 <__aeabi_dsub>
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	9a06      	ldr	r2, [sp, #24]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	4682      	mov	sl, r0
 80079d4:	468b      	mov	fp, r1
 80079d6:	f040 81e7 	bne.w	8007da8 <__ieee754_pow+0x700>
 80079da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007a90 <__ieee754_pow+0x3e8>
 80079de:	eeb0 8a47 	vmov.f32	s16, s14
 80079e2:	eef0 8a67 	vmov.f32	s17, s15
 80079e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079ea:	2600      	movs	r6, #0
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079f4:	f7f8 fc68 	bl	80002c8 <__aeabi_dsub>
 80079f8:	4622      	mov	r2, r4
 80079fa:	462b      	mov	r3, r5
 80079fc:	f7f8 fe1c 	bl	8000638 <__aeabi_dmul>
 8007a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	4650      	mov	r0, sl
 8007a0a:	4659      	mov	r1, fp
 8007a0c:	f7f8 fe14 	bl	8000638 <__aeabi_dmul>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fc58 	bl	80002cc <__adddf3>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	4680      	mov	r8, r0
 8007a22:	4689      	mov	r9, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fe06 	bl	8000638 <__aeabi_dmul>
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	4602      	mov	r2, r0
 8007a34:	4649      	mov	r1, r9
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7f8 fc48 	bl	80002cc <__adddf3>
 8007a3c:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <__ieee754_pow+0x3fc>)
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	ec45 4b19 	vmov	d9, r4, r5
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f340 82f1 	ble.w	8008030 <__ieee754_pow+0x988>
 8007a4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a56:	4303      	orrs	r3, r0
 8007a58:	f000 81e4 	beq.w	8007e24 <__ieee754_pow+0x77c>
 8007a5c:	ec51 0b18 	vmov	r0, r1, d8
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	f7f9 f85a 	bl	8000b1c <__aeabi_dcmplt>
 8007a68:	3800      	subs	r0, #0
 8007a6a:	bf18      	it	ne
 8007a6c:	2001      	movne	r0, #1
 8007a6e:	e72b      	b.n	80078c8 <__ieee754_pow+0x220>
 8007a70:	60000000 	.word	0x60000000
 8007a74:	3ff71547 	.word	0x3ff71547
 8007a78:	f85ddf44 	.word	0xf85ddf44
 8007a7c:	3e54ae0b 	.word	0x3e54ae0b
 8007a80:	55555555 	.word	0x55555555
 8007a84:	3fd55555 	.word	0x3fd55555
 8007a88:	652b82fe 	.word	0x652b82fe
 8007a8c:	3ff71547 	.word	0x3ff71547
 8007a90:	00000000 	.word	0x00000000
 8007a94:	bff00000 	.word	0xbff00000
 8007a98:	3ff00000 	.word	0x3ff00000
 8007a9c:	3fd00000 	.word	0x3fd00000
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	408fffff 	.word	0x408fffff
 8007aa8:	4bd5      	ldr	r3, [pc, #852]	; (8007e00 <__ieee754_pow+0x758>)
 8007aaa:	402b      	ands	r3, r5
 8007aac:	2200      	movs	r2, #0
 8007aae:	b92b      	cbnz	r3, 8007abc <__ieee754_pow+0x414>
 8007ab0:	4bd4      	ldr	r3, [pc, #848]	; (8007e04 <__ieee754_pow+0x75c>)
 8007ab2:	f7f8 fdc1 	bl	8000638 <__aeabi_dmul>
 8007ab6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007aba:	460c      	mov	r4, r1
 8007abc:	1523      	asrs	r3, r4, #20
 8007abe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ac2:	4413      	add	r3, r2
 8007ac4:	9305      	str	r3, [sp, #20]
 8007ac6:	4bd0      	ldr	r3, [pc, #832]	; (8007e08 <__ieee754_pow+0x760>)
 8007ac8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007acc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ad0:	429c      	cmp	r4, r3
 8007ad2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ad6:	dd08      	ble.n	8007aea <__ieee754_pow+0x442>
 8007ad8:	4bcc      	ldr	r3, [pc, #816]	; (8007e0c <__ieee754_pow+0x764>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	f340 8162 	ble.w	8007da4 <__ieee754_pow+0x6fc>
 8007ae0:	9b05      	ldr	r3, [sp, #20]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007aea:	2400      	movs	r4, #0
 8007aec:	00e3      	lsls	r3, r4, #3
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	4bc7      	ldr	r3, [pc, #796]	; (8007e10 <__ieee754_pow+0x768>)
 8007af2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007af6:	ed93 7b00 	vldr	d7, [r3]
 8007afa:	4629      	mov	r1, r5
 8007afc:	ec53 2b17 	vmov	r2, r3, d7
 8007b00:	eeb0 9a47 	vmov.f32	s18, s14
 8007b04:	eef0 9a67 	vmov.f32	s19, s15
 8007b08:	4682      	mov	sl, r0
 8007b0a:	f7f8 fbdd 	bl	80002c8 <__aeabi_dsub>
 8007b0e:	4652      	mov	r2, sl
 8007b10:	4606      	mov	r6, r0
 8007b12:	460f      	mov	r7, r1
 8007b14:	462b      	mov	r3, r5
 8007b16:	ec51 0b19 	vmov	r0, r1, d9
 8007b1a:	f7f8 fbd7 	bl	80002cc <__adddf3>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	2000      	movs	r0, #0
 8007b24:	49bb      	ldr	r1, [pc, #748]	; (8007e14 <__ieee754_pow+0x76c>)
 8007b26:	f7f8 feb1 	bl	800088c <__aeabi_ddiv>
 8007b2a:	ec41 0b1a 	vmov	d10, r0, r1
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4630      	mov	r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	f7f8 fd7f 	bl	8000638 <__aeabi_dmul>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b46:	46ab      	mov	fp, r5
 8007b48:	106d      	asrs	r5, r5, #1
 8007b4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b52:	ec41 0b18 	vmov	d8, r0, r1
 8007b56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4614      	mov	r4, r2
 8007b62:	461d      	mov	r5, r3
 8007b64:	f7f8 fd68 	bl	8000638 <__aeabi_dmul>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fbaa 	bl	80002c8 <__aeabi_dsub>
 8007b74:	ec53 2b19 	vmov	r2, r3, d9
 8007b78:	4606      	mov	r6, r0
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 fba2 	bl	80002c8 <__aeabi_dsub>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4650      	mov	r0, sl
 8007b8a:	4659      	mov	r1, fp
 8007b8c:	f7f8 fb9c 	bl	80002c8 <__aeabi_dsub>
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	f7f8 fd50 	bl	8000638 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fb92 	bl	80002c8 <__aeabi_dsub>
 8007ba4:	ec53 2b1a 	vmov	r2, r3, d10
 8007ba8:	f7f8 fd46 	bl	8000638 <__aeabi_dmul>
 8007bac:	ec53 2b18 	vmov	r2, r3, d8
 8007bb0:	ec41 0b19 	vmov	d9, r0, r1
 8007bb4:	ec51 0b18 	vmov	r0, r1, d8
 8007bb8:	f7f8 fd3e 	bl	8000638 <__aeabi_dmul>
 8007bbc:	a37c      	add	r3, pc, #496	; (adr r3, 8007db0 <__ieee754_pow+0x708>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	460d      	mov	r5, r1
 8007bc6:	f7f8 fd37 	bl	8000638 <__aeabi_dmul>
 8007bca:	a37b      	add	r3, pc, #492	; (adr r3, 8007db8 <__ieee754_pow+0x710>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fb7c 	bl	80002cc <__adddf3>
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	f7f8 fd2e 	bl	8000638 <__aeabi_dmul>
 8007bdc:	a378      	add	r3, pc, #480	; (adr r3, 8007dc0 <__ieee754_pow+0x718>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fb73 	bl	80002cc <__adddf3>
 8007be6:	4622      	mov	r2, r4
 8007be8:	462b      	mov	r3, r5
 8007bea:	f7f8 fd25 	bl	8000638 <__aeabi_dmul>
 8007bee:	a376      	add	r3, pc, #472	; (adr r3, 8007dc8 <__ieee754_pow+0x720>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fb6a 	bl	80002cc <__adddf3>
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	462b      	mov	r3, r5
 8007bfc:	f7f8 fd1c 	bl	8000638 <__aeabi_dmul>
 8007c00:	a373      	add	r3, pc, #460	; (adr r3, 8007dd0 <__ieee754_pow+0x728>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fb61 	bl	80002cc <__adddf3>
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	f7f8 fd13 	bl	8000638 <__aeabi_dmul>
 8007c12:	a371      	add	r3, pc, #452	; (adr r3, 8007dd8 <__ieee754_pow+0x730>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fb58 	bl	80002cc <__adddf3>
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460f      	mov	r7, r1
 8007c22:	462b      	mov	r3, r5
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fd06 	bl	8000638 <__aeabi_dmul>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fd00 	bl	8000638 <__aeabi_dmul>
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	460d      	mov	r5, r1
 8007c3e:	464b      	mov	r3, r9
 8007c40:	ec51 0b18 	vmov	r0, r1, d8
 8007c44:	f7f8 fb42 	bl	80002cc <__adddf3>
 8007c48:	ec53 2b19 	vmov	r2, r3, d9
 8007c4c:	f7f8 fcf4 	bl	8000638 <__aeabi_dmul>
 8007c50:	4622      	mov	r2, r4
 8007c52:	462b      	mov	r3, r5
 8007c54:	f7f8 fb3a 	bl	80002cc <__adddf3>
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4682      	mov	sl, r0
 8007c5c:	468b      	mov	fp, r1
 8007c5e:	464b      	mov	r3, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 fce8 	bl	8000638 <__aeabi_dmul>
 8007c68:	4b6b      	ldr	r3, [pc, #428]	; (8007e18 <__ieee754_pow+0x770>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	f7f8 fb2c 	bl	80002cc <__adddf3>
 8007c74:	4652      	mov	r2, sl
 8007c76:	465b      	mov	r3, fp
 8007c78:	f7f8 fb28 	bl	80002cc <__adddf3>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4640      	mov	r0, r8
 8007c88:	4649      	mov	r1, r9
 8007c8a:	f7f8 fcd5 	bl	8000638 <__aeabi_dmul>
 8007c8e:	4b62      	ldr	r3, [pc, #392]	; (8007e18 <__ieee754_pow+0x770>)
 8007c90:	4680      	mov	r8, r0
 8007c92:	4689      	mov	r9, r1
 8007c94:	2200      	movs	r2, #0
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 fb15 	bl	80002c8 <__aeabi_dsub>
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	f7f8 fb11 	bl	80002c8 <__aeabi_dsub>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fb0b 	bl	80002c8 <__aeabi_dsub>
 8007cb2:	ec53 2b18 	vmov	r2, r3, d8
 8007cb6:	f7f8 fcbf 	bl	8000638 <__aeabi_dmul>
 8007cba:	4622      	mov	r2, r4
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	ec51 0b19 	vmov	r0, r1, d9
 8007cc6:	f7f8 fcb7 	bl	8000638 <__aeabi_dmul>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fafb 	bl	80002cc <__adddf3>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	f7f8 faf3 	bl	80002cc <__adddf3>
 8007ce6:	a33e      	add	r3, pc, #248	; (adr r3, 8007de0 <__ieee754_pow+0x738>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	2000      	movs	r0, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	f7f8 fca1 	bl	8000638 <__aeabi_dmul>
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	ec41 0b18 	vmov	d8, r0, r1
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fae1 	bl	80002c8 <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	f7f8 fadb 	bl	80002c8 <__aeabi_dsub>
 8007d12:	a335      	add	r3, pc, #212	; (adr r3, 8007de8 <__ieee754_pow+0x740>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fc8e 	bl	8000638 <__aeabi_dmul>
 8007d1c:	a334      	add	r3, pc, #208	; (adr r3, 8007df0 <__ieee754_pow+0x748>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fc85 	bl	8000638 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 fac9 	bl	80002cc <__adddf3>
 8007d3a:	9a07      	ldr	r2, [sp, #28]
 8007d3c:	4b37      	ldr	r3, [pc, #220]	; (8007e1c <__ieee754_pow+0x774>)
 8007d3e:	4413      	add	r3, r2
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f7f8 fac2 	bl	80002cc <__adddf3>
 8007d48:	4682      	mov	sl, r0
 8007d4a:	9805      	ldr	r0, [sp, #20]
 8007d4c:	468b      	mov	fp, r1
 8007d4e:	f7f8 fc09 	bl	8000564 <__aeabi_i2d>
 8007d52:	9a07      	ldr	r2, [sp, #28]
 8007d54:	4b32      	ldr	r3, [pc, #200]	; (8007e20 <__ieee754_pow+0x778>)
 8007d56:	4413      	add	r3, r2
 8007d58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	4652      	mov	r2, sl
 8007d62:	465b      	mov	r3, fp
 8007d64:	ec51 0b18 	vmov	r0, r1, d8
 8007d68:	f7f8 fab0 	bl	80002cc <__adddf3>
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	f7f8 faac 	bl	80002cc <__adddf3>
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	f7f8 faa8 	bl	80002cc <__adddf3>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	4632      	mov	r2, r6
 8007d80:	463b      	mov	r3, r7
 8007d82:	4604      	mov	r4, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	f7f8 fa9f 	bl	80002c8 <__aeabi_dsub>
 8007d8a:	4642      	mov	r2, r8
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	f7f8 fa9b 	bl	80002c8 <__aeabi_dsub>
 8007d92:	ec53 2b18 	vmov	r2, r3, d8
 8007d96:	f7f8 fa97 	bl	80002c8 <__aeabi_dsub>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4650      	mov	r0, sl
 8007da0:	4659      	mov	r1, fp
 8007da2:	e610      	b.n	80079c6 <__ieee754_pow+0x31e>
 8007da4:	2401      	movs	r4, #1
 8007da6:	e6a1      	b.n	8007aec <__ieee754_pow+0x444>
 8007da8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007df8 <__ieee754_pow+0x750>
 8007dac:	e617      	b.n	80079de <__ieee754_pow+0x336>
 8007dae:	bf00      	nop
 8007db0:	4a454eef 	.word	0x4a454eef
 8007db4:	3fca7e28 	.word	0x3fca7e28
 8007db8:	93c9db65 	.word	0x93c9db65
 8007dbc:	3fcd864a 	.word	0x3fcd864a
 8007dc0:	a91d4101 	.word	0xa91d4101
 8007dc4:	3fd17460 	.word	0x3fd17460
 8007dc8:	518f264d 	.word	0x518f264d
 8007dcc:	3fd55555 	.word	0x3fd55555
 8007dd0:	db6fabff 	.word	0xdb6fabff
 8007dd4:	3fdb6db6 	.word	0x3fdb6db6
 8007dd8:	33333303 	.word	0x33333303
 8007ddc:	3fe33333 	.word	0x3fe33333
 8007de0:	e0000000 	.word	0xe0000000
 8007de4:	3feec709 	.word	0x3feec709
 8007de8:	dc3a03fd 	.word	0xdc3a03fd
 8007dec:	3feec709 	.word	0x3feec709
 8007df0:	145b01f5 	.word	0x145b01f5
 8007df4:	be3e2fe0 	.word	0xbe3e2fe0
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	3ff00000 	.word	0x3ff00000
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	43400000 	.word	0x43400000
 8007e08:	0003988e 	.word	0x0003988e
 8007e0c:	000bb679 	.word	0x000bb679
 8007e10:	080086c0 	.word	0x080086c0
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	40080000 	.word	0x40080000
 8007e1c:	080086e0 	.word	0x080086e0
 8007e20:	080086d0 	.word	0x080086d0
 8007e24:	a3b5      	add	r3, pc, #724	; (adr r3, 80080fc <__ieee754_pow+0xa54>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	f7f8 fa4d 	bl	80002cc <__adddf3>
 8007e32:	4622      	mov	r2, r4
 8007e34:	ec41 0b1a 	vmov	d10, r0, r1
 8007e38:	462b      	mov	r3, r5
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fa43 	bl	80002c8 <__aeabi_dsub>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	ec51 0b1a 	vmov	r0, r1, d10
 8007e4a:	f7f8 fe85 	bl	8000b58 <__aeabi_dcmpgt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	f47f ae04 	bne.w	8007a5c <__ieee754_pow+0x3b4>
 8007e54:	4aa4      	ldr	r2, [pc, #656]	; (80080e8 <__ieee754_pow+0xa40>)
 8007e56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	f340 8108 	ble.w	8008070 <__ieee754_pow+0x9c8>
 8007e60:	151b      	asrs	r3, r3, #20
 8007e62:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007e66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007e6a:	fa4a f303 	asr.w	r3, sl, r3
 8007e6e:	445b      	add	r3, fp
 8007e70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e74:	4e9d      	ldr	r6, [pc, #628]	; (80080ec <__ieee754_pow+0xa44>)
 8007e76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007e7a:	4116      	asrs	r6, r2
 8007e7c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007e80:	2000      	movs	r0, #0
 8007e82:	ea23 0106 	bic.w	r1, r3, r6
 8007e86:	f1c2 0214 	rsb	r2, r2, #20
 8007e8a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007e8e:	fa4a fa02 	asr.w	sl, sl, r2
 8007e92:	f1bb 0f00 	cmp.w	fp, #0
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	bfb8      	it	lt
 8007ea0:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ea4:	f7f8 fa10 	bl	80002c8 <__aeabi_dsub>
 8007ea8:	ec41 0b19 	vmov	d9, r0, r1
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	ec51 0b19 	vmov	r0, r1, d9
 8007eb4:	f7f8 fa0a 	bl	80002cc <__adddf3>
 8007eb8:	a37b      	add	r3, pc, #492	; (adr r3, 80080a8 <__ieee754_pow+0xa00>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	f7f8 fbb8 	bl	8000638 <__aeabi_dmul>
 8007ec8:	ec53 2b19 	vmov	r2, r3, d9
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f9f8 	bl	80002c8 <__aeabi_dsub>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4640      	mov	r0, r8
 8007ede:	4649      	mov	r1, r9
 8007ee0:	f7f8 f9f2 	bl	80002c8 <__aeabi_dsub>
 8007ee4:	a372      	add	r3, pc, #456	; (adr r3, 80080b0 <__ieee754_pow+0xa08>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 fba5 	bl	8000638 <__aeabi_dmul>
 8007eee:	a372      	add	r3, pc, #456	; (adr r3, 80080b8 <__ieee754_pow+0xa10>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	4689      	mov	r9, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 fb9c 	bl	8000638 <__aeabi_dmul>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 f9e0 	bl	80002cc <__adddf3>
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4630      	mov	r0, r6
 8007f16:	4639      	mov	r1, r7
 8007f18:	f7f8 f9d8 	bl	80002cc <__adddf3>
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	463b      	mov	r3, r7
 8007f20:	4680      	mov	r8, r0
 8007f22:	4689      	mov	r9, r1
 8007f24:	f7f8 f9d0 	bl	80002c8 <__aeabi_dsub>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 f9ca 	bl	80002c8 <__aeabi_dsub>
 8007f34:	4642      	mov	r2, r8
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	4649      	mov	r1, r9
 8007f40:	f7f8 fb7a 	bl	8000638 <__aeabi_dmul>
 8007f44:	a35e      	add	r3, pc, #376	; (adr r3, 80080c0 <__ieee754_pow+0xa18>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	f7f8 fb73 	bl	8000638 <__aeabi_dmul>
 8007f52:	a35d      	add	r3, pc, #372	; (adr r3, 80080c8 <__ieee754_pow+0xa20>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 f9b6 	bl	80002c8 <__aeabi_dsub>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	462b      	mov	r3, r5
 8007f60:	f7f8 fb6a 	bl	8000638 <__aeabi_dmul>
 8007f64:	a35a      	add	r3, pc, #360	; (adr r3, 80080d0 <__ieee754_pow+0xa28>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 f9af 	bl	80002cc <__adddf3>
 8007f6e:	4622      	mov	r2, r4
 8007f70:	462b      	mov	r3, r5
 8007f72:	f7f8 fb61 	bl	8000638 <__aeabi_dmul>
 8007f76:	a358      	add	r3, pc, #352	; (adr r3, 80080d8 <__ieee754_pow+0xa30>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 f9a4 	bl	80002c8 <__aeabi_dsub>
 8007f80:	4622      	mov	r2, r4
 8007f82:	462b      	mov	r3, r5
 8007f84:	f7f8 fb58 	bl	8000638 <__aeabi_dmul>
 8007f88:	a355      	add	r3, pc, #340	; (adr r3, 80080e0 <__ieee754_pow+0xa38>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 f99d 	bl	80002cc <__adddf3>
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	f7f8 fb4f 	bl	8000638 <__aeabi_dmul>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	f7f8 f991 	bl	80002c8 <__aeabi_dsub>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	460d      	mov	r5, r1
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4640      	mov	r0, r8
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	f7f8 fb41 	bl	8000638 <__aeabi_dmul>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	ec41 0b19 	vmov	d9, r0, r1
 8007fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	f7f8 f980 	bl	80002c8 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	ec51 0b19 	vmov	r0, r1, d9
 8007fd0:	f7f8 fc5c 	bl	800088c <__aeabi_ddiv>
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	463b      	mov	r3, r7
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 fb2a 	bl	8000638 <__aeabi_dmul>
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	f7f8 f970 	bl	80002cc <__adddf3>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7f8 f968 	bl	80002c8 <__aeabi_dsub>
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	f7f8 f964 	bl	80002c8 <__aeabi_dsub>
 8008000:	460b      	mov	r3, r1
 8008002:	4602      	mov	r2, r0
 8008004:	493a      	ldr	r1, [pc, #232]	; (80080f0 <__ieee754_pow+0xa48>)
 8008006:	2000      	movs	r0, #0
 8008008:	f7f8 f95e 	bl	80002c8 <__aeabi_dsub>
 800800c:	ec41 0b10 	vmov	d0, r0, r1
 8008010:	ee10 3a90 	vmov	r3, s1
 8008014:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801c:	da2b      	bge.n	8008076 <__ieee754_pow+0x9ce>
 800801e:	4650      	mov	r0, sl
 8008020:	f000 f966 	bl	80082f0 <scalbn>
 8008024:	ec51 0b10 	vmov	r0, r1, d0
 8008028:	ec53 2b18 	vmov	r2, r3, d8
 800802c:	f7ff bbed 	b.w	800780a <__ieee754_pow+0x162>
 8008030:	4b30      	ldr	r3, [pc, #192]	; (80080f4 <__ieee754_pow+0xa4c>)
 8008032:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008036:	429e      	cmp	r6, r3
 8008038:	f77f af0c 	ble.w	8007e54 <__ieee754_pow+0x7ac>
 800803c:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <__ieee754_pow+0xa50>)
 800803e:	440b      	add	r3, r1
 8008040:	4303      	orrs	r3, r0
 8008042:	d009      	beq.n	8008058 <__ieee754_pow+0x9b0>
 8008044:	ec51 0b18 	vmov	r0, r1, d8
 8008048:	2200      	movs	r2, #0
 800804a:	2300      	movs	r3, #0
 800804c:	f7f8 fd66 	bl	8000b1c <__aeabi_dcmplt>
 8008050:	3800      	subs	r0, #0
 8008052:	bf18      	it	ne
 8008054:	2001      	movne	r0, #1
 8008056:	e447      	b.n	80078e8 <__ieee754_pow+0x240>
 8008058:	4622      	mov	r2, r4
 800805a:	462b      	mov	r3, r5
 800805c:	f7f8 f934 	bl	80002c8 <__aeabi_dsub>
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	f7f8 fd6e 	bl	8000b44 <__aeabi_dcmpge>
 8008068:	2800      	cmp	r0, #0
 800806a:	f43f aef3 	beq.w	8007e54 <__ieee754_pow+0x7ac>
 800806e:	e7e9      	b.n	8008044 <__ieee754_pow+0x99c>
 8008070:	f04f 0a00 	mov.w	sl, #0
 8008074:	e71a      	b.n	8007eac <__ieee754_pow+0x804>
 8008076:	ec51 0b10 	vmov	r0, r1, d0
 800807a:	4619      	mov	r1, r3
 800807c:	e7d4      	b.n	8008028 <__ieee754_pow+0x980>
 800807e:	491c      	ldr	r1, [pc, #112]	; (80080f0 <__ieee754_pow+0xa48>)
 8008080:	2000      	movs	r0, #0
 8008082:	f7ff bb30 	b.w	80076e6 <__ieee754_pow+0x3e>
 8008086:	2000      	movs	r0, #0
 8008088:	2100      	movs	r1, #0
 800808a:	f7ff bb2c 	b.w	80076e6 <__ieee754_pow+0x3e>
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7ff bb28 	b.w	80076e6 <__ieee754_pow+0x3e>
 8008096:	9204      	str	r2, [sp, #16]
 8008098:	f7ff bb7a 	b.w	8007790 <__ieee754_pow+0xe8>
 800809c:	2300      	movs	r3, #0
 800809e:	f7ff bb64 	b.w	800776a <__ieee754_pow+0xc2>
 80080a2:	bf00      	nop
 80080a4:	f3af 8000 	nop.w
 80080a8:	00000000 	.word	0x00000000
 80080ac:	3fe62e43 	.word	0x3fe62e43
 80080b0:	fefa39ef 	.word	0xfefa39ef
 80080b4:	3fe62e42 	.word	0x3fe62e42
 80080b8:	0ca86c39 	.word	0x0ca86c39
 80080bc:	be205c61 	.word	0xbe205c61
 80080c0:	72bea4d0 	.word	0x72bea4d0
 80080c4:	3e663769 	.word	0x3e663769
 80080c8:	c5d26bf1 	.word	0xc5d26bf1
 80080cc:	3ebbbd41 	.word	0x3ebbbd41
 80080d0:	af25de2c 	.word	0xaf25de2c
 80080d4:	3f11566a 	.word	0x3f11566a
 80080d8:	16bebd93 	.word	0x16bebd93
 80080dc:	3f66c16c 	.word	0x3f66c16c
 80080e0:	5555553e 	.word	0x5555553e
 80080e4:	3fc55555 	.word	0x3fc55555
 80080e8:	3fe00000 	.word	0x3fe00000
 80080ec:	000fffff 	.word	0x000fffff
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	4090cbff 	.word	0x4090cbff
 80080f8:	3f6f3400 	.word	0x3f6f3400
 80080fc:	652b82fe 	.word	0x652b82fe
 8008100:	3c971547 	.word	0x3c971547

08008104 <__ieee754_sqrt>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	ec55 4b10 	vmov	r4, r5, d0
 800810c:	4e55      	ldr	r6, [pc, #340]	; (8008264 <__ieee754_sqrt+0x160>)
 800810e:	43ae      	bics	r6, r5
 8008110:	ee10 0a10 	vmov	r0, s0
 8008114:	ee10 3a10 	vmov	r3, s0
 8008118:	462a      	mov	r2, r5
 800811a:	4629      	mov	r1, r5
 800811c:	d110      	bne.n	8008140 <__ieee754_sqrt+0x3c>
 800811e:	ee10 2a10 	vmov	r2, s0
 8008122:	462b      	mov	r3, r5
 8008124:	f7f8 fa88 	bl	8000638 <__aeabi_dmul>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 f8cc 	bl	80002cc <__adddf3>
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	ec45 4b10 	vmov	d0, r4, r5
 800813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008140:	2d00      	cmp	r5, #0
 8008142:	dc10      	bgt.n	8008166 <__ieee754_sqrt+0x62>
 8008144:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008148:	4330      	orrs	r0, r6
 800814a:	d0f5      	beq.n	8008138 <__ieee754_sqrt+0x34>
 800814c:	b15d      	cbz	r5, 8008166 <__ieee754_sqrt+0x62>
 800814e:	ee10 2a10 	vmov	r2, s0
 8008152:	462b      	mov	r3, r5
 8008154:	ee10 0a10 	vmov	r0, s0
 8008158:	f7f8 f8b6 	bl	80002c8 <__aeabi_dsub>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	f7f8 fb94 	bl	800088c <__aeabi_ddiv>
 8008164:	e7e6      	b.n	8008134 <__ieee754_sqrt+0x30>
 8008166:	1512      	asrs	r2, r2, #20
 8008168:	d074      	beq.n	8008254 <__ieee754_sqrt+0x150>
 800816a:	07d4      	lsls	r4, r2, #31
 800816c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008170:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008174:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008178:	bf5e      	ittt	pl
 800817a:	0fda      	lsrpl	r2, r3, #31
 800817c:	005b      	lslpl	r3, r3, #1
 800817e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008182:	2400      	movs	r4, #0
 8008184:	0fda      	lsrs	r2, r3, #31
 8008186:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800818a:	107f      	asrs	r7, r7, #1
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	2516      	movs	r5, #22
 8008190:	4620      	mov	r0, r4
 8008192:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008196:	1886      	adds	r6, r0, r2
 8008198:	428e      	cmp	r6, r1
 800819a:	bfde      	ittt	le
 800819c:	1b89      	suble	r1, r1, r6
 800819e:	18b0      	addle	r0, r6, r2
 80081a0:	18a4      	addle	r4, r4, r2
 80081a2:	0049      	lsls	r1, r1, #1
 80081a4:	3d01      	subs	r5, #1
 80081a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80081aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80081ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081b2:	d1f0      	bne.n	8008196 <__ieee754_sqrt+0x92>
 80081b4:	462a      	mov	r2, r5
 80081b6:	f04f 0e20 	mov.w	lr, #32
 80081ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80081be:	4281      	cmp	r1, r0
 80081c0:	eb06 0c05 	add.w	ip, r6, r5
 80081c4:	dc02      	bgt.n	80081cc <__ieee754_sqrt+0xc8>
 80081c6:	d113      	bne.n	80081f0 <__ieee754_sqrt+0xec>
 80081c8:	459c      	cmp	ip, r3
 80081ca:	d811      	bhi.n	80081f0 <__ieee754_sqrt+0xec>
 80081cc:	f1bc 0f00 	cmp.w	ip, #0
 80081d0:	eb0c 0506 	add.w	r5, ip, r6
 80081d4:	da43      	bge.n	800825e <__ieee754_sqrt+0x15a>
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	db41      	blt.n	800825e <__ieee754_sqrt+0x15a>
 80081da:	f100 0801 	add.w	r8, r0, #1
 80081de:	1a09      	subs	r1, r1, r0
 80081e0:	459c      	cmp	ip, r3
 80081e2:	bf88      	it	hi
 80081e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80081e8:	eba3 030c 	sub.w	r3, r3, ip
 80081ec:	4432      	add	r2, r6
 80081ee:	4640      	mov	r0, r8
 80081f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80081f4:	f1be 0e01 	subs.w	lr, lr, #1
 80081f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80081fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008200:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008204:	d1db      	bne.n	80081be <__ieee754_sqrt+0xba>
 8008206:	430b      	orrs	r3, r1
 8008208:	d006      	beq.n	8008218 <__ieee754_sqrt+0x114>
 800820a:	1c50      	adds	r0, r2, #1
 800820c:	bf13      	iteet	ne
 800820e:	3201      	addne	r2, #1
 8008210:	3401      	addeq	r4, #1
 8008212:	4672      	moveq	r2, lr
 8008214:	f022 0201 	bicne.w	r2, r2, #1
 8008218:	1063      	asrs	r3, r4, #1
 800821a:	0852      	lsrs	r2, r2, #1
 800821c:	07e1      	lsls	r1, r4, #31
 800821e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008222:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008226:	bf48      	it	mi
 8008228:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800822c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008230:	4614      	mov	r4, r2
 8008232:	e781      	b.n	8008138 <__ieee754_sqrt+0x34>
 8008234:	0ad9      	lsrs	r1, r3, #11
 8008236:	3815      	subs	r0, #21
 8008238:	055b      	lsls	r3, r3, #21
 800823a:	2900      	cmp	r1, #0
 800823c:	d0fa      	beq.n	8008234 <__ieee754_sqrt+0x130>
 800823e:	02cd      	lsls	r5, r1, #11
 8008240:	d50a      	bpl.n	8008258 <__ieee754_sqrt+0x154>
 8008242:	f1c2 0420 	rsb	r4, r2, #32
 8008246:	fa23 f404 	lsr.w	r4, r3, r4
 800824a:	1e55      	subs	r5, r2, #1
 800824c:	4093      	lsls	r3, r2
 800824e:	4321      	orrs	r1, r4
 8008250:	1b42      	subs	r2, r0, r5
 8008252:	e78a      	b.n	800816a <__ieee754_sqrt+0x66>
 8008254:	4610      	mov	r0, r2
 8008256:	e7f0      	b.n	800823a <__ieee754_sqrt+0x136>
 8008258:	0049      	lsls	r1, r1, #1
 800825a:	3201      	adds	r2, #1
 800825c:	e7ef      	b.n	800823e <__ieee754_sqrt+0x13a>
 800825e:	4680      	mov	r8, r0
 8008260:	e7bd      	b.n	80081de <__ieee754_sqrt+0xda>
 8008262:	bf00      	nop
 8008264:	7ff00000 	.word	0x7ff00000

08008268 <with_errno>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4604      	mov	r4, r0
 800826c:	460d      	mov	r5, r1
 800826e:	4616      	mov	r6, r2
 8008270:	f7fe fc6c 	bl	8006b4c <__errno>
 8008274:	4629      	mov	r1, r5
 8008276:	6006      	str	r6, [r0, #0]
 8008278:	4620      	mov	r0, r4
 800827a:	bd70      	pop	{r4, r5, r6, pc}

0800827c <xflow>:
 800827c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800827e:	4614      	mov	r4, r2
 8008280:	461d      	mov	r5, r3
 8008282:	b108      	cbz	r0, 8008288 <xflow+0xc>
 8008284:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008288:	e9cd 2300 	strd	r2, r3, [sp]
 800828c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f9d0 	bl	8000638 <__aeabi_dmul>
 8008298:	2222      	movs	r2, #34	; 0x22
 800829a:	b003      	add	sp, #12
 800829c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082a0:	f7ff bfe2 	b.w	8008268 <with_errno>

080082a4 <__math_uflow>:
 80082a4:	b508      	push	{r3, lr}
 80082a6:	2200      	movs	r2, #0
 80082a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082ac:	f7ff ffe6 	bl	800827c <xflow>
 80082b0:	ec41 0b10 	vmov	d0, r0, r1
 80082b4:	bd08      	pop	{r3, pc}

080082b6 <__math_oflow>:
 80082b6:	b508      	push	{r3, lr}
 80082b8:	2200      	movs	r2, #0
 80082ba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80082be:	f7ff ffdd 	bl	800827c <xflow>
 80082c2:	ec41 0b10 	vmov	d0, r0, r1
 80082c6:	bd08      	pop	{r3, pc}

080082c8 <fabs>:
 80082c8:	ec51 0b10 	vmov	r0, r1, d0
 80082cc:	ee10 2a10 	vmov	r2, s0
 80082d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082d4:	ec43 2b10 	vmov	d0, r2, r3
 80082d8:	4770      	bx	lr

080082da <finite>:
 80082da:	b082      	sub	sp, #8
 80082dc:	ed8d 0b00 	vstr	d0, [sp]
 80082e0:	9801      	ldr	r0, [sp, #4]
 80082e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80082e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80082ea:	0fc0      	lsrs	r0, r0, #31
 80082ec:	b002      	add	sp, #8
 80082ee:	4770      	bx	lr

080082f0 <scalbn>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	ec55 4b10 	vmov	r4, r5, d0
 80082f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80082fa:	4606      	mov	r6, r0
 80082fc:	462b      	mov	r3, r5
 80082fe:	b99a      	cbnz	r2, 8008328 <scalbn+0x38>
 8008300:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008304:	4323      	orrs	r3, r4
 8008306:	d036      	beq.n	8008376 <scalbn+0x86>
 8008308:	4b39      	ldr	r3, [pc, #228]	; (80083f0 <scalbn+0x100>)
 800830a:	4629      	mov	r1, r5
 800830c:	ee10 0a10 	vmov	r0, s0
 8008310:	2200      	movs	r2, #0
 8008312:	f7f8 f991 	bl	8000638 <__aeabi_dmul>
 8008316:	4b37      	ldr	r3, [pc, #220]	; (80083f4 <scalbn+0x104>)
 8008318:	429e      	cmp	r6, r3
 800831a:	4604      	mov	r4, r0
 800831c:	460d      	mov	r5, r1
 800831e:	da10      	bge.n	8008342 <scalbn+0x52>
 8008320:	a32b      	add	r3, pc, #172	; (adr r3, 80083d0 <scalbn+0xe0>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	e03a      	b.n	800839e <scalbn+0xae>
 8008328:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800832c:	428a      	cmp	r2, r1
 800832e:	d10c      	bne.n	800834a <scalbn+0x5a>
 8008330:	ee10 2a10 	vmov	r2, s0
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f7 ffc8 	bl	80002cc <__adddf3>
 800833c:	4604      	mov	r4, r0
 800833e:	460d      	mov	r5, r1
 8008340:	e019      	b.n	8008376 <scalbn+0x86>
 8008342:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008346:	460b      	mov	r3, r1
 8008348:	3a36      	subs	r2, #54	; 0x36
 800834a:	4432      	add	r2, r6
 800834c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008350:	428a      	cmp	r2, r1
 8008352:	dd08      	ble.n	8008366 <scalbn+0x76>
 8008354:	2d00      	cmp	r5, #0
 8008356:	a120      	add	r1, pc, #128	; (adr r1, 80083d8 <scalbn+0xe8>)
 8008358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835c:	da1c      	bge.n	8008398 <scalbn+0xa8>
 800835e:	a120      	add	r1, pc, #128	; (adr r1, 80083e0 <scalbn+0xf0>)
 8008360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008364:	e018      	b.n	8008398 <scalbn+0xa8>
 8008366:	2a00      	cmp	r2, #0
 8008368:	dd08      	ble.n	800837c <scalbn+0x8c>
 800836a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800836e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008372:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008376:	ec45 4b10 	vmov	d0, r4, r5
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008380:	da19      	bge.n	80083b6 <scalbn+0xc6>
 8008382:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008386:	429e      	cmp	r6, r3
 8008388:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800838c:	dd0a      	ble.n	80083a4 <scalbn+0xb4>
 800838e:	a112      	add	r1, pc, #72	; (adr r1, 80083d8 <scalbn+0xe8>)
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e2      	bne.n	800835e <scalbn+0x6e>
 8008398:	a30f      	add	r3, pc, #60	; (adr r3, 80083d8 <scalbn+0xe8>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f7f8 f94b 	bl	8000638 <__aeabi_dmul>
 80083a2:	e7cb      	b.n	800833c <scalbn+0x4c>
 80083a4:	a10a      	add	r1, pc, #40	; (adr r1, 80083d0 <scalbn+0xe0>)
 80083a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0b8      	beq.n	8008320 <scalbn+0x30>
 80083ae:	a10e      	add	r1, pc, #56	; (adr r1, 80083e8 <scalbn+0xf8>)
 80083b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b4:	e7b4      	b.n	8008320 <scalbn+0x30>
 80083b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083ba:	3236      	adds	r2, #54	; 0x36
 80083bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80083c4:	4620      	mov	r0, r4
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <scalbn+0x108>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	e7e8      	b.n	800839e <scalbn+0xae>
 80083cc:	f3af 8000 	nop.w
 80083d0:	c2f8f359 	.word	0xc2f8f359
 80083d4:	01a56e1f 	.word	0x01a56e1f
 80083d8:	8800759c 	.word	0x8800759c
 80083dc:	7e37e43c 	.word	0x7e37e43c
 80083e0:	8800759c 	.word	0x8800759c
 80083e4:	fe37e43c 	.word	0xfe37e43c
 80083e8:	c2f8f359 	.word	0xc2f8f359
 80083ec:	81a56e1f 	.word	0x81a56e1f
 80083f0:	43500000 	.word	0x43500000
 80083f4:	ffff3cb0 	.word	0xffff3cb0
 80083f8:	3c900000 	.word	0x3c900000

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr
